
H723ZGT6_CAN_Loop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800424c  0800424c  0000524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042a8  080042a8  000052a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080042ac  080042ac  000052ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  080042b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c0  24000010  080042c0  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000d0  080042c0  000060d0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c7b8  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001962  00000000  00000000  000127f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a88  00000000  00000000  00014158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007f2  00000000  00000000  00014be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000318ef  00000000  00000000  000153d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000bb11  00000000  00000000  00046cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00142de0  00000000  00000000  000527d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001955b2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c00  00000000  00000000  001955f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000070  00000000  00000000  001981f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08004234 	.word	0x08004234

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08004234 	.word	0x08004234

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000310:	f000 f908 	bl	8000524 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fad2 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f806 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f8d8 	bl	80004d0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000320:	f000 f870 	bl	8000404 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000324:	bf00      	nop
 8000326:	e7fd      	b.n	8000324 <main+0x18>

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b09c      	sub	sp, #112	@ 0x70
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000332:	224c      	movs	r2, #76	@ 0x4c
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 ff42 	bl	80041c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2220      	movs	r2, #32
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f003 ff3c 	bl	80041c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000348:	2002      	movs	r0, #2
 800034a:	f001 fcf1 	bl	8001d30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800034e:	2300      	movs	r3, #0
 8000350:	603b      	str	r3, [r7, #0]
 8000352:	4b2b      	ldr	r3, [pc, #172]	@ (8000400 <SystemClock_Config+0xd8>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a2a      	ldr	r2, [pc, #168]	@ (8000400 <SystemClock_Config+0xd8>)
 8000358:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <SystemClock_Config+0xd8>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800036a:	bf00      	nop
 800036c:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <SystemClock_Config+0xd8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000378:	d1f8      	bne.n	800036c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800037a:	2301      	movs	r3, #1
 800037c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000382:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000388:	2302      	movs	r3, #2
 800038a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800038c:	2302      	movs	r3, #2
 800038e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 22;
 8000390:	2316      	movs	r3, #22
 8000392:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000394:	2301      	movs	r3, #1
 8000396:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000398:	2302      	movs	r3, #2
 800039a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800039c:	2302      	movs	r3, #2
 800039e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003a0:	230c      	movs	r3, #12
 80003a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003a4:	2300      	movs	r3, #0
 80003a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 fcf7 	bl	8001da4 <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003bc:	f000 f8de 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	233f      	movs	r3, #63	@ 0x3f
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2303      	movs	r3, #3
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80003d0:	2340      	movs	r3, #64	@ 0x40
 80003d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80003d4:	2340      	movs	r3, #64	@ 0x40
 80003d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80003d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80003de:	2340      	movs	r3, #64	@ 0x40
 80003e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2103      	movs	r1, #3
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 f8b6 	bl	8002558 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80003f2:	f000 f8c3 	bl	800057c <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3770      	adds	r7, #112	@ 0x70
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	58024800 	.word	0x58024800

08000404 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000408:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800040a:	4a30      	ldr	r2, [pc, #192]	@ (80004cc <MX_FDCAN1_Init+0xc8>)
 800040c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000410:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000414:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8000416:	4b2c      	ldr	r3, [pc, #176]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000418:	2204      	movs	r2, #4
 800041a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800041c:	4b2a      	ldr	r3, [pc, #168]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800041e:	2201      	movs	r2, #1
 8000420:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000422:	4b29      	ldr	r3, [pc, #164]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000424:	2200      	movs	r2, #0
 8000426:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000428:	4b27      	ldr	r3, [pc, #156]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800042a:	2200      	movs	r2, #0
 800042c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 11;
 800042e:	4b26      	ldr	r3, [pc, #152]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000430:	220b      	movs	r2, #11
 8000432:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 5;
 8000434:	4b24      	ldr	r3, [pc, #144]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000436:	2205      	movs	r2, #5
 8000438:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 19;
 800043a:	4b23      	ldr	r3, [pc, #140]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800043c:	2213      	movs	r2, #19
 800043e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000440:	4b21      	ldr	r3, [pc, #132]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000442:	2205      	movs	r2, #5
 8000444:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 22;
 8000446:	4b20      	ldr	r3, [pc, #128]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000448:	2216      	movs	r2, #22
 800044a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 10;
 800044c:	4b1e      	ldr	r3, [pc, #120]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800044e:	220a      	movs	r2, #10
 8000450:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000454:	220e      	movs	r2, #14
 8000456:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 10;
 8000458:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800045a:	220a      	movs	r2, #10
 800045c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 5;
 800045e:	4b1a      	ldr	r3, [pc, #104]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000460:	2205      	movs	r2, #5
 8000462:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000464:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000466:	2200      	movs	r2, #0
 8000468:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 24;
 800046a:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800046c:	2218      	movs	r2, #24
 800046e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000470:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000472:	2200      	movs	r2, #0
 8000474:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000476:	4b14      	ldr	r3, [pc, #80]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000478:	2204      	movs	r2, #4
 800047a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800047c:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800047e:	2200      	movs	r2, #0
 8000480:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000484:	2204      	movs	r2, #4
 8000486:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000488:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800048a:	2200      	movs	r2, #0
 800048c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000490:	2204      	movs	r2, #4
 8000492:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 8000496:	2200      	movs	r2, #0
 8000498:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800049a:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 800049c:	2200      	movs	r2, #0
 800049e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <MX_FDCAN1_Init+0xc4>)
 80004b4:	f000 fc1c 	bl	8000cf0 <HAL_FDCAN_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80004be:	f000 f85d 	bl	800057c <Error_Handler>



  /* USER CODE END FDCAN1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2400002c 	.word	0x2400002c
 80004cc:	4000a000 	.word	0x4000a000

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d6:	4b12      	ldr	r3, [pc, #72]	@ (8000520 <MX_GPIO_Init+0x50>)
 80004d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004dc:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <MX_GPIO_Init+0x50>)
 80004de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <MX_GPIO_Init+0x50>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <MX_GPIO_Init+0x50>)
 80004f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004fa:	4a09      	ldr	r2, [pc, #36]	@ (8000520 <MX_GPIO_Init+0x50>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000504:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <MX_GPIO_Init+0x50>)
 8000506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	58024400 	.word	0x58024400

08000524 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000536:	f000 fb63 	bl	8000c00 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800053a:	2301      	movs	r3, #1
 800053c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800053e:	2300      	movs	r3, #0
 8000540:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000546:	231f      	movs	r3, #31
 8000548:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800054a:	2387      	movs	r3, #135	@ 0x87
 800054c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800054e:	2300      	movs	r3, #0
 8000550:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000552:	2300      	movs	r3, #0
 8000554:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800055a:	2301      	movs	r3, #1
 800055c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000566:	463b      	mov	r3, r7
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fb81 	bl	8000c70 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800056e:	2004      	movs	r0, #4
 8000570:	f000 fb5e 	bl	8000c30 <HAL_MPU_Enable>

}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <Error_Handler+0x8>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <HAL_MspInit+0x30>)
 8000590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000594:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <HAL_MspInit+0x30>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <HAL_MspInit+0x30>)
 80005a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	58024400 	.word	0x58024400

080005bc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0b8      	sub	sp, #224	@ 0xe0
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	22b8      	movs	r2, #184	@ 0xb8
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fdef 	bl	80041c0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000694 <HAL_FDCAN_MspInit+0xd8>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d14e      	bne.n	800068a <HAL_FDCAN_MspInit+0xce>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80005ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005f0:	f04f 0300 	mov.w	r3, #0
 80005f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80005f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fad8 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800060e:	f7ff ffb5 	bl	800057c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <HAL_FDCAN_MspInit+0xdc>)
 8000614:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000618:	4a1f      	ldr	r2, [pc, #124]	@ (8000698 <HAL_FDCAN_MspInit+0xdc>)
 800061a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800061e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <HAL_FDCAN_MspInit+0xdc>)
 8000624:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <HAL_FDCAN_MspInit+0xdc>)
 8000632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000636:	4a18      	ldr	r2, [pc, #96]	@ (8000698 <HAL_FDCAN_MspInit+0xdc>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <HAL_FDCAN_MspInit+0xdc>)
 8000642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800064e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000652:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000668:	2309      	movs	r3, #9
 800066a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000672:	4619      	mov	r1, r3
 8000674:	4809      	ldr	r0, [pc, #36]	@ (800069c <HAL_FDCAN_MspInit+0xe0>)
 8000676:	f001 f9b3 	bl	80019e0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2013      	movs	r0, #19
 8000680:	f000 fa89 	bl	8000b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000684:	2013      	movs	r0, #19
 8000686:	f000 faa0 	bl	8000bca <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800068a:	bf00      	nop
 800068c:	37e0      	adds	r7, #224	@ 0xe0
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	4000a000 	.word	0x4000a000
 8000698:	58024400 	.word	0x58024400
 800069c:	58020000 	.word	0x58020000

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <MemManage_Handler+0x4>

080006b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f6:	f000 f953 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000704:	4802      	ldr	r0, [pc, #8]	@ (8000710 <FDCAN1_IT0_IRQHandler+0x10>)
 8000706:	f000 fcd1 	bl	80010ac <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2400002c 	.word	0x2400002c

08000714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000718:	4b3e      	ldr	r3, [pc, #248]	@ (8000814 <SystemInit+0x100>)
 800071a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800071e:	4a3d      	ldr	r2, [pc, #244]	@ (8000814 <SystemInit+0x100>)
 8000720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000728:	4b3b      	ldr	r3, [pc, #236]	@ (8000818 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f003 030f 	and.w	r3, r3, #15
 8000730:	2b06      	cmp	r3, #6
 8000732:	d807      	bhi.n	8000744 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000734:	4b38      	ldr	r3, [pc, #224]	@ (8000818 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f023 030f 	bic.w	r3, r3, #15
 800073c:	4a36      	ldr	r2, [pc, #216]	@ (8000818 <SystemInit+0x104>)
 800073e:	f043 0307 	orr.w	r3, r3, #7
 8000742:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000744:	4b35      	ldr	r3, [pc, #212]	@ (800081c <SystemInit+0x108>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a34      	ldr	r2, [pc, #208]	@ (800081c <SystemInit+0x108>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000750:	4b32      	ldr	r3, [pc, #200]	@ (800081c <SystemInit+0x108>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000756:	4b31      	ldr	r3, [pc, #196]	@ (800081c <SystemInit+0x108>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4930      	ldr	r1, [pc, #192]	@ (800081c <SystemInit+0x108>)
 800075c:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <SystemInit+0x10c>)
 800075e:	4013      	ands	r3, r2
 8000760:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <SystemInit+0x104>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	2b00      	cmp	r3, #0
 800076c:	d007      	beq.n	800077e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800076e:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <SystemInit+0x104>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f023 030f 	bic.w	r3, r3, #15
 8000776:	4a28      	ldr	r2, [pc, #160]	@ (8000818 <SystemInit+0x104>)
 8000778:	f043 0307 	orr.w	r3, r3, #7
 800077c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800077e:	4b27      	ldr	r3, [pc, #156]	@ (800081c <SystemInit+0x108>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000784:	4b25      	ldr	r3, [pc, #148]	@ (800081c <SystemInit+0x108>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800078a:	4b24      	ldr	r3, [pc, #144]	@ (800081c <SystemInit+0x108>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000790:	4b22      	ldr	r3, [pc, #136]	@ (800081c <SystemInit+0x108>)
 8000792:	4a24      	ldr	r2, [pc, #144]	@ (8000824 <SystemInit+0x110>)
 8000794:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <SystemInit+0x108>)
 8000798:	4a23      	ldr	r2, [pc, #140]	@ (8000828 <SystemInit+0x114>)
 800079a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800079c:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <SystemInit+0x108>)
 800079e:	4a23      	ldr	r2, [pc, #140]	@ (800082c <SystemInit+0x118>)
 80007a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <SystemInit+0x108>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <SystemInit+0x108>)
 80007aa:	4a20      	ldr	r2, [pc, #128]	@ (800082c <SystemInit+0x118>)
 80007ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <SystemInit+0x108>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <SystemInit+0x108>)
 80007b6:	4a1d      	ldr	r2, [pc, #116]	@ (800082c <SystemInit+0x118>)
 80007b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <SystemInit+0x108>)
 80007bc:	2200      	movs	r2, #0
 80007be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007c0:	4b16      	ldr	r3, [pc, #88]	@ (800081c <SystemInit+0x108>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a15      	ldr	r2, [pc, #84]	@ (800081c <SystemInit+0x108>)
 80007c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <SystemInit+0x108>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <SystemInit+0x108>)
 80007d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d113      	bne.n	8000808 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <SystemInit+0x108>)
 80007e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007e6:	4a0d      	ldr	r2, [pc, #52]	@ (800081c <SystemInit+0x108>)
 80007e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <SystemInit+0x11c>)
 80007f2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007f6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <SystemInit+0x108>)
 80007fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007fe:	4a07      	ldr	r2, [pc, #28]	@ (800081c <SystemInit+0x108>)
 8000800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000804:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	52002000 	.word	0x52002000
 800081c:	58024400 	.word	0x58024400
 8000820:	eaf6ed7f 	.word	0xeaf6ed7f
 8000824:	02020200 	.word	0x02020200
 8000828:	01ff0000 	.word	0x01ff0000
 800082c:	01010280 	.word	0x01010280
 8000830:	52004000 	.word	0x52004000

08000834 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <ExitRun0Mode+0x2c>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	4a08      	ldr	r2, [pc, #32]	@ (8000860 <ExitRun0Mode+0x2c>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000844:	bf00      	nop
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <ExitRun0Mode+0x2c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f9      	beq.n	8000846 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	58024800 	.word	0x58024800

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80008a0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000868:	f7ff ffe4 	bl	8000834 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800086c:	f7ff ff52 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	@ (80008b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000896:	f003 fc9b 	bl	80041d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fd37 	bl	800030c <main>
  bx  lr
 800089e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008a0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80008a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008a8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008ac:	080042b0 	.word	0x080042b0
  ldr r2, =_sbss
 80008b0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008b4:	240000d0 	.word	0x240000d0

080008b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC3_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c2:	2003      	movs	r0, #3
 80008c4:	f000 f95c 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008c8:	f001 fffc 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 80008cc:	4602      	mov	r2, r0
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_Init+0x68>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	0a1b      	lsrs	r3, r3, #8
 80008d4:	f003 030f 	and.w	r3, r3, #15
 80008d8:	4913      	ldr	r1, [pc, #76]	@ (8000928 <HAL_Init+0x6c>)
 80008da:	5ccb      	ldrb	r3, [r1, r3]
 80008dc:	f003 031f 	and.w	r3, r3, #31
 80008e0:	fa22 f303 	lsr.w	r3, r2, r3
 80008e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_Init+0x68>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000928 <HAL_Init+0x6c>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	f003 031f 	and.w	r3, r3, #31
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	fa22 f303 	lsr.w	r3, r2, r3
 80008fc:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <HAL_Init+0x70>)
 80008fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000900:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <HAL_Init+0x74>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f814 	bl	8000934 <HAL_InitTick>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e002      	b.n	800091c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000916:	f7ff fe37 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58024400 	.word	0x58024400
 8000928:	08004298 	.word	0x08004298
 800092c:	24000004 	.word	0x24000004
 8000930:	24000000 	.word	0x24000000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800093c:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <HAL_InitTick+0x60>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000944:	2301      	movs	r3, #1
 8000946:	e021      	b.n	800098c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <HAL_InitTick+0x64>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <HAL_InitTick+0x60>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f941 	bl	8000be6 <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f000 f90b 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	@ (800099c <HAL_InitTick+0x68>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2400000c 	.word	0x2400000c
 8000998:	24000000 	.word	0x24000000
 800099c:	24000008 	.word	0x24000008

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2400000c 	.word	0x2400000c
 80009c4:	240000cc 	.word	0x240000cc

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	240000cc 	.word	0x240000cc

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x40>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <__NVIC_SetPriorityGrouping+0x40>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	05fa0000 	.word	0x05fa0000

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	@ (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	@ (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	@ (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	@ 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff29 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff40 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff90 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5f 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff33 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa4 	bl	8000b3c <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c04:	f3bf 8f5f 	dmb	sy
}
 8000c08:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <HAL_MPU_Disable+0x28>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0e:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_MPU_Disable+0x28>)
 8000c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c14:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_MPU_Disable+0x2c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00
 8000c2c:	e000ed90 	.word	0xe000ed90

08000c30 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <HAL_MPU_Enable+0x38>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_MPU_Enable+0x3c>)
 8000c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c46:	4a09      	ldr	r2, [pc, #36]	@ (8000c6c <HAL_MPU_Enable+0x3c>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c4c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4e:	f3bf 8f4f 	dsb	sy
}
 8000c52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c54:	f3bf 8f6f 	isb	sy
}
 8000c58:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed90 	.word	0xe000ed90
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	785a      	ldrb	r2, [r3, #1]
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <HAL_MPU_ConfigRegion+0x7c>)
 8000c7e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c80:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <HAL_MPU_ConfigRegion+0x7c>)
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <HAL_MPU_ConfigRegion+0x7c>)
 8000c86:	f023 0301 	bic.w	r3, r3, #1
 8000c8a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c8c:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <HAL_MPU_ConfigRegion+0x7c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7b1b      	ldrb	r3, [r3, #12]
 8000c98:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7adb      	ldrb	r3, [r3, #11]
 8000c9e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7a9b      	ldrb	r3, [r3, #10]
 8000ca6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ca8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7b5b      	ldrb	r3, [r3, #13]
 8000cae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000cb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7b9b      	ldrb	r3, [r3, #14]
 8000cb6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000cb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7bdb      	ldrb	r3, [r3, #15]
 8000cbe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000cc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7a5b      	ldrb	r3, [r3, #9]
 8000cc6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000cc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7a1b      	ldrb	r3, [r3, #8]
 8000cce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000cd0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000cda:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000cdc:	6113      	str	r3, [r2, #16]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed90 	.word	0xe000ed90

08000cf0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b098      	sub	sp, #96	@ 0x60
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000cf8:	4a84      	ldr	r2, [pc, #528]	@ (8000f0c <HAL_FDCAN_Init+0x21c>)
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4611      	mov	r1, r2
 8000d00:	224c      	movs	r2, #76	@ 0x4c
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 fa88 	bl	8004218 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e1c6      	b.n	80010a0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a7e      	ldr	r2, [pc, #504]	@ (8000f10 <HAL_FDCAN_Init+0x220>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d106      	bne.n	8000d2a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d106      	bne.n	8000d44 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fc3c 	bl	80005bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0210 	bic.w	r2, r2, #16
 8000d52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d54:	f7ff fe38 	bl	80009c8 <HAL_GetTick>
 8000d58:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d5a:	e014      	b.n	8000d86 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d5c:	f7ff fe34 	bl	80009c8 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b0a      	cmp	r3, #10
 8000d68:	d90d      	bls.n	8000d86 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e18c      	b.n	80010a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d0e3      	beq.n	8000d5c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	699a      	ldr	r2, [r3, #24]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0201 	orr.w	r2, r2, #1
 8000da2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da4:	f7ff fe10 	bl	80009c8 <HAL_GetTick>
 8000da8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000daa:	e014      	b.n	8000dd6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000dac:	f7ff fe0c 	bl	80009c8 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b0a      	cmp	r3, #10
 8000db8:	d90d      	bls.n	8000dd6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dc0:	f043 0201 	orr.w	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e164      	b.n	80010a0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0e3      	beq.n	8000dac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	699a      	ldr	r2, [r3, #24]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0202 	orr.w	r2, r2, #2
 8000df2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7c1b      	ldrb	r3, [r3, #16]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d108      	bne.n	8000e0e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e0a:	619a      	str	r2, [r3, #24]
 8000e0c:	e007      	b.n	8000e1e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	699a      	ldr	r2, [r3, #24]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e1c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7c5b      	ldrb	r3, [r3, #17]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d108      	bne.n	8000e38 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	699a      	ldr	r2, [r3, #24]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e34:	619a      	str	r2, [r3, #24]
 8000e36:	e007      	b.n	8000e48 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	699a      	ldr	r2, [r3, #24]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000e46:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7c9b      	ldrb	r3, [r3, #18]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d108      	bne.n	8000e62 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	699a      	ldr	r2, [r3, #24]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e5e:	619a      	str	r2, [r3, #24]
 8000e60:	e007      	b.n	8000e72 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	699a      	ldr	r2, [r3, #24]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e70:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	699a      	ldr	r2, [r3, #24]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000e96:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0210 	bic.w	r2, r2, #16
 8000ea6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d108      	bne.n	8000ec2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	699a      	ldr	r2, [r3, #24]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0204 	orr.w	r2, r2, #4
 8000ebe:	619a      	str	r2, [r3, #24]
 8000ec0:	e030      	b.n	8000f24 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d02c      	beq.n	8000f24 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d020      	beq.n	8000f14 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	699a      	ldr	r2, [r3, #24]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ee0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 0210 	orr.w	r2, r2, #16
 8000ef0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d114      	bne.n	8000f24 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	699a      	ldr	r2, [r3, #24]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0220 	orr.w	r2, r2, #32
 8000f08:	619a      	str	r2, [r3, #24]
 8000f0a:	e00b      	b.n	8000f24 <HAL_FDCAN_Init+0x234>
 8000f0c:	0800424c 	.word	0x0800424c
 8000f10:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0220 	orr.w	r2, r2, #32
 8000f22:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f34:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f3c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f4c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f4e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f58:	d115      	bne.n	8000f86 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f64:	3b01      	subs	r3, #1
 8000f66:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f68:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f72:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f82:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f84:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00a      	beq.n	8000fa4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fac:	4413      	add	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d011      	beq.n	8000fd6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000fba:	f023 0107 	bic.w	r1, r3, #7
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	3360      	adds	r3, #96	@ 0x60
 8000fc6:	443b      	add	r3, r7
 8000fc8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d011      	beq.n	8001002 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8000fe6:	f023 0107 	bic.w	r1, r3, #7
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	3360      	adds	r3, #96	@ 0x60
 8000ff2:	443b      	add	r3, r7
 8000ff4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001006:	2b00      	cmp	r3, #0
 8001008:	d012      	beq.n	8001030 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001012:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	3360      	adds	r3, #96	@ 0x60
 800101e:	443b      	add	r3, r7
 8001020:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001024:	011a      	lsls	r2, r3, #4
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001034:	2b00      	cmp	r3, #0
 8001036:	d012      	beq.n	800105e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001040:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	3360      	adds	r3, #96	@ 0x60
 800104c:	443b      	add	r3, r7
 800104e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001052:	021a      	lsls	r2, r3, #8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a11      	ldr	r2, [pc, #68]	@ (80010a8 <HAL_FDCAN_Init+0x3b8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d107      	bne.n	8001078 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f022 0203 	bic.w	r2, r2, #3
 8001076:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 fb1f 	bl	80016d4 <FDCAN_CalcultateRamBlockAddresses>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800109c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3760      	adds	r7, #96	@ 0x60
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	4000a000 	.word	0x4000a000

080010ac <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b096      	sub	sp, #88	@ 0x58
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80010b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	079b      	lsls	r3, r3, #30
 80010ba:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80010bc:	4b98      	ldr	r3, [pc, #608]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	079b      	lsls	r3, r3, #30
 80010c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80010c4:	4013      	ands	r3, r2
 80010c6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ce:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80010d2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80010dc:	4013      	ands	r3, r2
 80010de:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010f4:	4013      	ands	r3, r2
 80010f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800110a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800110c:	4013      	ands	r3, r2
 800110e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001116:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800111a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001124:	4013      	ands	r3, r2
 8001126:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800112e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800113a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800113c:	4013      	ands	r3, r2
 800113e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800114e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d010      	beq.n	800117e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800115c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00a      	beq.n	800117e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001170:	651a      	str	r2, [r3, #80]	@ 0x50
 8001172:	4b6b      	ldr	r3, [pc, #428]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 fa5f 	bl	800163c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800117e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001180:	0a9b      	lsrs	r3, r3, #10
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01d      	beq.n	80011c6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800118a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800118c:	0a9b      	lsrs	r3, r3, #10
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d017      	beq.n	80011c6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800119e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011aa:	4013      	ands	r3, r2
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80011b8:	4b59      	ldr	r3, [pc, #356]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80011be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fa12 	bl	80015ea <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80011c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00d      	beq.n	80011e8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80011d2:	4b54      	ldr	r3, [pc, #336]	@ (8001324 <HAL_FDCAN_IRQHandler+0x278>)
 80011d4:	400b      	ands	r3, r1
 80011d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80011d8:	4a51      	ldr	r2, [pc, #324]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 80011da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011dc:	0f9b      	lsrs	r3, r3, #30
 80011de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80011e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f9c0 	bl	8001568 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80011e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00d      	beq.n	800120a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80011f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001324 <HAL_FDCAN_IRQHandler+0x278>)
 80011f6:	400b      	ands	r3, r1
 80011f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80011fa:	4a49      	ldr	r2, [pc, #292]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 80011fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011fe:	0f9b      	lsrs	r3, r3, #30
 8001200:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001202:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f9ba 	bl	800157e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800120a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00d      	beq.n	800122c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001216:	4b43      	ldr	r3, [pc, #268]	@ (8001324 <HAL_FDCAN_IRQHandler+0x278>)
 8001218:	400b      	ands	r3, r1
 800121a:	6513      	str	r3, [r2, #80]	@ 0x50
 800121c:	4a40      	ldr	r2, [pc, #256]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 800121e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001220:	0f9b      	lsrs	r3, r3, #30
 8001222:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001224:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f9b4 	bl	8001594 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800122c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00d      	beq.n	800124e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001238:	4b3a      	ldr	r3, [pc, #232]	@ (8001324 <HAL_FDCAN_IRQHandler+0x278>)
 800123a:	400b      	ands	r3, r1
 800123c:	6513      	str	r3, [r2, #80]	@ 0x50
 800123e:	4a38      	ldr	r2, [pc, #224]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 8001240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001242:	0f9b      	lsrs	r3, r3, #30
 8001244:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001246:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f9ae 	bl	80015aa <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800124e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001250:	0adb      	lsrs	r3, r3, #11
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d010      	beq.n	800127c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800125a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800125c:	0adb      	lsrs	r3, r3, #11
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00a      	beq.n	800127c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800126e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001270:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f9a2 	bl	80015c0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800127c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800127e:	0a5b      	lsrs	r3, r3, #9
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d01d      	beq.n	80012c4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800128a:	0a5b      	lsrs	r3, r3, #9
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d017      	beq.n	80012c4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012a8:	4013      	ands	r3, r2
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80012bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f988 	bl	80015d4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80012c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012c6:	0cdb      	lsrs	r3, r3, #19
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d010      	beq.n	80012f2 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80012d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012d2:	0cdb      	lsrs	r3, r3, #19
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00a      	beq.n	80012f2 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80012e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f987 	bl	8001600 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80012f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012f4:	0c1b      	lsrs	r3, r3, #16
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d016      	beq.n	800132c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80012fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001300:	0c1b      	lsrs	r3, r3, #16
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d010      	beq.n	800132c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001312:	651a      	str	r2, [r3, #80]	@ 0x50
 8001314:	4b02      	ldr	r3, [pc, #8]	@ (8001320 <HAL_FDCAN_IRQHandler+0x274>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	e004      	b.n	8001328 <HAL_FDCAN_IRQHandler+0x27c>
 800131e:	bf00      	nop
 8001320:	4000a800 	.word	0x4000a800
 8001324:	3fcfffff 	.word	0x3fcfffff
 8001328:	f000 f974 	bl	8001614 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800132c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800132e:	0c9b      	lsrs	r3, r3, #18
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d010      	beq.n	800135a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800133a:	0c9b      	lsrs	r3, r3, #18
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00a      	beq.n	800135a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800134c:	651a      	str	r2, [r3, #80]	@ 0x50
 800134e:	4b83      	ldr	r3, [pc, #524]	@ (800155c <HAL_FDCAN_IRQHandler+0x4b0>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f967 	bl	8001628 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800135a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800135c:	0c5b      	lsrs	r3, r3, #17
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d015      	beq.n	8001392 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001368:	0c5b      	lsrs	r3, r3, #17
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00f      	beq.n	8001392 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800137a:	651a      	str	r2, [r3, #80]	@ 0x50
 800137c:	4b77      	ldr	r3, [pc, #476]	@ (800155c <HAL_FDCAN_IRQHandler+0x4b0>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001388:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00d      	beq.n	80013b4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800139e:	4b70      	ldr	r3, [pc, #448]	@ (8001560 <HAL_FDCAN_IRQHandler+0x4b4>)
 80013a0:	400b      	ands	r3, r1
 80013a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80013a4:	4a6d      	ldr	r2, [pc, #436]	@ (800155c <HAL_FDCAN_IRQHandler+0x4b0>)
 80013a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013a8:	0f9b      	lsrs	r3, r3, #30
 80013aa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80013ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f958 	bl	8001664 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80013b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d011      	beq.n	80013de <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80013c0:	4b67      	ldr	r3, [pc, #412]	@ (8001560 <HAL_FDCAN_IRQHandler+0x4b4>)
 80013c2:	400b      	ands	r3, r1
 80013c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80013c6:	4a65      	ldr	r2, [pc, #404]	@ (800155c <HAL_FDCAN_IRQHandler+0x4b0>)
 80013c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013ca:	0f9b      	lsrs	r3, r3, #30
 80013cc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80013d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a60      	ldr	r2, [pc, #384]	@ (8001564 <HAL_FDCAN_IRQHandler+0x4b8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	f040 80ac 	bne.w	8001542 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80a4 	beq.w	8001542 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800140e:	4013      	ands	r3, r2
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001426:	4013      	ands	r3, r2
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143e:	4013      	ands	r3, r2
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800144c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	6a3a      	ldr	r2, [r7, #32]
 8001456:	4013      	ands	r3, r2
 8001458:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8001464:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	4013      	ands	r3, r2
 8001470:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800148e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f8f1 	bl	800167a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014a4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80014a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f8f1 	bl	8001690 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	099b      	lsrs	r3, r3, #6
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01a      	beq.n	80014f0 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d014      	beq.n	80014f0 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014dc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2240      	movs	r2, #64	@ 0x40
 80014e4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	6939      	ldr	r1, [r7, #16]
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f8db 	bl	80016a6 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014fc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80014fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f8dc 	bl	80016be <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	6a3a      	ldr	r2, [r7, #32]
 8001512:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f87f 	bl	8001650 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001552:	bf00      	nop
 8001554:	3758      	adds	r7, #88	@ 0x58
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	4000a800 	.word	0x4000a800
 8001560:	3fcfffff 	.word	0x3fcfffff
 8001564:	4000a000 	.word	0x4000a000

08001568 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016e0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80016ea:	4ba7      	ldr	r3, [pc, #668]	@ (8001988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	0091      	lsls	r1, r2, #2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	430b      	orrs	r3, r1
 80016f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001704:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	4413      	add	r3, r2
 8001720:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800172a:	4b97      	ldr	r3, [pc, #604]	@ (8001988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800172c:	4013      	ands	r3, r2
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	0091      	lsls	r1, r2, #2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	430b      	orrs	r3, r1
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001744:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	4413      	add	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800176c:	4b86      	ldr	r3, [pc, #536]	@ (8001988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800176e:	4013      	ands	r3, r2
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	0091      	lsls	r1, r2, #2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001786:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	041a      	lsls	r2, r3, #16
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4413      	add	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80017b4:	4b74      	ldr	r3, [pc, #464]	@ (8001988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	0091      	lsls	r1, r2, #2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	430b      	orrs	r3, r1
 80017c2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80017ce:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017d6:	041a      	lsls	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80017fc:	4b62      	ldr	r3, [pc, #392]	@ (8001988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80017fe:	4013      	ands	r3, r2
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	0091      	lsls	r1, r2, #2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	430b      	orrs	r3, r1
 800180a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	4413      	add	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001828:	4b57      	ldr	r3, [pc, #348]	@ (8001988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800182a:	4013      	ands	r3, r2
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	0091      	lsls	r1, r2, #2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	430b      	orrs	r3, r1
 8001836:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001842:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4413      	add	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800186a:	4b47      	ldr	r3, [pc, #284]	@ (8001988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800186c:	4013      	ands	r3, r2
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	0091      	lsls	r1, r2, #2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	430b      	orrs	r3, r1
 8001878:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001884:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188c:	041a      	lsls	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018a0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a8:	061a      	lsls	r2, r3, #24
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018b8:	4b34      	ldr	r3, [pc, #208]	@ (800198c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80018ba:	4413      	add	r3, r2
 80018bc:	009a      	lsls	r2, r3, #2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	441a      	add	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	441a      	add	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80018f4:	441a      	add	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800190c:	441a      	add	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001924:	441a      	add	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	441a      	add	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	441a      	add	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8001970:	441a      	add	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197e:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d915      	bls.n	80019b0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001984:	e006      	b.n	8001994 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001986:	bf00      	nop
 8001988:	ffff0003 	.word	0xffff0003
 800198c:	10002b00 	.word	0x10002b00
 8001990:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800199a:	f043 0220 	orr.w	r2, r3, #32
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2203      	movs	r2, #3
 80019a8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e010      	b.n	80019d2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e005      	b.n	80019c4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d3f3      	bcc.n	80019b8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80019ee:	4b86      	ldr	r3, [pc, #536]	@ (8001c08 <HAL_GPIO_Init+0x228>)
 80019f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019f2:	e18c      	b.n	8001d0e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 817e 	beq.w	8001d08 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d005      	beq.n	8001a24 <HAL_GPIO_Init+0x44>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d130      	bne.n	8001a86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 0201 	and.w	r2, r3, #1
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d017      	beq.n	8001ac2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d123      	bne.n	8001b16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	69b9      	ldr	r1, [r7, #24]
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0203 	and.w	r2, r3, #3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 80d8 	beq.w	8001d08 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b58:	4b2c      	ldr	r3, [pc, #176]	@ (8001c0c <HAL_GPIO_Init+0x22c>)
 8001b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c0c <HAL_GPIO_Init+0x22c>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b68:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <HAL_GPIO_Init+0x22c>)
 8001b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b76:	4a26      	ldr	r2, [pc, #152]	@ (8001c10 <HAL_GPIO_Init+0x230>)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c14 <HAL_GPIO_Init+0x234>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d04a      	beq.n	8001c38 <HAL_GPIO_Init+0x258>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c18 <HAL_GPIO_Init+0x238>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02b      	beq.n	8001c02 <HAL_GPIO_Init+0x222>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <HAL_GPIO_Init+0x23c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d025      	beq.n	8001bfe <HAL_GPIO_Init+0x21e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c20 <HAL_GPIO_Init+0x240>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01f      	beq.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_GPIO_Init+0x244>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x216>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <HAL_GPIO_Init+0x248>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	@ (8001c2c <HAL_GPIO_Init+0x24c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a16      	ldr	r2, [pc, #88]	@ (8001c30 <HAL_GPIO_Init+0x250>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x20a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a15      	ldr	r2, [pc, #84]	@ (8001c34 <HAL_GPIO_Init+0x254>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x206>
 8001be2:	2309      	movs	r3, #9
 8001be4:	e029      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001be6:	230a      	movs	r3, #10
 8001be8:	e027      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e025      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e023      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e021      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e01f      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e01d      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e01b      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e019      	b.n	8001c3a <HAL_GPIO_Init+0x25a>
 8001c06:	bf00      	nop
 8001c08:	58000080 	.word	0x58000080
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	58000400 	.word	0x58000400
 8001c14:	58020000 	.word	0x58020000
 8001c18:	58020400 	.word	0x58020400
 8001c1c:	58020800 	.word	0x58020800
 8001c20:	58020c00 	.word	0x58020c00
 8001c24:	58021000 	.word	0x58021000
 8001c28:	58021400 	.word	0x58021400
 8001c2c:	58021800 	.word	0x58021800
 8001c30:	58021c00 	.word	0x58021c00
 8001c34:	58022400 	.word	0x58022400
 8001c38:	2300      	movs	r3, #0
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f002 0203 	and.w	r2, r2, #3
 8001c40:	0092      	lsls	r2, r2, #2
 8001c42:	4093      	lsls	r3, r2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4a:	4938      	ldr	r1, [pc, #224]	@ (8001d2c <HAL_GPIO_Init+0x34c>)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f47f ae6b 	bne.w	80019f4 <HAL_GPIO_Init+0x14>
  }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3724      	adds	r7, #36	@ 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	58000400 	.word	0x58000400

08001d30 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d00a      	beq.n	8001d5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d44:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e01f      	b.n	8001d96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e01d      	b.n	8001d96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	490f      	ldr	r1, [pc, #60]	@ (8001da0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d6a:	f7fe fe2d 	bl	80009c8 <HAL_GetTick>
 8001d6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d70:	e009      	b.n	8001d86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d72:	f7fe fe29 	bl	80009c8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d80:	d901      	bls.n	8001d86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e007      	b.n	8001d96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_PWREx_ConfigSupply+0x70>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d92:	d1ee      	bne.n	8001d72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	58024800 	.word	0x58024800

08001da4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	@ 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e3c8      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8087 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc4:	4b88      	ldr	r3, [pc, #544]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dce:	4b86      	ldr	r3, [pc, #536]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d007      	beq.n	8001dea <HAL_RCC_OscConfig+0x46>
 8001dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ddc:	2b18      	cmp	r3, #24
 8001dde:	d110      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e>
 8001de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d10b      	bne.n	8001e02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dea:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d06c      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d168      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e3a2      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x76>
 8001e0c:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	e02e      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x98>
 8001e22:	4b71      	ldr	r3, [pc, #452]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a70      	ldr	r2, [pc, #448]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a6d      	ldr	r2, [pc, #436]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0xbc>
 8001e46:	4b68      	ldr	r3, [pc, #416]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a67      	ldr	r2, [pc, #412]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b65      	ldr	r3, [pc, #404]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a64      	ldr	r2, [pc, #400]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0xd4>
 8001e60:	4b61      	ldr	r3, [pc, #388]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a60      	ldr	r2, [pc, #384]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe fda2 	bl	80009c8 <HAL_GetTick>
 8001e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7fe fd9e 	bl	80009c8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e356      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e9a:	4b53      	ldr	r3, [pc, #332]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xe4>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7fe fd8e 	bl	80009c8 <HAL_GetTick>
 8001eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7fe fd8a 	bl	80009c8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	@ 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e342      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ec2:	4b49      	ldr	r3, [pc, #292]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x10c>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 808c 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee0:	4b41      	ldr	r3, [pc, #260]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ee8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eea:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_RCC_OscConfig+0x162>
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	2b18      	cmp	r3, #24
 8001efa:	d137      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1c8>
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d132      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f06:	4b38      	ldr	r3, [pc, #224]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x17a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e314      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f1e:	4b32      	ldr	r3, [pc, #200]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0219 	bic.w	r2, r3, #25
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	492f      	ldr	r1, [pc, #188]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7fe fd4a 	bl	80009c8 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7fe fd46 	bl	80009c8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e2fe      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f4a:	4b27      	ldr	r3, [pc, #156]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	061b      	lsls	r3, r3, #24
 8001f64:	4920      	ldr	r1, [pc, #128]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f6a:	e045      	b.n	8001ff8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d026      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 0219 	bic.w	r2, r3, #25
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4919      	ldr	r1, [pc, #100]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fd1f 	bl	80009c8 <HAL_GetTick>
 8001f8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7fe fd1b 	bl	80009c8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e2d3      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	490b      	ldr	r1, [pc, #44]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	e01a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_RCC_OscConfig+0x244>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7fe fcfb 	bl	80009c8 <HAL_GetTick>
 8001fd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7fe fcf7 	bl	80009c8 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d903      	bls.n	8001fec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e2af      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
 8001fe8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fec:	4b96      	ldr	r3, [pc, #600]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	d06a      	beq.n	80020da <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002004:	4b90      	ldr	r3, [pc, #576]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800200c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800200e:	4b8e      	ldr	r3, [pc, #568]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b08      	cmp	r3, #8
 8002018:	d007      	beq.n	800202a <HAL_RCC_OscConfig+0x286>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b18      	cmp	r3, #24
 800201e:	d11b      	bne.n	8002058 <HAL_RCC_OscConfig+0x2b4>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d116      	bne.n	8002058 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800202a:	4b87      	ldr	r3, [pc, #540]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x29e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	2b80      	cmp	r3, #128	@ 0x80
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e282      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002042:	4b81      	ldr	r3, [pc, #516]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	497d      	ldr	r1, [pc, #500]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002056:	e040      	b.n	80020da <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d023      	beq.n	80020a8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002060:	4b79      	ldr	r3, [pc, #484]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a78      	ldr	r2, [pc, #480]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800206a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe fcac 	bl	80009c8 <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002074:	f7fe fca8 	bl	80009c8 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e260      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002086:	4b70      	ldr	r3, [pc, #448]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002092:	4b6d      	ldr	r3, [pc, #436]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	061b      	lsls	r3, r3, #24
 80020a0:	4969      	ldr	r1, [pc, #420]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60cb      	str	r3, [r1, #12]
 80020a6:	e018      	b.n	80020da <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020a8:	4b67      	ldr	r3, [pc, #412]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a66      	ldr	r2, [pc, #408]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 80020ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe fc88 	bl	80009c8 <HAL_GetTick>
 80020b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020bc:	f7fe fc84 	bl	80009c8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e23c      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020ce:	4b5e      	ldr	r3, [pc, #376]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d036      	beq.n	8002154 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d019      	beq.n	8002122 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b56      	ldr	r3, [pc, #344]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 80020f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f2:	4a55      	ldr	r2, [pc, #340]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7fe fc65 	bl	80009c8 <HAL_GetTick>
 80020fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002102:	f7fe fc61 	bl	80009c8 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e219      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002114:	4b4c      	ldr	r3, [pc, #304]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x35e>
 8002120:	e018      	b.n	8002154 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002122:	4b49      	ldr	r3, [pc, #292]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002126:	4a48      	ldr	r2, [pc, #288]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe fc4b 	bl	80009c8 <HAL_GetTick>
 8002132:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe fc47 	bl	80009c8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1ff      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002148:	4b3f      	ldr	r3, [pc, #252]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800214a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d036      	beq.n	80021ce <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d019      	beq.n	800219c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002168:	4b37      	ldr	r3, [pc, #220]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a36      	ldr	r2, [pc, #216]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800216e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002172:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002174:	f7fe fc28 	bl	80009c8 <HAL_GetTick>
 8002178:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217c:	f7fe fc24 	bl	80009c8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1dc      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x3d8>
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800219c:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 80021a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021a8:	f7fe fc0e 	bl	80009c8 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7fe fc0a 	bl	80009c8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1c2      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021c2:	4b21      	ldr	r3, [pc, #132]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8086 	beq.w	80022e8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <HAL_RCC_OscConfig+0x4a8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1a      	ldr	r2, [pc, #104]	@ (800224c <HAL_RCC_OscConfig+0x4a8>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021e8:	f7fe fbee 	bl	80009c8 <HAL_GetTick>
 80021ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f0:	f7fe fbea 	bl	80009c8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	@ 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1a2      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002202:	4b12      	ldr	r3, [pc, #72]	@ (800224c <HAL_RCC_OscConfig+0x4a8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d106      	bne.n	8002224 <HAL_RCC_OscConfig+0x480>
 8002216:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221a:	4a0b      	ldr	r2, [pc, #44]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6713      	str	r3, [r2, #112]	@ 0x70
 8002222:	e032      	b.n	800228a <HAL_RCC_OscConfig+0x4e6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d111      	bne.n	8002250 <HAL_RCC_OscConfig+0x4ac>
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002230:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	@ 0x70
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223c:	4a02      	ldr	r2, [pc, #8]	@ (8002248 <HAL_RCC_OscConfig+0x4a4>)
 800223e:	f023 0304 	bic.w	r3, r3, #4
 8002242:	6713      	str	r3, [r2, #112]	@ 0x70
 8002244:	e021      	b.n	800228a <HAL_RCC_OscConfig+0x4e6>
 8002246:	bf00      	nop
 8002248:	58024400 	.word	0x58024400
 800224c:	58024800 	.word	0x58024800
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b05      	cmp	r3, #5
 8002256:	d10c      	bne.n	8002272 <HAL_RCC_OscConfig+0x4ce>
 8002258:	4b83      	ldr	r3, [pc, #524]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225c:	4a82      	ldr	r2, [pc, #520]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	6713      	str	r3, [r2, #112]	@ 0x70
 8002264:	4b80      	ldr	r3, [pc, #512]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002268:	4a7f      	ldr	r2, [pc, #508]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002270:	e00b      	b.n	800228a <HAL_RCC_OscConfig+0x4e6>
 8002272:	4b7d      	ldr	r3, [pc, #500]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002276:	4a7c      	ldr	r2, [pc, #496]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	@ 0x70
 800227e:	4b7a      	ldr	r3, [pc, #488]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002282:	4a79      	ldr	r2, [pc, #484]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d015      	beq.n	80022be <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe fb99 	bl	80009c8 <HAL_GetTick>
 8002296:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f7fe fb95 	bl	80009c8 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e14b      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ee      	beq.n	800229a <HAL_RCC_OscConfig+0x4f6>
 80022bc:	e014      	b.n	80022e8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7fe fb83 	bl	80009c8 <HAL_GetTick>
 80022c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fb7f 	bl	80009c8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e135      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022dc:	4b62      	ldr	r3, [pc, #392]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 812a 	beq.w	8002546 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022fa:	2b18      	cmp	r3, #24
 80022fc:	f000 80ba 	beq.w	8002474 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	2b02      	cmp	r3, #2
 8002306:	f040 8095 	bne.w	8002434 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b57      	ldr	r3, [pc, #348]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a56      	ldr	r2, [pc, #344]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002310:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe fb57 	bl	80009c8 <HAL_GetTick>
 800231a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe fb53 	bl	80009c8 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e10b      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002330:	4b4d      	ldr	r3, [pc, #308]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b4a      	ldr	r3, [pc, #296]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800233e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002340:	4b4a      	ldr	r3, [pc, #296]	@ (800246c <HAL_RCC_OscConfig+0x6c8>)
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	430a      	orrs	r2, r1
 8002350:	4945      	ldr	r1, [pc, #276]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	628b      	str	r3, [r1, #40]	@ 0x28
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	3b01      	subs	r3, #1
 800235c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002364:	3b01      	subs	r3, #1
 8002366:	025b      	lsls	r3, r3, #9
 8002368:	b29b      	uxth	r3, r3
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002370:	3b01      	subs	r3, #1
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237e:	3b01      	subs	r3, #1
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002386:	4938      	ldr	r1, [pc, #224]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800238c:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	4a35      	ldr	r2, [pc, #212]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002398:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800239a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800239c:	4b34      	ldr	r3, [pc, #208]	@ (8002470 <HAL_RCC_OscConfig+0x6cc>)
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	4930      	ldr	r1, [pc, #192]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	f023 020c 	bic.w	r2, r3, #12
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	492b      	ldr	r1, [pc, #172]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023be:	4b2a      	ldr	r3, [pc, #168]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f023 0202 	bic.w	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4927      	ldr	r1, [pc, #156]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	4a24      	ldr	r2, [pc, #144]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023dc:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e0:	4a21      	ldr	r2, [pc, #132]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800240a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fadc 	bl	80009c8 <HAL_GetTick>
 8002410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002414:	f7fe fad8 	bl	80009c8 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e090      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x670>
 8002432:	e088      	b.n	8002546 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0b      	ldr	r2, [pc, #44]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800243a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800243e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fac2 	bl	80009c8 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fabe 	bl	80009c8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e076      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800245a:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_RCC_OscConfig+0x6c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x6a4>
 8002466:	e06e      	b.n	8002546 <HAL_RCC_OscConfig+0x7a2>
 8002468:	58024400 	.word	0x58024400
 800246c:	fffffc0c 	.word	0xfffffc0c
 8002470:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002474:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800247a:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	2b01      	cmp	r3, #1
 8002486:	d031      	beq.n	80024ec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f003 0203 	and.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d12a      	bne.n	80024ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d122      	bne.n	80024ec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d11a      	bne.n	80024ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	0a5b      	lsrs	r3, r3, #9
 80024ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d111      	bne.n	80024ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	0c1b      	lsrs	r3, r3, #16
 80024cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d108      	bne.n	80024ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	0e1b      	lsrs	r3, r3, #24
 80024de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e02b      	b.n	8002548 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80024f0:	4b17      	ldr	r3, [pc, #92]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 80024f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f4:	08db      	lsrs	r3, r3, #3
 80024f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	429a      	cmp	r2, r3
 8002504:	d01f      	beq.n	8002546 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002506:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	4a11      	ldr	r2, [pc, #68]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002512:	f7fe fa59 	bl	80009c8 <HAL_GetTick>
 8002516:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002518:	bf00      	nop
 800251a:	f7fe fa55 	bl	80009c8 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	4293      	cmp	r3, r2
 8002524:	d0f9      	beq.n	800251a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 8002528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002532:	00d2      	lsls	r2, r2, #3
 8002534:	4906      	ldr	r1, [pc, #24]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 8002536:	4313      	orrs	r3, r2
 8002538:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 800253c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253e:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <HAL_RCC_OscConfig+0x7ac>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3730      	adds	r7, #48	@ 0x30
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	58024400 	.word	0x58024400
 8002554:	ffff0007 	.word	0xffff0007

08002558 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e19c      	b.n	80028a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800256c:	4b8a      	ldr	r3, [pc, #552]	@ (8002798 <HAL_RCC_ClockConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d910      	bls.n	800259c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b87      	ldr	r3, [pc, #540]	@ (8002798 <HAL_RCC_ClockConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 020f 	bic.w	r2, r3, #15
 8002582:	4985      	ldr	r1, [pc, #532]	@ (8002798 <HAL_RCC_ClockConfig+0x240>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b83      	ldr	r3, [pc, #524]	@ (8002798 <HAL_RCC_ClockConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e184      	b.n	80028a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d010      	beq.n	80025ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	4b7b      	ldr	r3, [pc, #492]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d908      	bls.n	80025ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025b8:	4b78      	ldr	r3, [pc, #480]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	4975      	ldr	r1, [pc, #468]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	4b70      	ldr	r3, [pc, #448]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d908      	bls.n	80025f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025e6:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	496a      	ldr	r1, [pc, #424]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	2b00      	cmp	r3, #0
 8002602:	d010      	beq.n	8002626 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699a      	ldr	r2, [r3, #24]
 8002608:	4b64      	ldr	r3, [pc, #400]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002610:	429a      	cmp	r2, r3
 8002612:	d908      	bls.n	8002626 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002614:	4b61      	ldr	r3, [pc, #388]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	495e      	ldr	r1, [pc, #376]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002622:	4313      	orrs	r3, r2
 8002624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b00      	cmp	r3, #0
 8002630:	d010      	beq.n	8002654 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	4b59      	ldr	r3, [pc, #356]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800263e:	429a      	cmp	r2, r3
 8002640:	d908      	bls.n	8002654 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002642:	4b56      	ldr	r3, [pc, #344]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4953      	ldr	r1, [pc, #332]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002650:	4313      	orrs	r3, r2
 8002652:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d010      	beq.n	8002682 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	4b4d      	ldr	r3, [pc, #308]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	429a      	cmp	r2, r3
 800266e:	d908      	bls.n	8002682 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b4a      	ldr	r3, [pc, #296]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f023 020f 	bic.w	r2, r3, #15
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4947      	ldr	r1, [pc, #284]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 800267e:	4313      	orrs	r3, r2
 8002680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d055      	beq.n	800273a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800268e:	4b43      	ldr	r3, [pc, #268]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4940      	ldr	r1, [pc, #256]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 800269c:	4313      	orrs	r3, r2
 800269e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026a8:	4b3c      	ldr	r3, [pc, #240]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d121      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0f6      	b.n	80028a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026c0:	4b36      	ldr	r3, [pc, #216]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d115      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0ea      	b.n	80028a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d8:	4b30      	ldr	r3, [pc, #192]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0de      	b.n	80028a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e8:	4b2c      	ldr	r3, [pc, #176]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0d6      	b.n	80028a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f023 0207 	bic.w	r2, r3, #7
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4925      	ldr	r1, [pc, #148]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002706:	4313      	orrs	r3, r2
 8002708:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270a:	f7fe f95d 	bl	80009c8 <HAL_GetTick>
 800270e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002710:	e00a      	b.n	8002728 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002712:	f7fe f959 	bl	80009c8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0be      	b.n	80028a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002728:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	429a      	cmp	r2, r3
 8002738:	d1eb      	bne.n	8002712 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	429a      	cmp	r2, r3
 8002754:	d208      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f023 020f 	bic.w	r2, r3, #15
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	490e      	ldr	r1, [pc, #56]	@ (800279c <HAL_RCC_ClockConfig+0x244>)
 8002764:	4313      	orrs	r3, r2
 8002766:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_ClockConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d214      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <HAL_RCC_ClockConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 020f 	bic.w	r2, r3, #15
 800277e:	4906      	ldr	r1, [pc, #24]	@ (8002798 <HAL_RCC_ClockConfig+0x240>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <HAL_RCC_ClockConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e086      	b.n	80028a6 <HAL_RCC_ClockConfig+0x34e>
 8002798:	52002000 	.word	0x52002000
 800279c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	4b3f      	ldr	r3, [pc, #252]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d208      	bcs.n	80027ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027bc:	4b3c      	ldr	r3, [pc, #240]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4939      	ldr	r1, [pc, #228]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d010      	beq.n	80027fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d208      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ea:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	492e      	ldr	r1, [pc, #184]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	d010      	beq.n	800282a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	4b28      	ldr	r3, [pc, #160]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002814:	429a      	cmp	r2, r3
 8002816:	d208      	bcs.n	800282a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002818:	4b25      	ldr	r3, [pc, #148]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4922      	ldr	r1, [pc, #136]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 8002826:	4313      	orrs	r3, r2
 8002828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d010      	beq.n	8002858 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002842:	429a      	cmp	r2, r3
 8002844:	d208      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002846:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4917      	ldr	r1, [pc, #92]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 8002854:	4313      	orrs	r3, r2
 8002856:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002858:	f000 f834 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4912      	ldr	r1, [pc, #72]	@ (80028b4 <HAL_RCC_ClockConfig+0x35c>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002876:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <HAL_RCC_ClockConfig+0x358>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	4a0d      	ldr	r2, [pc, #52]	@ (80028b4 <HAL_RCC_ClockConfig+0x35c>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <HAL_RCC_ClockConfig+0x360>)
 800288e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002890:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <HAL_RCC_ClockConfig+0x364>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_RCC_ClockConfig+0x368>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f84a 	bl	8000934 <HAL_InitTick>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	58024400 	.word	0x58024400
 80028b4:	08004298 	.word	0x08004298
 80028b8:	24000004 	.word	0x24000004
 80028bc:	24000000 	.word	0x24000000
 80028c0:	24000008 	.word	0x24000008

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	@ 0x24
 80028c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ca:	4bb3      	ldr	r3, [pc, #716]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028d2:	2b18      	cmp	r3, #24
 80028d4:	f200 8155 	bhi.w	8002b82 <HAL_RCC_GetSysClockFreq+0x2be>
 80028d8:	a201      	add	r2, pc, #4	@ (adr r2, 80028e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	08002945 	.word	0x08002945
 80028e4:	08002b83 	.word	0x08002b83
 80028e8:	08002b83 	.word	0x08002b83
 80028ec:	08002b83 	.word	0x08002b83
 80028f0:	08002b83 	.word	0x08002b83
 80028f4:	08002b83 	.word	0x08002b83
 80028f8:	08002b83 	.word	0x08002b83
 80028fc:	08002b83 	.word	0x08002b83
 8002900:	0800296b 	.word	0x0800296b
 8002904:	08002b83 	.word	0x08002b83
 8002908:	08002b83 	.word	0x08002b83
 800290c:	08002b83 	.word	0x08002b83
 8002910:	08002b83 	.word	0x08002b83
 8002914:	08002b83 	.word	0x08002b83
 8002918:	08002b83 	.word	0x08002b83
 800291c:	08002b83 	.word	0x08002b83
 8002920:	08002971 	.word	0x08002971
 8002924:	08002b83 	.word	0x08002b83
 8002928:	08002b83 	.word	0x08002b83
 800292c:	08002b83 	.word	0x08002b83
 8002930:	08002b83 	.word	0x08002b83
 8002934:	08002b83 	.word	0x08002b83
 8002938:	08002b83 	.word	0x08002b83
 800293c:	08002b83 	.word	0x08002b83
 8002940:	08002977 	.word	0x08002977
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002944:	4b94      	ldr	r3, [pc, #592]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002950:	4b91      	ldr	r3, [pc, #580]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	4a90      	ldr	r2, [pc, #576]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002962:	e111      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002964:	4b8d      	ldr	r3, [pc, #564]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002966:	61bb      	str	r3, [r7, #24]
      break;
 8002968:	e10e      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800296a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800296c:	61bb      	str	r3, [r7, #24]
      break;
 800296e:	e10b      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002970:	4b8c      	ldr	r3, [pc, #560]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002972:	61bb      	str	r3, [r7, #24]
      break;
 8002974:	e108      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002976:	4b88      	ldr	r3, [pc, #544]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002980:	4b85      	ldr	r3, [pc, #532]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800298a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800298c:	4b82      	ldr	r3, [pc, #520]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002996:	4b80      	ldr	r3, [pc, #512]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299a:	08db      	lsrs	r3, r3, #3
 800299c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80e1 	beq.w	8002b7c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	f000 8083 	beq.w	8002ac8 <HAL_RCC_GetSysClockFreq+0x204>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	f200 80a1 	bhi.w	8002b0c <HAL_RCC_GetSysClockFreq+0x248>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x114>
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d056      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029d6:	e099      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02d      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	4a6b      	ldr	r2, [pc, #428]	@ (8002b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
 80029f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0e:	4b62      	ldr	r3, [pc, #392]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a22:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a3e:	e087      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bac <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a52:	4b51      	ldr	r3, [pc, #324]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a66:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a82:	e065      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a96:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aaa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ac6:	e043      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ada:	4b2f      	ldr	r3, [pc, #188]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b0a:	e021      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b16:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b32:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b4e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	0a5b      	lsrs	r3, r3, #9
 8002b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b74:	ee17 3a90 	vmov	r3, s15
 8002b78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b7a:	e005      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
      break;
 8002b80:	e002      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b82:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b84:	61bb      	str	r3, [r7, #24]
      break;
 8002b86:	bf00      	nop
  }

  return sysclockfreq;
 8002b88:	69bb      	ldr	r3, [r7, #24]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	@ 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	58024400 	.word	0x58024400
 8002b9c:	03d09000 	.word	0x03d09000
 8002ba0:	003d0900 	.word	0x003d0900
 8002ba4:	017d7840 	.word	0x017d7840
 8002ba8:	46000000 	.word	0x46000000
 8002bac:	4c742400 	.word	0x4c742400
 8002bb0:	4a742400 	.word	0x4a742400
 8002bb4:	4bbebc20 	.word	0x4bbebc20

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bbc:	b0c6      	sub	sp, #280	@ 0x118
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002bdc:	2500      	movs	r5, #0
 8002bde:	ea54 0305 	orrs.w	r3, r4, r5
 8002be2:	d049      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bee:	d02f      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002bf0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002bf4:	d828      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bfa:	d01a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002bfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c00:	d822      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c0a:	d007      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c0e:	4bab      	ldr	r3, [pc, #684]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	4aaa      	ldr	r2, [pc, #680]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c1a:	e01a      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c20:	3308      	adds	r3, #8
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 f967 	bl	8003ef8 <RCCEx_PLL2_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c30:	e00f      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c36:	3328      	adds	r3, #40	@ 0x28
 8002c38:	2102      	movs	r1, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fa0e 	bl	800405c <RCCEx_PLL3_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c46:	e004      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002c4e:	e000      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c5a:	4b98      	ldr	r3, [pc, #608]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c68:	4a94      	ldr	r2, [pc, #592]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c6e:	e003      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002c74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002c84:	f04f 0900 	mov.w	r9, #0
 8002c88:	ea58 0309 	orrs.w	r3, r8, r9
 8002c8c:	d047      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d82a      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c98:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb5 	.word	0x08002cb5
 8002ca4:	08002cc3 	.word	0x08002cc3
 8002ca8:	08002cd9 	.word	0x08002cd9
 8002cac:	08002cf7 	.word	0x08002cf7
 8002cb0:	08002cf7 	.word	0x08002cf7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb4:	4b81      	ldr	r3, [pc, #516]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	4a80      	ldr	r2, [pc, #512]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cc0:	e01a      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f914 	bl	8003ef8 <RCCEx_PLL2_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cd6:	e00f      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cdc:	3328      	adds	r3, #40	@ 0x28
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 f9bb 	bl	800405c <RCCEx_PLL3_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cec:	e004      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d00:	4b6e      	ldr	r3, [pc, #440]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d04:	f023 0107 	bic.w	r1, r3, #7
 8002d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0e:	4a6b      	ldr	r2, [pc, #428]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002d1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002d2a:	f04f 0b00 	mov.w	fp, #0
 8002d2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d32:	d05b      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d3c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002d40:	d03b      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002d42:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002d46:	d834      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d4c:	d037      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002d4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d52:	d82e      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d58:	d033      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002d5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d5e:	d828      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d64:	d01a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002d66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d6a:	d822      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002d70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d74:	d007      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002d76:	e01c      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d78:	4b50      	ldr	r3, [pc, #320]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d84:	e01e      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 f8b2 	bl	8003ef8 <RCCEx_PLL2_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d9a:	e013      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002da0:	3328      	adds	r3, #40	@ 0x28
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 f959 	bl	800405c <RCCEx_PLL3_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002db0:	e008      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002db8:	e004      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002dba:	bf00      	nop
 8002dbc:	e002      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ddc:	4a37      	ldr	r2, [pc, #220]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de2:	e003      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002e02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002e06:	460b      	mov	r3, r1
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	d05d      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e14:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002e18:	d03b      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002e1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002e1e:	d834      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e24:	d037      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002e26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e2a:	d82e      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e30:	d033      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002e32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e36:	d828      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e3c:	d01a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002e3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e42:	d822      	bhi.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e4c:	d007      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002e4e:	e01c      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e50:	4b1a      	ldr	r3, [pc, #104]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	4a19      	ldr	r2, [pc, #100]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e5c:	e01e      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e62:	3308      	adds	r3, #8
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 f846 	bl	8003ef8 <RCCEx_PLL2_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e72:	e013      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e78:	3328      	adds	r3, #40	@ 0x28
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f001 f8ed 	bl	800405c <RCCEx_PLL3_Config>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e88:	e008      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002e90:	e004      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002e92:	bf00      	nop
 8002e94:	e002      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002e96:	bf00      	nop
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002eb4:	4a01      	ldr	r2, [pc, #4]	@ (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eba:	e005      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ec4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002ed4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002ede:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	d03a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eee:	2b30      	cmp	r3, #48	@ 0x30
 8002ef0:	d01f      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8002ef2:	2b30      	cmp	r3, #48	@ 0x30
 8002ef4:	d819      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d00c      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d815      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d111      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f06:	4baa      	ldr	r3, [pc, #680]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	4aa9      	ldr	r2, [pc, #676]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f12:	e011      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f18:	3308      	adds	r3, #8
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 ffeb 	bl	8003ef8 <RCCEx_PLL2_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f28:	e006      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f30:	e002      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f40:	4b9b      	ldr	r3, [pc, #620]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	4a98      	ldr	r2, [pc, #608]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f50:	430b      	orrs	r3, r1
 8002f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f54:	e003      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002f74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	d051      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f88:	d035      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002f8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f8e:	d82e      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002f90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f94:	d031      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8002f96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f9a:	d828      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002f9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa0:	d01a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa6:	d822      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb0:	d007      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002fb2:	e01c      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	4a7d      	ldr	r2, [pc, #500]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fc0:	e01c      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 ff94 	bl	8003ef8 <RCCEx_PLL2_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fd6:	e011      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fdc:	3328      	adds	r3, #40	@ 0x28
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f83b 	bl	800405c <RCCEx_PLL3_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fec:	e006      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ff4:	e002      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003004:	4b6a      	ldr	r3, [pc, #424]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003008:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800300c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	4a67      	ldr	r2, [pc, #412]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003014:	430b      	orrs	r3, r1
 8003016:	6513      	str	r3, [r2, #80]	@ 0x50
 8003018:	e003      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800301e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800302e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003032:	2300      	movs	r3, #0
 8003034:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003038:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800303c:	460b      	mov	r3, r1
 800303e:	4313      	orrs	r3, r2
 8003040:	d053      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800304c:	d033      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800304e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003052:	d82c      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003054:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003058:	d02f      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x502>
 800305a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800305e:	d826      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003060:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003064:	d02b      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003066:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800306a:	d820      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800306c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003070:	d012      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003076:	d81a      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d022      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003080:	d115      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003086:	3308      	adds	r3, #8
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f000 ff34 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003096:	e015      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800309c:	3328      	adds	r3, #40	@ 0x28
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 ffdb 	bl	800405c <RCCEx_PLL3_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030ac:	e00a      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030b4:	e006      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80030b6:	bf00      	nop
 80030b8:	e004      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80030ba:	bf00      	nop
 80030bc:	e002      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80030be:	bf00      	nop
 80030c0:	e000      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80030c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10a      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030cc:	4b38      	ldr	r3, [pc, #224]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80030d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030da:	4a35      	ldr	r2, [pc, #212]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030dc:	430b      	orrs	r3, r1
 80030de:	6513      	str	r3, [r2, #80]	@ 0x50
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80030f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003100:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003104:	460b      	mov	r3, r1
 8003106:	4313      	orrs	r3, r2
 8003108:	d058      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800310a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800310e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003116:	d033      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003118:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800311c:	d82c      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003122:	d02f      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003128:	d826      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800312a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800312e:	d02b      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003130:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003134:	d820      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800313a:	d012      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800313c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003140:	d81a      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d022      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003146:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800314a:	d115      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800314c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003150:	3308      	adds	r3, #8
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fecf 	bl	8003ef8 <RCCEx_PLL2_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003160:	e015      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003166:	3328      	adds	r3, #40	@ 0x28
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f000 ff76 	bl	800405c <RCCEx_PLL3_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003176:	e00a      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800317e:	e006      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003180:	bf00      	nop
 8003182:	e004      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003184:	bf00      	nop
 8003186:	e002      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800318c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10e      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800319e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80031a6:	4a02      	ldr	r2, [pc, #8]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80031ae:	bf00      	nop
 80031b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80031c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80031d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4313      	orrs	r3, r2
 80031da:	d037      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80031dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031e6:	d00e      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80031e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ec:	d816      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d018      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80031f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031f6:	d111      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f8:	4bc4      	ldr	r3, [pc, #784]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	4ac3      	ldr	r2, [pc, #780]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003204:	e00f      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800320a:	3308      	adds	r3, #8
 800320c:	2101      	movs	r1, #1
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fe72 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800321a:	e004      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003222:	e000      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003226:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800322e:	4bb7      	ldr	r3, [pc, #732]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003232:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800323c:	4ab3      	ldr	r2, [pc, #716]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800323e:	430b      	orrs	r3, r1
 8003240:	6513      	str	r3, [r2, #80]	@ 0x50
 8003242:	e003      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003248:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800324c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003258:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003262:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003266:	460b      	mov	r3, r1
 8003268:	4313      	orrs	r3, r2
 800326a:	d039      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800326c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003272:	2b03      	cmp	r3, #3
 8003274:	d81c      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003276:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	080032b9 	.word	0x080032b9
 8003280:	0800328d 	.word	0x0800328d
 8003284:	0800329b 	.word	0x0800329b
 8003288:	080032b9 	.word	0x080032b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328c:	4b9f      	ldr	r3, [pc, #636]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	4a9e      	ldr	r2, [pc, #632]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003298:	e00f      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800329a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329e:	3308      	adds	r3, #8
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fe28 	bl	8003ef8 <RCCEx_PLL2_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80032ae:	e004      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80032b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032c2:	4b92      	ldr	r3, [pc, #584]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c6:	f023 0103 	bic.w	r1, r3, #3
 80032ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032d0:	4a8e      	ldr	r2, [pc, #568]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032d2:	430b      	orrs	r3, r1
 80032d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032d6:	e003      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80032ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f000 8099 	beq.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003302:	4b83      	ldr	r3, [pc, #524]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a82      	ldr	r2, [pc, #520]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800330e:	f7fd fb5b 	bl	80009c8 <HAL_GetTick>
 8003312:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003316:	e00b      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003318:	f7fd fb56 	bl	80009c8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b64      	cmp	r3, #100	@ 0x64
 8003326:	d903      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800332e:	e005      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003330:	4b77      	ldr	r3, [pc, #476]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ed      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800333c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003340:	2b00      	cmp	r3, #0
 8003342:	d173      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003344:	4b71      	ldr	r3, [pc, #452]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003346:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800334c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003350:	4053      	eors	r3, r2
 8003352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d015      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800335a:	4b6c      	ldr	r3, [pc, #432]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003362:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003366:	4b69      	ldr	r3, [pc, #420]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	4a68      	ldr	r2, [pc, #416]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003370:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003372:	4b66      	ldr	r3, [pc, #408]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003376:	4a65      	ldr	r2, [pc, #404]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800337e:	4a63      	ldr	r2, [pc, #396]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003384:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800338e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003392:	d118      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd fb18 	bl	80009c8 <HAL_GetTick>
 8003398:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800339c:	e00d      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339e:	f7fd fb13 	bl	80009c8 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80033a8:	1ad2      	subs	r2, r2, r3
 80033aa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d903      	bls.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80033b8:	e005      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ba:	4b54      	ldr	r3, [pc, #336]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0eb      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80033c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d129      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033de:	d10e      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 80033e0:	4b4a      	ldr	r3, [pc, #296]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80033e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033f0:	091a      	lsrs	r2, r3, #4
 80033f2:	4b48      	ldr	r3, [pc, #288]	@ (8003514 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	4a45      	ldr	r2, [pc, #276]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6113      	str	r3, [r2, #16]
 80033fc:	e005      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x852>
 80033fe:	4b43      	ldr	r3, [pc, #268]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	4a42      	ldr	r2, [pc, #264]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003404:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003408:	6113      	str	r3, [r2, #16]
 800340a:	4b40      	ldr	r3, [pc, #256]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800340c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003412:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341a:	4a3c      	ldr	r2, [pc, #240]	@ (800350c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800341c:	430b      	orrs	r3, r1
 800341e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003420:	e008      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003426:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800342a:	e003      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003430:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f002 0301 	and.w	r3, r2, #1
 8003440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800344a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800344e:	460b      	mov	r3, r1
 8003450:	4313      	orrs	r3, r2
 8003452:	f000 808f 	beq.w	8003574 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800345a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345c:	2b28      	cmp	r3, #40	@ 0x28
 800345e:	d871      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003460:	a201      	add	r2, pc, #4	@ (adr r2, 8003468 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	0800354d 	.word	0x0800354d
 800346c:	08003545 	.word	0x08003545
 8003470:	08003545 	.word	0x08003545
 8003474:	08003545 	.word	0x08003545
 8003478:	08003545 	.word	0x08003545
 800347c:	08003545 	.word	0x08003545
 8003480:	08003545 	.word	0x08003545
 8003484:	08003545 	.word	0x08003545
 8003488:	08003519 	.word	0x08003519
 800348c:	08003545 	.word	0x08003545
 8003490:	08003545 	.word	0x08003545
 8003494:	08003545 	.word	0x08003545
 8003498:	08003545 	.word	0x08003545
 800349c:	08003545 	.word	0x08003545
 80034a0:	08003545 	.word	0x08003545
 80034a4:	08003545 	.word	0x08003545
 80034a8:	0800352f 	.word	0x0800352f
 80034ac:	08003545 	.word	0x08003545
 80034b0:	08003545 	.word	0x08003545
 80034b4:	08003545 	.word	0x08003545
 80034b8:	08003545 	.word	0x08003545
 80034bc:	08003545 	.word	0x08003545
 80034c0:	08003545 	.word	0x08003545
 80034c4:	08003545 	.word	0x08003545
 80034c8:	0800354d 	.word	0x0800354d
 80034cc:	08003545 	.word	0x08003545
 80034d0:	08003545 	.word	0x08003545
 80034d4:	08003545 	.word	0x08003545
 80034d8:	08003545 	.word	0x08003545
 80034dc:	08003545 	.word	0x08003545
 80034e0:	08003545 	.word	0x08003545
 80034e4:	08003545 	.word	0x08003545
 80034e8:	0800354d 	.word	0x0800354d
 80034ec:	08003545 	.word	0x08003545
 80034f0:	08003545 	.word	0x08003545
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003545 	.word	0x08003545
 80034fc:	08003545 	.word	0x08003545
 8003500:	08003545 	.word	0x08003545
 8003504:	08003545 	.word	0x08003545
 8003508:	0800354d 	.word	0x0800354d
 800350c:	58024400 	.word	0x58024400
 8003510:	58024800 	.word	0x58024800
 8003514:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800351c:	3308      	adds	r3, #8
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fce9 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800352c:	e00f      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800352e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003532:	3328      	adds	r3, #40	@ 0x28
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fd90 	bl	800405c <RCCEx_PLL3_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003542:	e004      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800354c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800354e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003556:	4bbf      	ldr	r3, [pc, #764]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800355e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003564:	4abb      	ldr	r2, [pc, #748]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003566:	430b      	orrs	r3, r1
 8003568:	6553      	str	r3, [r2, #84]	@ 0x54
 800356a:	e003      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f002 0302 	and.w	r3, r2, #2
 8003580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003584:	2300      	movs	r3, #0
 8003586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800358a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800358e:	460b      	mov	r3, r1
 8003590:	4313      	orrs	r3, r2
 8003592:	d041      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359a:	2b05      	cmp	r3, #5
 800359c:	d824      	bhi.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800359e:	a201      	add	r2, pc, #4	@ (adr r2, 80035a4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	080035f1 	.word	0x080035f1
 80035a8:	080035bd 	.word	0x080035bd
 80035ac:	080035d3 	.word	0x080035d3
 80035b0:	080035f1 	.word	0x080035f1
 80035b4:	080035f1 	.word	0x080035f1
 80035b8:	080035f1 	.word	0x080035f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c0:	3308      	adds	r3, #8
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fc97 	bl	8003ef8 <RCCEx_PLL2_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035d0:	e00f      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d6:	3328      	adds	r3, #40	@ 0x28
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fd3e 	bl	800405c <RCCEx_PLL3_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035fa:	4b96      	ldr	r3, [pc, #600]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80035fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fe:	f023 0107 	bic.w	r1, r3, #7
 8003602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003608:	4a92      	ldr	r2, [pc, #584]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800360a:	430b      	orrs	r3, r1
 800360c:	6553      	str	r3, [r2, #84]	@ 0x54
 800360e:	e003      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f002 0304 	and.w	r3, r2, #4
 8003624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800362e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003632:	460b      	mov	r3, r1
 8003634:	4313      	orrs	r3, r2
 8003636:	d044      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003640:	2b05      	cmp	r3, #5
 8003642:	d825      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003644:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003699 	.word	0x08003699
 8003650:	08003665 	.word	0x08003665
 8003654:	0800367b 	.word	0x0800367b
 8003658:	08003699 	.word	0x08003699
 800365c:	08003699 	.word	0x08003699
 8003660:	08003699 	.word	0x08003699
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003668:	3308      	adds	r3, #8
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fc43 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003678:	e00f      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800367a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367e:	3328      	adds	r3, #40	@ 0x28
 8003680:	2101      	movs	r1, #1
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fcea 	bl	800405c <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800368e:	e004      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	f023 0107 	bic.w	r1, r3, #7
 80036aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	4a68      	ldr	r2, [pc, #416]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b8:	e003      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f002 0320 	and.w	r3, r2, #32
 80036ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036d2:	2300      	movs	r3, #0
 80036d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80036d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80036dc:	460b      	mov	r3, r1
 80036de:	4313      	orrs	r3, r2
 80036e0:	d055      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80036e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ee:	d033      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f4:	d82c      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fa:	d02f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003700:	d826      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003702:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003706:	d02b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003708:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800370c:	d820      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800370e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003712:	d012      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003718:	d81a      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d022      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800371e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003722:	d115      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003728:	3308      	adds	r3, #8
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fbe3 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003738:	e015      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800373a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373e:	3328      	adds	r3, #40	@ 0x28
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fc8a 	bl	800405c <RCCEx_PLL3_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800374e:	e00a      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003756:	e006      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003758:	bf00      	nop
 800375a:	e004      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800375c:	bf00      	nop
 800375e:	e002      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003766:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10b      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376e:	4b39      	ldr	r3, [pc, #228]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003772:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800377e:	4a35      	ldr	r2, [pc, #212]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003780:	430b      	orrs	r3, r1
 8003782:	6553      	str	r3, [r2, #84]	@ 0x54
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800378a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800378e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800379a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80037a8:	460b      	mov	r3, r1
 80037aa:	4313      	orrs	r3, r2
 80037ac:	d058      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80037ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80037ba:	d033      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80037bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80037c0:	d82c      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c6:	d02f      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037cc:	d826      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80037ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037d2:	d02b      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80037d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037d8:	d820      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80037da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037de:	d012      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80037e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037e4:	d81a      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d022      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ee:	d115      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f4:	3308      	adds	r3, #8
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fb7d 	bl	8003ef8 <RCCEx_PLL2_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003804:	e015      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800380a:	3328      	adds	r3, #40	@ 0x28
 800380c:	2102      	movs	r1, #2
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fc24 	bl	800405c <RCCEx_PLL3_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800381a:	e00a      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003822:	e006      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003824:	bf00      	nop
 8003826:	e004      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003828:	bf00      	nop
 800382a:	e002      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003832:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10e      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800383a:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800384a:	4a02      	ldr	r2, [pc, #8]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800384c:	430b      	orrs	r3, r1
 800384e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003850:	e006      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003852:	bf00      	nop
 8003854:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800385c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800386c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003876:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800387a:	460b      	mov	r3, r1
 800387c:	4313      	orrs	r3, r2
 800387e:	d055      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003884:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003888:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800388c:	d033      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800388e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003892:	d82c      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003898:	d02f      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800389a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800389e:	d826      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80038a4:	d02b      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80038a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80038aa:	d820      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038b0:	d012      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80038b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038b6:	d81a      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d022      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80038bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c0:	d115      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c6:	3308      	adds	r3, #8
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fb14 	bl	8003ef8 <RCCEx_PLL2_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038d6:	e015      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038dc:	3328      	adds	r3, #40	@ 0x28
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fbbb 	bl	800405c <RCCEx_PLL3_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038ec:	e00a      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80038f6:	bf00      	nop
 80038f8:	e004      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80038fa:	bf00      	nop
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800390c:	4ba0      	ldr	r3, [pc, #640]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003910:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003918:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800391c:	4a9c      	ldr	r2, [pc, #624]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800391e:	430b      	orrs	r3, r1
 8003920:	6593      	str	r3, [r2, #88]	@ 0x58
 8003922:	e003      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003928:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800392c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f002 0308 	and.w	r3, r2, #8
 8003938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003942:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003946:	460b      	mov	r3, r1
 8003948:	4313      	orrs	r3, r2
 800394a:	d01e      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003958:	d10c      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800395a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395e:	3328      	adds	r3, #40	@ 0x28
 8003960:	2102      	movs	r1, #2
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fb7a 	bl	800405c <RCCEx_PLL3_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003974:	4b86      	ldr	r3, [pc, #536]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003984:	4a82      	ldr	r2, [pc, #520]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003986:	430b      	orrs	r3, r1
 8003988:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f002 0310 	and.w	r3, r2, #16
 8003996:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039a0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d01e      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80039aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039b6:	d10c      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039bc:	3328      	adds	r3, #40	@ 0x28
 80039be:	2102      	movs	r1, #2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fb4b 	bl	800405c <RCCEx_PLL3_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039f6:	2300      	movs	r3, #0
 80039f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80039fe:	460b      	mov	r3, r1
 8003a00:	4313      	orrs	r3, r2
 8003a02:	d03e      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a10:	d022      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003a12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a16:	d81b      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003a22:	e015      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	3308      	adds	r3, #8
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fa63 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a38:	e00f      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3e:	3328      	adds	r3, #40	@ 0x28
 8003a40:	2102      	movs	r1, #2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fb0a 	bl	800405c <RCCEx_PLL3_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10b      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a62:	4b4b      	ldr	r3, [pc, #300]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a72:	4a47      	ldr	r2, [pc, #284]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a78:	e003      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a90:	2300      	movs	r3, #0
 8003a92:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	d03b      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aaa:	d01f      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003aac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ab0:	d818      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab6:	d003      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003ab8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003abc:	d007      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac0:	4b33      	ldr	r3, [pc, #204]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	4a32      	ldr	r2, [pc, #200]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003acc:	e00f      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad2:	3328      	adds	r3, #40	@ 0x28
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fac0 	bl	800405c <RCCEx_PLL3_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ae2:	e004      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aea:	e000      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003af6:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b06:	4a22      	ldr	r2, [pc, #136]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b0c:	e003      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b24:	2300      	movs	r3, #0
 8003b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b28:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	d034      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b40:	d007      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003b42:	e011      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b44:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	4a11      	ldr	r2, [pc, #68]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b50:	e00e      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b56:	3308      	adds	r3, #8
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f9cc 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b66:	e003      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b78:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b86:	4a02      	ldr	r2, [pc, #8]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8c:	e006      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003b8e:	bf00      	nop
 8003b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003baa:	2300      	movs	r3, #0
 8003bac:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d00c      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bbc:	3328      	adds	r3, #40	@ 0x28
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fa4b 	bl	800405c <RCCEx_PLL3_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003be0:	2300      	movs	r3, #0
 8003be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003be8:	460b      	mov	r3, r1
 8003bea:	4313      	orrs	r3, r2
 8003bec:	d036      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf8:	d018      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bfe:	d811      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c04:	d014      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0a:	d80b      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d011      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c14:	d106      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c16:	4bb7      	ldr	r3, [pc, #732]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1a:	4ab6      	ldr	r2, [pc, #728]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c22:	e008      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c2a:	e004      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c3e:	4bad      	ldr	r3, [pc, #692]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c4c:	4aa9      	ldr	r2, [pc, #676]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c68:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c78:	4b9e      	ldr	r3, [pc, #632]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	4a9b      	ldr	r2, [pc, #620]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003c98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ca8:	4b92      	ldr	r3, [pc, #584]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cb6:	4a8f      	ldr	r2, [pc, #572]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cca:	2300      	movs	r3, #0
 8003ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cd8:	4b86      	ldr	r3, [pc, #536]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	4a85      	ldr	r2, [pc, #532]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ce2:	6113      	str	r3, [r2, #16]
 8003ce4:	4b83      	ldr	r3, [pc, #524]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ce6:	6919      	ldr	r1, [r3, #16]
 8003ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cf0:	4a80      	ldr	r2, [pc, #512]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d04:	2300      	movs	r3, #0
 8003d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d12:	4b78      	ldr	r3, [pc, #480]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	4a74      	ldr	r2, [pc, #464]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d34:	2300      	movs	r3, #0
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d42:	4b6c      	ldr	r3, [pc, #432]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d52:	4a68      	ldr	r2, [pc, #416]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	2100      	movs	r1, #0
 8003d62:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	d011      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d78:	3308      	adds	r3, #8
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f8bb 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003d88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	2100      	movs	r1, #0
 8003da2:	6239      	str	r1, [r7, #32]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003daa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d011      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db8:	3308      	adds	r3, #8
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f89b 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	2100      	movs	r1, #0
 8003de2:	61b9      	str	r1, [r7, #24]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d011      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df8:	3308      	adds	r3, #8
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f87b 	bl	8003ef8 <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003e08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	2100      	movs	r1, #0
 8003e22:	6139      	str	r1, [r7, #16]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4313      	orrs	r3, r2
 8003e32:	d011      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e38:	3328      	adds	r3, #40	@ 0x28
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f90d 	bl	800405c <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	2100      	movs	r1, #0
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	d011      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e78:	3328      	adds	r3, #40	@ 0x28
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 f8ed 	bl	800405c <RCCEx_PLL3_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	6039      	str	r1, [r7, #0]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d011      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb8:	3328      	adds	r3, #40	@ 0x28
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f8cd 	bl	800405c <RCCEx_PLL3_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8003ed8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	58024400 	.word	0x58024400

08003ef8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f06:	4b53      	ldr	r3, [pc, #332]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d101      	bne.n	8003f16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e099      	b.n	800404a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f16:	4b4f      	ldr	r3, [pc, #316]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4e      	ldr	r2, [pc, #312]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f22:	f7fc fd51 	bl	80009c8 <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f28:	e008      	b.n	8003f3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f2a:	f7fc fd4d 	bl	80009c8 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e086      	b.n	800404a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f3c:	4b45      	ldr	r3, [pc, #276]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1f0      	bne.n	8003f2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f48:	4b42      	ldr	r3, [pc, #264]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	031b      	lsls	r3, r3, #12
 8003f56:	493f      	ldr	r1, [pc, #252]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	025b      	lsls	r3, r3, #9
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	061b      	lsls	r3, r3, #24
 8003f88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f8c:	4931      	ldr	r1, [pc, #196]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f92:	4b30      	ldr	r3, [pc, #192]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	492d      	ldr	r1, [pc, #180]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	f023 0220 	bic.w	r2, r3, #32
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	4928      	ldr	r1, [pc, #160]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fb6:	4b27      	ldr	r3, [pc, #156]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	4a26      	ldr	r2, [pc, #152]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	f023 0310 	bic.w	r3, r3, #16
 8003fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fc2:	4b24      	ldr	r3, [pc, #144]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc6:	4b24      	ldr	r3, [pc, #144]	@ (8004058 <RCCEx_PLL2_Config+0x160>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	69d2      	ldr	r2, [r2, #28]
 8003fce:	00d2      	lsls	r2, r2, #3
 8003fd0:	4920      	ldr	r1, [pc, #128]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	4a1e      	ldr	r2, [pc, #120]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fdc:	f043 0310 	orr.w	r3, r3, #16
 8003fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d106      	bne.n	8003ff6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4a19      	ldr	r2, [pc, #100]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003fee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ff4:	e00f      	b.n	8004016 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d106      	bne.n	800400a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ffc:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	4a14      	ldr	r2, [pc, #80]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8004002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004006:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004008:	e005      	b.n	8004016 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800400a:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	4a11      	ldr	r2, [pc, #68]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8004010:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004014:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004016:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a0e      	ldr	r2, [pc, #56]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 800401c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004022:	f7fc fcd1 	bl	80009c8 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004028:	e008      	b.n	800403c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800402a:	f7fc fccd 	bl	80009c8 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e006      	b.n	800404a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800403c:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <RCCEx_PLL2_Config+0x15c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	58024400 	.word	0x58024400
 8004058:	ffff0007 	.word	0xffff0007

0800405c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800406a:	4b53      	ldr	r3, [pc, #332]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b03      	cmp	r3, #3
 8004074:	d101      	bne.n	800407a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e099      	b.n	80041ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800407a:	4b4f      	ldr	r3, [pc, #316]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a4e      	ldr	r2, [pc, #312]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004086:	f7fc fc9f 	bl	80009c8 <HAL_GetTick>
 800408a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800408c:	e008      	b.n	80040a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800408e:	f7fc fc9b 	bl	80009c8 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e086      	b.n	80041ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040a0:	4b45      	ldr	r3, [pc, #276]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f0      	bne.n	800408e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040ac:	4b42      	ldr	r3, [pc, #264]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	051b      	lsls	r3, r3, #20
 80040ba:	493f      	ldr	r1, [pc, #252]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	628b      	str	r3, [r1, #40]	@ 0x28
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	025b      	lsls	r3, r3, #9
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	3b01      	subs	r3, #1
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	061b      	lsls	r3, r3, #24
 80040ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040f0:	4931      	ldr	r1, [pc, #196]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040f6:	4b30      	ldr	r3, [pc, #192]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	492d      	ldr	r1, [pc, #180]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004104:	4313      	orrs	r3, r2
 8004106:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004108:	4b2b      	ldr	r3, [pc, #172]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4928      	ldr	r1, [pc, #160]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800411a:	4b27      	ldr	r3, [pc, #156]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	4a26      	ldr	r2, [pc, #152]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004124:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800412a:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <RCCEx_PLL3_Config+0x160>)
 800412c:	4013      	ands	r3, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	69d2      	ldr	r2, [r2, #28]
 8004132:	00d2      	lsls	r2, r2, #3
 8004134:	4920      	ldr	r1, [pc, #128]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800413a:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004144:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800414c:	4b1a      	ldr	r3, [pc, #104]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004152:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004156:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004158:	e00f      	b.n	800417a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d106      	bne.n	800416e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004160:	4b15      	ldr	r3, [pc, #84]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	4a14      	ldr	r2, [pc, #80]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004166:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800416a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800416c:	e005      	b.n	800417a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800416e:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	4a11      	ldr	r2, [pc, #68]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004174:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004178:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800417a:	4b0f      	ldr	r3, [pc, #60]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a0e      	ldr	r2, [pc, #56]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004186:	f7fc fc1f 	bl	80009c8 <HAL_GetTick>
 800418a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800418c:	e008      	b.n	80041a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800418e:	f7fc fc1b 	bl	80009c8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e006      	b.n	80041ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <RCCEx_PLL3_Config+0x15c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	58024400 	.word	0x58024400
 80041bc:	ffff0007 	.word	0xffff0007

080041c0 <memset>:
 80041c0:	4402      	add	r2, r0
 80041c2:	4603      	mov	r3, r0
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d100      	bne.n	80041ca <memset+0xa>
 80041c8:	4770      	bx	lr
 80041ca:	f803 1b01 	strb.w	r1, [r3], #1
 80041ce:	e7f9      	b.n	80041c4 <memset+0x4>

080041d0 <__libc_init_array>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004208 <__libc_init_array+0x38>)
 80041d4:	4c0d      	ldr	r4, [pc, #52]	@ (800420c <__libc_init_array+0x3c>)
 80041d6:	1b64      	subs	r4, r4, r5
 80041d8:	10a4      	asrs	r4, r4, #2
 80041da:	2600      	movs	r6, #0
 80041dc:	42a6      	cmp	r6, r4
 80041de:	d109      	bne.n	80041f4 <__libc_init_array+0x24>
 80041e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004210 <__libc_init_array+0x40>)
 80041e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004214 <__libc_init_array+0x44>)
 80041e4:	f000 f826 	bl	8004234 <_init>
 80041e8:	1b64      	subs	r4, r4, r5
 80041ea:	10a4      	asrs	r4, r4, #2
 80041ec:	2600      	movs	r6, #0
 80041ee:	42a6      	cmp	r6, r4
 80041f0:	d105      	bne.n	80041fe <__libc_init_array+0x2e>
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f8:	4798      	blx	r3
 80041fa:	3601      	adds	r6, #1
 80041fc:	e7ee      	b.n	80041dc <__libc_init_array+0xc>
 80041fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004202:	4798      	blx	r3
 8004204:	3601      	adds	r6, #1
 8004206:	e7f2      	b.n	80041ee <__libc_init_array+0x1e>
 8004208:	080042a8 	.word	0x080042a8
 800420c:	080042a8 	.word	0x080042a8
 8004210:	080042a8 	.word	0x080042a8
 8004214:	080042ac 	.word	0x080042ac

08004218 <memcpy>:
 8004218:	440a      	add	r2, r1
 800421a:	4291      	cmp	r1, r2
 800421c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004220:	d100      	bne.n	8004224 <memcpy+0xc>
 8004222:	4770      	bx	lr
 8004224:	b510      	push	{r4, lr}
 8004226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800422a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800422e:	4291      	cmp	r1, r2
 8004230:	d1f9      	bne.n	8004226 <memcpy+0xe>
 8004232:	bd10      	pop	{r4, pc}

08004234 <_init>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr

08004240 <_fini>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr
