
O1_F407_TestCAN_Nav.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f30  08003f30  00004f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f48  08003f48  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f48  08003f48  00004f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f50  08003f50  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f50  08003f50  00004f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f54  08003f54  00004f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003f58  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          000000d8  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b69b  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268e  00000000  00000000  000106e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  00012d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b9  00000000  00000000  00013808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c0f  00000000  00000000  00013fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c5a5  00000000  00000000  00037bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1a28  00000000  00000000  00044175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115b9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029c4  00000000  00000000  00115be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001185a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f18 	.word	0x08003f18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003f18 	.word	0x08003f18

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000504:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	e00a      	b.n	8000522 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	89fb      	ldrh	r3, [r7, #14]
 8000518:	1a9b      	subs	r3, r3, r2
 800051a:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	3301      	adds	r3, #1
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	3b02      	subs	r3, #2
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbef      	blt.n	800050c <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	321e      	adds	r2, #30
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	4293      	cmp	r3, r2
 8000538:	d109      	bne.n	800054e <iBus_Check_CHKSUM+0x5a>
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	b29b      	uxth	r3, r3
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	321f      	adds	r2, #31
 8000544:	7812      	ldrb	r2, [r2, #0]
 8000546:	4293      	cmp	r3, r2
 8000548:	d101      	bne.n	800054e <iBus_Check_CHKSUM+0x5a>
 800054a:	2301      	movs	r3, #1
 800054c:	e000      	b.n	8000550 <iBus_Check_CHKSUM+0x5c>
 800054e:	2300      	movs	r3, #0
 8000550:	b2db      	uxtb	r3, r3
}
 8000552:	4618      	mov	r0, r3
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3302      	adds	r3, #2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b21a      	sxth	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3303      	adds	r3, #3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b21b      	sxth	r3, r3
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21b      	sxth	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000586:	b29a      	uxth	r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3304      	adds	r3, #4
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b21a      	sxth	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3305      	adds	r3, #5
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b21b      	sxth	r3, r3
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	b21b      	sxth	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3306      	adds	r3, #6
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3307      	adds	r3, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b21b      	sxth	r3, r3
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3308      	adds	r3, #8
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b21a      	sxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3309      	adds	r3, #9
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	330a      	adds	r3, #10
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b21a      	sxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	330b      	adds	r3, #11
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b21b      	sxth	r3, r3
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	b29b      	uxth	r3, r3
 8000612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000616:	b29a      	uxth	r2, r3
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	330c      	adds	r3, #12
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b21a      	sxth	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	330d      	adds	r3, #13
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b21b      	sxth	r3, r3
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	b21b      	sxth	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	b21b      	sxth	r3, r3
 8000634:	b29b      	uxth	r3, r3
 8000636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800063a:	b29a      	uxth	r2, r3
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[14] | data[15]<<8) & 0x0fff;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	330e      	adds	r3, #14
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b21a      	sxth	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	330f      	adds	r3, #15
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b21b      	sxth	r3, r3
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b21b      	sxth	r3, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800065e:	b29a      	uxth	r2, r3
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	81da      	strh	r2, [r3, #14]

	iBus->FailSafe = (data[13] >> 4);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330d      	adds	r3, #13
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	091b      	lsrs	r3, r3, #4
 800066c:	b2da      	uxtb	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	751a      	strb	r2, [r3, #20]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_CAN1_Init+0x64>)
 8000686:	4a18      	ldr	r2, [pc, #96]	@ (80006e8 <MX_CAN1_Init+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_CAN1_Init+0x64>)
 800068c:	2206      	movs	r2, #6
 800068e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_CAN1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_CAN1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_CAN1_Init+0x64>)
 800069e:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80006a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006d2:	f000 ffbb 	bl	800164c <HAL_CAN_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006dc:	f000 fb4a 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000050 	.word	0x20000050
 80006e8:	40006400 	.word	0x40006400

080006ec <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_CAN2_Init+0x98>)
 80006f4:	4a24      	ldr	r2, [pc, #144]	@ (8000788 <MX_CAN2_Init+0x9c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <MX_CAN2_Init+0x98>)
 80006fa:	2206      	movs	r2, #6
 80006fc:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_CAN2_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_CAN2_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_CAN2_Init+0x98>)
 800070c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000710:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000712:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_CAN2_Init+0x98>)
 8000714:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000718:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_CAN2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_CAN2_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_CAN2_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_CAN2_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_CAN2_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_CAN2_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800073e:	4811      	ldr	r0, [pc, #68]	@ (8000784 <MX_CAN2_Init+0x98>)
 8000740:	f000 ff84 	bl	800164c <HAL_CAN_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 800074a:	f000 fb13 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef CAN_Filter_Config;
  CAN_Filter_Config.FilterActivation = CAN_FILTER_ENABLE;
 800074e:	2301      	movs	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
  CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000752:	2301      	movs	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
  CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDLIST;
 8000756:	2301      	movs	r3, #1
 8000758:	61bb      	str	r3, [r7, #24]
  CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 800075a:	2301      	movs	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
  CAN_Filter_Config.SlaveStartFilterBank = 14;
 800075e:	230e      	movs	r3, #14
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24

  //Config
  CAN_Filter_Config.FilterBank = 14;
 8000762:	230e      	movs	r3, #14
 8000764:	617b      	str	r3, [r7, #20]
  CAN_Filter_Config.FilterIdHigh = (SERVO_ID << 3 | 0x04) >> 16;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_CAN2_Init+0xa0>)
 8000768:	603b      	str	r3, [r7, #0]
  CAN_Filter_Config.FilterIdLow =  (SERVO_ID << 3 | 0x04) & 0xFFFF;
 800076a:	f240 6344 	movw	r3, #1604	@ 0x644
 800076e:	607b      	str	r3, [r7, #4]
  HAL_CAN_ConfigFilter(&hcan2, &CAN_Filter_Config);
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <MX_CAN2_Init+0x98>)
 8000776:	f001 f865 	bl	8001844 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	@ 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000078 	.word	0x20000078
 8000788:	40006800 	.word	0x40006800
 800078c:	ffffc7f8 	.word	0xffffc7f8

08000790 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a4a      	ldr	r2, [pc, #296]	@ (80008d8 <HAL_CAN_MspInit+0x148>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d13e      	bne.n	8000830 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80007b2:	4b4a      	ldr	r3, [pc, #296]	@ (80008dc <HAL_CAN_MspInit+0x14c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a48      	ldr	r2, [pc, #288]	@ (80008dc <HAL_CAN_MspInit+0x14c>)
 80007ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80007bc:	4b47      	ldr	r3, [pc, #284]	@ (80008dc <HAL_CAN_MspInit+0x14c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d10d      	bne.n	80007e0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	4b45      	ldr	r3, [pc, #276]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	4a44      	ldr	r2, [pc, #272]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d4:	4b42      	ldr	r3, [pc, #264]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	4b3e      	ldr	r3, [pc, #248]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e8:	4a3d      	ldr	r2, [pc, #244]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f0:	4b3b      	ldr	r3, [pc, #236]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800080e:	2309      	movs	r3, #9
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	4832      	ldr	r0, [pc, #200]	@ (80008e4 <HAL_CAN_MspInit+0x154>)
 800081a:	f001 fe8f 	bl	800253c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2014      	movs	r0, #20
 8000824:	f001 fe53 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000828:	2014      	movs	r0, #20
 800082a:	f001 fe6c 	bl	8002506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800082e:	e04f      	b.n	80008d0 <HAL_CAN_MspInit+0x140>
  else if(canHandle->Instance==CAN2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a2c      	ldr	r2, [pc, #176]	@ (80008e8 <HAL_CAN_MspInit+0x158>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d14a      	bne.n	80008d0 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	4a27      	ldr	r2, [pc, #156]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 8000844:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000848:	6413      	str	r3, [r2, #64]	@ 0x40
 800084a:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <HAL_CAN_MspInit+0x14c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a1f      	ldr	r2, [pc, #124]	@ (80008dc <HAL_CAN_MspInit+0x14c>)
 800085e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000860:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <HAL_CAN_MspInit+0x14c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d10d      	bne.n	8000884 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a1b      	ldr	r2, [pc, #108]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 8000872:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088c:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 800088e:	f043 0302 	orr.w	r3, r3, #2
 8000892:	6313      	str	r3, [r2, #48]	@ 0x30
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_CAN_MspInit+0x150>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80008a0:	2360      	movs	r3, #96	@ 0x60
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80008b0:	2309      	movs	r3, #9
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	480a      	ldr	r0, [pc, #40]	@ (80008e4 <HAL_CAN_MspInit+0x154>)
 80008bc:	f001 fe3e 	bl	800253c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2041      	movs	r0, #65	@ 0x41
 80008c6:	f001 fe02 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80008ca:	2041      	movs	r0, #65	@ 0x41
 80008cc:	f001 fe1b 	bl	8002506 <HAL_NVIC_EnableIRQ>
}
 80008d0:	bf00      	nop
 80008d2:	3730      	adds	r7, #48	@ 0x30
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40006400 	.word	0x40006400
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40006800 	.word	0x40006800

080008ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	041a      	lsls	r2, r3, #16
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	619a      	str	r2, [r3, #24]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000916:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000918:	4907      	ldr	r1, [pc, #28]	@ (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000922:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4013      	ands	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	40023800 	.word	0x40023800

0800093c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000952:	2080      	movs	r0, #128	@ 0x80
 8000954:	f7ff ffda 	bl	800090c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000958:	2008      	movs	r0, #8
 800095a:	f7ff ffd7 	bl	800090c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff ffd4 	bl	800090c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000964:	2004      	movs	r0, #4
 8000966:	f7ff ffd1 	bl	800090c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff ffce 	bl	800090c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_14);
 8000970:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000974:	480b      	ldr	r0, [pc, #44]	@ (80009a4 <MX_GPIO_Init+0x68>)
 8000976:	f7ff ffb9 	bl	80008ec <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 800097a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800097e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000980:	2301      	movs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	463b      	mov	r3, r7
 8000992:	4619      	mov	r1, r3
 8000994:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <MX_GPIO_Init+0x68>)
 8000996:	f002 fd1c 	bl	80033d2 <LL_GPIO_Init>

}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f043 0201 	orr.w	r2, r3, #1
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	f043 0201 	orr.w	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	60da      	str	r2, [r3, #12]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	@ 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	330c      	adds	r3, #12
 80009f4:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	e853 3f00 	ldrex	r3, [r3]
 80009fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	f043 0320 	orr.w	r3, r3, #32
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	330c      	adds	r3, #12
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	61ba      	str	r2, [r7, #24]
 8000a0e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a10:	6979      	ldr	r1, [r7, #20]
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	e841 2300 	strex	r3, r2, [r1]
 8000a18:	613b      	str	r3, [r7, #16]
   return(result);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1e7      	bne.n	80009f0 <LL_USART_EnableIT_RXNE+0x8>
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3724      	adds	r7, #36	@ 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	4013      	ands	r3, r2
 8000a44:	041a      	lsls	r2, r3, #16
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	43d9      	mvns	r1, r3
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	400b      	ands	r3, r1
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	619a      	str	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f000 fd7f 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 f889 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f7ff ff65 	bl	800093c <MX_GPIO_Init>
  MX_UART5_Init();
 8000a72:	f000 fcd7 	bl	8001424 <MX_UART5_Init>
  MX_CAN2_Init();
 8000a76:	f7ff fe39 	bl	80006ec <MX_CAN2_Init>
  MX_TIM7_Init();
 8000a7a:	f000 fbb9 	bl	80011f0 <MX_TIM7_Init>
  MX_CAN1_Init();
 8000a7e:	f7ff fdff 	bl	8000680 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan2);
 8000a82:	4831      	ldr	r0, [pc, #196]	@ (8000b48 <main+0xe8>)
 8000a84:	f000 ffbc 	bl	8001a00 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000a88:	2110      	movs	r1, #16
 8000a8a:	482f      	ldr	r0, [pc, #188]	@ (8000b48 <main+0xe8>)
 8000a8c:	f001 f9ee 	bl	8001e6c <HAL_CAN_ActivateNotification>

  LL_TIM_EnableCounter(TIM7); // 50Hz loop
 8000a90:	482e      	ldr	r0, [pc, #184]	@ (8000b4c <main+0xec>)
 8000a92:	f7ff ff89 	bl	80009a8 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8000a96:	482d      	ldr	r0, [pc, #180]	@ (8000b4c <main+0xec>)
 8000a98:	f7ff ff96 	bl	80009c8 <LL_TIM_EnableIT_UPDATE>

  LL_USART_EnableIT_RXNE(UART5); // bat ngat ibus
 8000a9c:	482c      	ldr	r0, [pc, #176]	@ (8000b50 <main+0xf0>)
 8000a9e:	f7ff ffa3 	bl	80009e8 <LL_USART_EnableIT_RXNE>

  CAN2_TXHeader.ExtId = 0x18EFC800;
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <main+0xf4>)
 8000aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b58 <main+0xf8>)
 8000aa6:	605a      	str	r2, [r3, #4]
  CAN2_TXHeader.DLC = 8;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <main+0xf4>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	611a      	str	r2, [r3, #16]
  CAN2_TXHeader.IDE = CAN_ID_EXT;
 8000aae:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <main+0xf4>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	609a      	str	r2, [r3, #8]
  CAN2_TXHeader.RTR = CAN_RTR_DATA;
 8000ab4:	4b27      	ldr	r3, [pc, #156]	@ (8000b54 <main+0xf4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  CAN2_TXHeader.TransmitGlobalTime = DISABLE;
 8000aba:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <main+0xf4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(tim7_20ms_flag == 1)
 8000ac0:	4b26      	ldr	r3, [pc, #152]	@ (8000b5c <main+0xfc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d12c      	bne.n	8000b22 <main+0xc2>
	  {
		  tim7_20ms_flag = 0;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <main+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
		  LL_GPIO_TogglePin(GPIOD, LL_GPIO_PIN_14);
 8000ace:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ad2:	4823      	ldr	r0, [pc, #140]	@ (8000b60 <main+0x100>)
 8000ad4:	f7ff ffab 	bl	8000a2e <LL_GPIO_TogglePin>
		  uint16_t temp =  servo_control(iBus.LH);
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <main+0x104>)
 8000ada:	88db      	ldrh	r3, [r3, #6]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 f8ef 	bl	8000cc0 <servo_control>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
		  CAN2_TXdata[0] = temp & 0xFF;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <main+0x108>)
 8000aec:	701a      	strb	r2, [r3, #0]
		  CAN2_TXdata[1] = (temp >> 8) & 0xFF;
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <main+0x108>)
 8000af8:	705a      	strb	r2, [r3, #1]
		  static uint8_t cnt = 0;
		  if(cnt++ < 4)
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <main+0x10c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	b2d1      	uxtb	r1, r2
 8000b02:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <main+0x10c>)
 8000b04:	7011      	strb	r1, [r2, #0]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d805      	bhi.n	8000b16 <main+0xb6>
			  HAL_CAN_AddTxMessage(&hcan2, &CAN2_TXHeader, CAN2_TXdata_Enable, &TxMailbox);
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <main+0x110>)
 8000b0c:	4a19      	ldr	r2, [pc, #100]	@ (8000b74 <main+0x114>)
 8000b0e:	4911      	ldr	r1, [pc, #68]	@ (8000b54 <main+0xf4>)
 8000b10:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <main+0xe8>)
 8000b12:	f000 ffb9 	bl	8001a88 <HAL_CAN_AddTxMessage>
		  HAL_CAN_AddTxMessage(&hcan2, &CAN2_TXHeader, CAN2_TXdata, &TxMailbox);
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <main+0x110>)
 8000b18:	4a13      	ldr	r2, [pc, #76]	@ (8000b68 <main+0x108>)
 8000b1a:	490e      	ldr	r1, [pc, #56]	@ (8000b54 <main+0xf4>)
 8000b1c:	480a      	ldr	r0, [pc, #40]	@ (8000b48 <main+0xe8>)
 8000b1e:	f000 ffb3 	bl	8001a88 <HAL_CAN_AddTxMessage>
	  }

	  // Check Connect IBus
	  if(ibus_rx_cplt_flag == 1)
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <main+0x118>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d1ca      	bne.n	8000ac0 <main+0x60>
	  {
		ibus_rx_cplt_flag = 0;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <main+0x118>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8000b30:	2120      	movs	r1, #32
 8000b32:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <main+0x11c>)
 8000b34:	f7ff fcde 	bl	80004f4 <iBus_Check_CHKSUM>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d1c0      	bne.n	8000ac0 <main+0x60>
		{
			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8000b3e:	4909      	ldr	r1, [pc, #36]	@ (8000b64 <main+0x104>)
 8000b40:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <main+0x11c>)
 8000b42:	f7ff fd0c 	bl	800055e <iBus_Parsing>
	  if(tim7_20ms_flag == 1)
 8000b46:	e7bb      	b.n	8000ac0 <main+0x60>
 8000b48:	20000078 	.word	0x20000078
 8000b4c:	40001400 	.word	0x40001400
 8000b50:	40005000 	.word	0x40005000
 8000b54:	200000a4 	.word	0x200000a4
 8000b58:	18efc800 	.word	0x18efc800
 8000b5c:	200000c9 	.word	0x200000c9
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	20000038 	.word	0x20000038
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	200000c8 	.word	0x200000c8
 8000b70:	200000bc 	.word	0x200000bc
 8000b74:	20000008 	.word	0x20000008
 8000b78:	200000ec 	.word	0x200000ec
 8000b7c:	200000cc 	.word	0x200000cc

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	@ 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	@ 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 f996 	bl	8003ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <SystemClock_Config+0xcc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a27      	ldr	r2, [pc, #156]	@ (8000c4c <SystemClock_Config+0xcc>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <SystemClock_Config+0xd0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a21      	ldr	r2, [pc, #132]	@ (8000c50 <SystemClock_Config+0xd0>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bf4:	23a8      	movs	r3, #168	@ 0xa8
 8000bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fe35 	bl	8002874 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c10:	f000 f8b0 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2105      	movs	r1, #5
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 f896 	bl	8002d64 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c3e:	f000 f899 	bl	8000d74 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3750      	adds	r7, #80	@ 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <HAL_CAN_RxFifo1MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	@ 0x30
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO1, &rxHeader, rxData);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	f107 0214 	add.w	r2, r7, #20
 8000c64:	2101      	movs	r1, #1
 8000c66:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000c68:	f000 ffde 	bl	8001c28 <HAL_CAN_GetRxMessage>

	if (rxHeader.IDE == CAN_ID_EXT) {
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d119      	bne.n	8000ca6 <HAL_CAN_RxFifo1MsgPendingCallback+0x52>
		switch (rxHeader.ExtId) {
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb4 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d115      	bne.n	8000ca6 <HAL_CAN_RxFifo1MsgPendingCallback+0x52>
			case 0x18FF00C8:
				Servo_Position = (int16_t)((rxData[1]<< 8) | rxData[0]);
 8000c7a:	7b7b      	ldrb	r3, [r7, #13]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	7b3b      	ldrb	r3, [r7, #12]
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b21b      	sxth	r3, r3
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000c8e:	801a      	strh	r2, [r3, #0]
				Omega = Distance_To_Omega(Servo_Position);
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f849 	bl	8000d2c <Distance_To_Omega>
 8000c9a:	eef0 7a40 	vmov.f32	s15, s0
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8000ca0:	edc3 7a00 	vstr	s15, [r3]
				break;
 8000ca4:	bf00      	nop
		}
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	@ 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	18ff00c8 	.word	0x18ff00c8
 8000cb8:	200000c0 	.word	0x200000c0
 8000cbc:	200000c4 	.word	0x200000c4

08000cc0 <servo_control>:

uint16_t servo_control(unsigned short Ibus_LH)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
	if (Ibus_LH <= 1500)
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d811      	bhi.n	8000cf8 <servo_control+0x38>
		return (Ibus_LH - 1000) * (380 - 91) / (1500 - 1000) + 91;
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	011a      	lsls	r2, r3, #4
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a10      	ldr	r2, [pc, #64]	@ (8000d28 <servo_control+0x68>)
 8000ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cea:	1152      	asrs	r2, r2, #5
 8000cec:	17db      	asrs	r3, r3, #31
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	335b      	adds	r3, #91	@ 0x5b
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	e010      	b.n	8000d1a <servo_control+0x5a>
	else
		return (Ibus_LH - 1500) * (687 - 380) / (2000 - 1500) + 380;
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000cfe:	f240 1233 	movw	r2, #307	@ 0x133
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <servo_control+0x68>)
 8000d08:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0c:	1152      	asrs	r2, r2, #5
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8000d18:	b29b      	uxth	r3, r3
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	10624dd3 	.word	0x10624dd3

08000d2c <Distance_To_Omega>:

float Distance_To_Omega(uint16_t input)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
	return ((float)(input - 90) * 80.0f) / (687.0f - 90.0f) - 40.0f;
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	3b5a      	subs	r3, #90	@ 0x5a
 8000d3a:	ee07 3a90 	vmov	s15, r3
 8000d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d42:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000d68 <Distance_To_Omega+0x3c>
 8000d46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d4a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000d6c <Distance_To_Omega+0x40>
 8000d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d52:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000d70 <Distance_To_Omega+0x44>
 8000d56:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	42a00000 	.word	0x42a00000
 8000d6c:	44154000 	.word	0x44154000
 8000d70:	42200000 	.word	0x42200000

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <Error_Handler+0x8>

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d96:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a08      	ldr	r2, [pc, #32]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <LL_TIM_ClearFlag_UPDATE>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f06f 0201 	mvn.w	r2, #1
 8000dde:	611a      	str	r2, [r3, #16]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <LL_USART_IsActiveFlag_RXNE>:
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	2b20      	cmp	r3, #32
 8000e24:	bf0c      	ite	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	2300      	movne	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <LL_USART_ClearFlag_RXNE>:
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f06f 0220 	mvn.w	r2, #32
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	b2db      	uxtb	r3, r3
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e72:	bf00      	nop
 8000e74:	e7fd      	b.n	8000e72 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	bf00      	nop
 8000e7c:	e7fd      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e82:	bf00      	nop
 8000e84:	e7fd      	b.n	8000e82 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	bf00      	nop
 8000e8c:	e7fd      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e92:	bf00      	nop
 8000e94:	e7fd      	b.n	8000e92 <UsageFault_Handler+0x4>

08000e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 fba2 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <CAN1_RX0_IRQHandler+0x10>)
 8000ed2:	f000 fff1 	bl	8001eb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000050 	.word	0x20000050

08000ee0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8000ee4:	4832      	ldr	r0, [pc, #200]	@ (8000fb0 <UART5_IRQHandler+0xd0>)
 8000ee6:	f7ff ff94 	bl	8000e12 <LL_USART_IsActiveFlag_RXNE>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d05c      	beq.n	8000faa <UART5_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8000ef0:	482f      	ldr	r0, [pc, #188]	@ (8000fb0 <UART5_IRQHandler+0xd0>)
 8000ef2:	f7ff ffa1 	bl	8000e38 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8000ef6:	482e      	ldr	r0, [pc, #184]	@ (8000fb0 <UART5_IRQHandler+0xd0>)
 8000ef8:	f7ff ffac 	bl	8000e54 <LL_USART_ReceiveData8>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <UART5_IRQHandler+0xd4>)
 8000f02:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8000f04:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <UART5_IRQHandler+0xd8>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b1f      	cmp	r3, #31
 8000f10:	d02e      	beq.n	8000f70 <UART5_IRQHandler+0x90>
 8000f12:	2b1f      	cmp	r3, #31
 8000f14:	dc3a      	bgt.n	8000f8c <UART5_IRQHandler+0xac>
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d002      	beq.n	8000f20 <UART5_IRQHandler+0x40>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d012      	beq.n	8000f44 <UART5_IRQHandler+0x64>
 8000f1e:	e035      	b.n	8000f8c <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data == 0x20)
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <UART5_IRQHandler+0xd4>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b20      	cmp	r3, #32
 8000f26:	d13f      	bne.n	8000fa8 <UART5_IRQHandler+0xc8>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 8000f28:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b21      	ldr	r3, [pc, #132]	@ (8000fb4 <UART5_IRQHandler+0xd4>)
 8000f30:	7819      	ldrb	r1, [r3, #0]
 8000f32:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <UART5_IRQHandler+0xe0>)
 8000f34:	5499      	strb	r1, [r3, r2]
				cnt++;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f40:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f42:	e031      	b.n	8000fa8 <UART5_IRQHandler+0xc8>
		case 1:
			if(uart5_rx_data == 0x40)
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <UART5_IRQHandler+0xd4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b40      	cmp	r3, #64	@ 0x40
 8000f4a:	d10d      	bne.n	8000f68 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <UART5_IRQHandler+0xd4>)
 8000f54:	7819      	ldrb	r1, [r3, #0]
 8000f56:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <UART5_IRQHandler+0xe0>)
 8000f58:	5499      	strb	r1, [r3, r2]
				cnt++;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f64:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8000f66:	e020      	b.n	8000faa <UART5_IRQHandler+0xca>
				cnt = 0;
 8000f68:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
			break;
 8000f6e:	e01c      	b.n	8000faa <UART5_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <UART5_IRQHandler+0xd4>)
 8000f78:	7819      	ldrb	r1, [r3, #0]
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <UART5_IRQHandler+0xe0>)
 8000f7c:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <UART5_IRQHandler+0xe4>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
			break;
 8000f8a:	e00e      	b.n	8000faa <UART5_IRQHandler+0xca>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <UART5_IRQHandler+0xd4>)
 8000f94:	7819      	ldrb	r1, [r3, #0]
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <UART5_IRQHandler+0xe0>)
 8000f98:	5499      	strb	r1, [r3, r2]
			cnt++;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <UART5_IRQHandler+0xdc>)
 8000fa4:	701a      	strb	r2, [r3, #0]
			break;
 8000fa6:	e000      	b.n	8000faa <UART5_IRQHandler+0xca>
			break;
 8000fa8:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40005000 	.word	0x40005000
 8000fb4:	200000ca 	.word	0x200000ca
 8000fb8:	200000cb 	.word	0x200000cb
 8000fbc:	200000ed 	.word	0x200000ed
 8000fc0:	200000cc 	.word	0x200000cc
 8000fc4:	200000ec 	.word	0x200000ec

08000fc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

	static unsigned char tim7_20ms_count = 0;

	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <TIM7_IRQHandler+0x3c>)
 8000fce:	f7ff ff0d 	bl	8000dec <LL_TIM_IsActiveFlag_UPDATE>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d012      	beq.n	8000ffe <TIM7_IRQHandler+0x36>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8000fd8:	480a      	ldr	r0, [pc, #40]	@ (8001004 <TIM7_IRQHandler+0x3c>)
 8000fda:	f7ff fef9 	bl	8000dd0 <LL_TIM_ClearFlag_UPDATE>

		tim7_20ms_count++;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <TIM7_IRQHandler+0x40>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <TIM7_IRQHandler+0x40>)
 8000fe8:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count == 20)
 8000fea:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <TIM7_IRQHandler+0x40>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b14      	cmp	r3, #20
 8000ff0:	d105      	bne.n	8000ffe <TIM7_IRQHandler+0x36>
		{
			tim7_20ms_count = 0;
 8000ff2:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <TIM7_IRQHandler+0x40>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <TIM7_IRQHandler+0x44>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40001400 	.word	0x40001400
 8001008:	200000ee 	.word	0x200000ee
 800100c:	200000c9 	.word	0x200000c9

08001010 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <CAN2_RX1_IRQHandler+0x10>)
 8001016:	f000 ff4f 	bl	8001eb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000078 	.word	0x20000078

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <LL_TIM_EnableARRPreload>:
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_TIM_SetTriggerOutput>:
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	605a      	str	r2, [r3, #4]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <LL_TIM_DisableMasterSlaveMode>:
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80011ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011cc:	4907      	ldr	r1, [pc, #28]	@ (80011ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80011d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	40023800 	.word	0x40023800

080011f0 <MX_TIM7_Init>:

/* USER CODE END 0 */

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8001204:	2020      	movs	r0, #32
 8001206:	f7ff ffdb 	bl	80011c0 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800120a:	f7ff ff1d 	bl	8001048 <__NVIC_GetPriorityGrouping>
 800120e:	4603      	mov	r3, r0
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff6d 	bl	80010f4 <NVIC_EncodePriority>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	2037      	movs	r0, #55	@ 0x37
 8001220:	f7ff ff3e 	bl	80010a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8001224:	2037      	movs	r0, #55	@ 0x37
 8001226:	f7ff ff1d 	bl	8001064 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 800122a:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 800122e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 8001234:	2301      	movs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4808      	ldr	r0, [pc, #32]	@ (8001260 <MX_TIM7_Init+0x70>)
 800123e:	f002 fabd 	bl	80037bc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8001242:	4807      	ldr	r0, [pc, #28]	@ (8001260 <MX_TIM7_Init+0x70>)
 8001244:	f7ff ff89 	bl	800115a <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8001248:	2100      	movs	r1, #0
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_TIM7_Init+0x70>)
 800124c:	f7ff ff95 	bl	800117a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8001250:	4803      	ldr	r0, [pc, #12]	@ (8001260 <MX_TIM7_Init+0x70>)
 8001252:	f7ff ffa5 	bl	80011a0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40001400 	.word	0x40001400

08001264 <__NVIC_GetPriorityGrouping>:
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	@ (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_USART_Enable>:
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60da      	str	r2, [r3, #12]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_USART_ConfigAsyncMode>:
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	615a      	str	r2, [r3, #20]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <LL_AHB1_GRP1_EnableClock>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4013      	ands	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40023800 	.word	0x40023800

080013f4 <LL_APB1_GRP1_EnableClock>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001400:	4907      	ldr	r1, [pc, #28]	@ (8001420 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <LL_APB1_GRP1_EnableClock+0x2c>)
 800140a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4013      	ands	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40023800 	.word	0x40023800

08001424 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	@ 0x38
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800144e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001452:	f7ff ffcf 	bl	80013f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001456:	2004      	movs	r0, #4
 8001458:	f7ff ffb4 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800145c:	2008      	movs	r0, #8
 800145e:	f7ff ffb1 	bl	80013c4 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001466:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001468:	2302      	movs	r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001478:	2308      	movs	r3, #8
 800147a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4821      	ldr	r0, [pc, #132]	@ (8001508 <MX_UART5_Init+0xe4>)
 8001482:	f001 ffa6 	bl	80033d2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001486:	2304      	movs	r3, #4
 8001488:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800148a:	2302      	movs	r3, #2
 800148c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800149a:	2308      	movs	r3, #8
 800149c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	481a      	ldr	r0, [pc, #104]	@ (800150c <MX_UART5_Init+0xe8>)
 80014a4:	f001 ff95 	bl	80033d2 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014a8:	f7ff fedc 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff2c 	bl	8001310 <NVIC_EncodePriority>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4619      	mov	r1, r3
 80014bc:	2035      	movs	r0, #53	@ 0x35
 80014be:	f7ff fefd 	bl	80012bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 80014c2:	2035      	movs	r0, #53	@ 0x35
 80014c4:	f7ff fedc 	bl	8001280 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80014c8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80014cc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014da:	230c      	movs	r3, #12
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80014e2:	2300      	movs	r3, #0
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4808      	ldr	r0, [pc, #32]	@ (8001510 <MX_UART5_Init+0xec>)
 80014ee:	f002 fc67 	bl	8003dc0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 80014f2:	4807      	ldr	r0, [pc, #28]	@ (8001510 <MX_UART5_Init+0xec>)
 80014f4:	f7ff ff4f 	bl	8001396 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_UART5_Init+0xec>)
 80014fa:	f7ff ff3c 	bl	8001376 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	@ 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40005000 	.word	0x40005000

08001514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800154c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001518:	f7ff fd84 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	@ (8001554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	@ (8001560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001542:	f002 fcc5 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001546:	f7ff fa8b 	bl	8000a60 <main>
  bx  lr    
 800154a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800154c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001558:	08003f58 	.word	0x08003f58
  ldr r2, =_sbss
 800155c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001560:	200000f4 	.word	0x200000f4

08001564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <HAL_Init+0x40>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001576:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <HAL_Init+0x40>)
 800157e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001582:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	@ (80015a8 <HAL_Init+0x40>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 ff91 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	200f      	movs	r0, #15
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fbf0 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 ffa9 	bl	8002522 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 ff71 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000010 	.word	0x20000010
 8001604:	20000018 	.word	0x20000018
 8001608:	20000014 	.word	0x20000014

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000018 	.word	0x20000018
 8001630:	200000f0 	.word	0x200000f0

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200000f0 	.word	0x200000f0

0800164c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0ed      	b.n	800183a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff f890 	bl	8000790 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff ffd8 	bl	8001634 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001686:	e012      	b.n	80016ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001688:	f7ff ffd4 	bl	8001634 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0c5      	b.n	800183a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0e5      	beq.n	8001688 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0202 	bic.w	r2, r2, #2
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016cc:	f7ff ffb2 	bl	8001634 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016d2:	e012      	b.n	80016fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d4:	f7ff ffae 	bl	8001634 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b0a      	cmp	r3, #10
 80016e0:	d90b      	bls.n	80016fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2205      	movs	r2, #5
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e09f      	b.n	800183a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e5      	bne.n	80016d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e007      	b.n	8001732 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7e5b      	ldrb	r3, [r3, #25]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e007      	b.n	800175c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800175a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7e9b      	ldrb	r3, [r3, #26]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d108      	bne.n	8001776 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0220 	orr.w	r2, r2, #32
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e007      	b.n	8001786 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0220 	bic.w	r2, r2, #32
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7edb      	ldrb	r3, [r3, #27]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0210 	bic.w	r2, r2, #16
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e007      	b.n	80017b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0210 	orr.w	r2, r2, #16
 80017ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7f1b      	ldrb	r3, [r3, #28]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d108      	bne.n	80017ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0208 	orr.w	r2, r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e007      	b.n	80017da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0208 	bic.w	r2, r2, #8
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7f5b      	ldrb	r3, [r3, #29]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d108      	bne.n	80017f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0204 	orr.w	r2, r2, #4
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e007      	b.n	8001804 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	ea42 0103 	orr.w	r1, r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001854:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d003      	beq.n	8001864 <HAL_CAN_ConfigFilter+0x20>
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b02      	cmp	r3, #2
 8001860:	f040 80be 	bne.w	80019e0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001864:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <HAL_CAN_ConfigFilter+0x1b8>)
 8001866:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800187e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	431a      	orrs	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	2201      	movs	r2, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d123      	bne.n	800190e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	401a      	ands	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	3248      	adds	r2, #72	@ 0x48
 80018ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001902:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001904:	6939      	ldr	r1, [r7, #16]
 8001906:	3348      	adds	r3, #72	@ 0x48
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d122      	bne.n	800195c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	431a      	orrs	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001936:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3248      	adds	r2, #72	@ 0x48
 800193c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001950:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001952:	6939      	ldr	r1, [r7, #16]
 8001954:	3348      	adds	r3, #72	@ 0x48
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001976:	e007      	b.n	8001988 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	431a      	orrs	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019a2:	e007      	b.n	80019b4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d107      	bne.n	80019cc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019d2:	f023 0201 	bic.w	r2, r3, #1
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e006      	b.n	80019ee <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
  }
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40006400 	.word	0x40006400

08001a00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d12e      	bne.n	8001a72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff fe02 	bl	8001634 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a32:	e012      	b.n	8001a5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a34:	f7ff fdfe 	bl	8001634 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b0a      	cmp	r3, #10
 8001a40:	d90b      	bls.n	8001a5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2205      	movs	r2, #5
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e012      	b.n	8001a80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e5      	bne.n	8001a34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e006      	b.n	8001a80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
  }
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	@ 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d003      	beq.n	8001ab4 <HAL_CAN_AddTxMessage+0x2c>
 8001aac:	7ffb      	ldrb	r3, [r7, #31]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	f040 80ad 	bne.w	8001c0e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10a      	bne.n	8001ad4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8095 	beq.w	8001bfe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	0e1b      	lsrs	r3, r3, #24
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10d      	bne.n	8001b0c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	6809      	ldr	r1, [r1, #0]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3318      	adds	r3, #24
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	440b      	add	r3, r1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00f      	b.n	8001b2c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b16:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b20:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3318      	adds	r3, #24
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	440b      	add	r3, r1
 8001b2a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3318      	adds	r3, #24
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	7d1b      	ldrb	r3, [r3, #20]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d111      	bne.n	8001b6c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3318      	adds	r3, #24
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	6811      	ldr	r1, [r2, #0]
 8001b5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3318      	adds	r3, #24
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	440b      	add	r3, r1
 8001b68:	3304      	adds	r3, #4
 8001b6a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3307      	adds	r3, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	061a      	lsls	r2, r3, #24
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3306      	adds	r3, #6
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3305      	adds	r3, #5
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	4313      	orrs	r3, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	3204      	adds	r2, #4
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	6811      	ldr	r1, [r2, #0]
 8001b94:	ea43 0200 	orr.w	r2, r3, r0
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	440b      	add	r3, r1
 8001b9e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ba2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3303      	adds	r3, #3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	061a      	lsls	r2, r3, #24
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3302      	adds	r3, #2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	7812      	ldrb	r2, [r2, #0]
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	6811      	ldr	r1, [r2, #0]
 8001bca:	ea43 0200 	orr.w	r2, r3, r0
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001bd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3318      	adds	r3, #24
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	6811      	ldr	r1, [r2, #0]
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3318      	adds	r3, #24
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	440b      	add	r3, r1
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e00e      	b.n	8001c1c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e006      	b.n	8001c1c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
  }
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3724      	adds	r7, #36	@ 0x24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d003      	beq.n	8001c4c <HAL_CAN_GetRxMessage+0x24>
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	f040 8103 	bne.w	8001e52 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10e      	bne.n	8001c70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d116      	bne.n	8001c8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0f7      	b.n	8001e60 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0e8      	b.n	8001e60 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	331b      	adds	r3, #27
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0204 	and.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10c      	bne.n	8001cc6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	331b      	adds	r3, #27
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0d5b      	lsrs	r3, r3, #21
 8001cbc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e00b      	b.n	8001cde <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	331b      	adds	r3, #27
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	331b      	adds	r3, #27
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0202 	and.w	r2, r3, #2
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	331b      	adds	r3, #27
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2208      	movs	r2, #8
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	e00b      	b.n	8001d2c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	331b      	adds	r3, #27
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 020f 	and.w	r2, r3, #15
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	331b      	adds	r3, #27
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	3304      	adds	r3, #4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	331b      	adds	r3, #27
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4413      	add	r3, r2
 8001d50:	3304      	adds	r3, #4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0a1a      	lsrs	r2, r3, #8
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0c1a      	lsrs	r2, r3, #16
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3302      	adds	r3, #2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0e1a      	lsrs	r2, r3, #24
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	3303      	adds	r3, #3
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0a1a      	lsrs	r2, r3, #8
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3305      	adds	r3, #5
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0c1a      	lsrs	r2, r3, #16
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	3306      	adds	r3, #6
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e1a      	lsrs	r2, r3, #24
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	3307      	adds	r3, #7
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d108      	bne.n	8001e3e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	e007      	b.n	8001e4e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e006      	b.n	8001e60 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d002      	beq.n	8001e8a <HAL_CAN_ActivateNotification+0x1e>
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d109      	bne.n	8001e9e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6959      	ldr	r1, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e006      	b.n	8001eac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07c      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d023      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f983 	bl	8002226 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f20:	e016      	b.n	8001f50 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f34:	e00c      	b.n	8001f50 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f48:	e002      	b.n	8001f50 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f989 	bl	8002262 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d024      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f963 	bl	800223a <HAL_CAN_TxMailbox1CompleteCallback>
 8001f74:	e016      	b.n	8001fa4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f88:	e00c      	b.n	8001fa4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9c:	e002      	b.n	8001fa4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f969 	bl	8002276 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d024      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f943 	bl	800224e <HAL_CAN_TxMailbox2CompleteCallback>
 8001fc8:	e016      	b.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fdc:	e00c      	b.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff0:	e002      	b.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f949 	bl	800228a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2210      	movs	r2, #16
 800201a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2208      	movs	r2, #8
 8002036:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f93a 	bl	80022b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f921 	bl	800229e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2208      	movs	r2, #8
 800209a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f912 	bl	80022c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d009      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fdca 	bl	8000c54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2210      	movs	r2, #16
 80020da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8fc 	bl	80022da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2208      	movs	r2, #8
 80020fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8f5 	bl	80022ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d07b      	beq.n	8002206 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d072      	beq.n	80021fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002172:	2b00      	cmp	r3, #0
 8002174:	d043      	beq.n	80021fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d03e      	beq.n	80021fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002186:	2b60      	cmp	r3, #96	@ 0x60
 8002188:	d02b      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x32a>
 800218a:	2b60      	cmp	r3, #96	@ 0x60
 800218c:	d82e      	bhi.n	80021ec <HAL_CAN_IRQHandler+0x334>
 800218e:	2b50      	cmp	r3, #80	@ 0x50
 8002190:	d022      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x320>
 8002192:	2b50      	cmp	r3, #80	@ 0x50
 8002194:	d82a      	bhi.n	80021ec <HAL_CAN_IRQHandler+0x334>
 8002196:	2b40      	cmp	r3, #64	@ 0x40
 8002198:	d019      	beq.n	80021ce <HAL_CAN_IRQHandler+0x316>
 800219a:	2b40      	cmp	r3, #64	@ 0x40
 800219c:	d826      	bhi.n	80021ec <HAL_CAN_IRQHandler+0x334>
 800219e:	2b30      	cmp	r3, #48	@ 0x30
 80021a0:	d010      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x30c>
 80021a2:	2b30      	cmp	r3, #48	@ 0x30
 80021a4:	d822      	bhi.n	80021ec <HAL_CAN_IRQHandler+0x334>
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d002      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x2f8>
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d005      	beq.n	80021ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021ae:	e01d      	b.n	80021ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021b8:	e019      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021c2:	e014      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	f043 0320 	orr.w	r3, r3, #32
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021cc:	e00f      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021d6:	e00a      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e0:	e005      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ea:	e000      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            break;
 80021ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80021fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2204      	movs	r2, #4
 8002204:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f872 	bl	8002302 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <__NVIC_SetPriorityGrouping>:
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	@ (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	@ (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	@ (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	@ 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	@ 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	@ 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e16b      	b.n	8002830 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 815a 	bne.w	800282a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d005      	beq.n	800258e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	2b02      	cmp	r3, #2
 800258c:	d130      	bne.n	80025f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0201 	and.w	r2, r3, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d017      	beq.n	800262c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80b4 	beq.w	800282a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b60      	ldr	r3, [pc, #384]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002848 <HAL_GPIO_Init+0x30c>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026de:	4a5b      	ldr	r2, [pc, #364]	@ (800284c <HAL_GPIO_Init+0x310>)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	089b      	lsrs	r3, r3, #2
 80026e4:	3302      	adds	r3, #2
 80026e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a52      	ldr	r2, [pc, #328]	@ (8002850 <HAL_GPIO_Init+0x314>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d02b      	beq.n	8002762 <HAL_GPIO_Init+0x226>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	@ (8002854 <HAL_GPIO_Init+0x318>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d025      	beq.n	800275e <HAL_GPIO_Init+0x222>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	@ (8002858 <HAL_GPIO_Init+0x31c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01f      	beq.n	800275a <HAL_GPIO_Init+0x21e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <HAL_GPIO_Init+0x320>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x21a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	@ (8002860 <HAL_GPIO_Init+0x324>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x216>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	@ (8002864 <HAL_GPIO_Init+0x328>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x212>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	@ (8002868 <HAL_GPIO_Init+0x32c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	@ (800286c <HAL_GPIO_Init+0x330>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x20a>
 8002742:	2307      	movs	r3, #7
 8002744:	e00e      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002746:	2308      	movs	r3, #8
 8002748:	e00c      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800274a:	2306      	movs	r3, #6
 800274c:	e00a      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800274e:	2305      	movs	r3, #5
 8002750:	e008      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002752:	2304      	movs	r3, #4
 8002754:	e006      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002756:	2303      	movs	r3, #3
 8002758:	e004      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800275a:	2302      	movs	r3, #2
 800275c:	e002      	b.n	8002764 <HAL_GPIO_Init+0x228>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_GPIO_Init+0x228>
 8002762:	2300      	movs	r3, #0
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	f002 0203 	and.w	r2, r2, #3
 800276a:	0092      	lsls	r2, r2, #2
 800276c:	4093      	lsls	r3, r2
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002774:	4935      	ldr	r1, [pc, #212]	@ (800284c <HAL_GPIO_Init+0x310>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002782:	4b3b      	ldr	r3, [pc, #236]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a6:	4a32      	ldr	r2, [pc, #200]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ac:	4b30      	ldr	r3, [pc, #192]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d0:	4a27      	ldr	r2, [pc, #156]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d6:	4b26      	ldr	r3, [pc, #152]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_GPIO_Init+0x334>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002824:	4a12      	ldr	r2, [pc, #72]	@ (8002870 <HAL_GPIO_Init+0x334>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b0f      	cmp	r3, #15
 8002834:	f67f ae90 	bls.w	8002558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40013800 	.word	0x40013800
 8002850:	40020000 	.word	0x40020000
 8002854:	40020400 	.word	0x40020400
 8002858:	40020800 	.word	0x40020800
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40021400 	.word	0x40021400
 8002868:	40021800 	.word	0x40021800
 800286c:	40021c00 	.word	0x40021c00
 8002870:	40013c00 	.word	0x40013c00

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e267      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002892:	4b88      	ldr	r3, [pc, #544]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b85      	ldr	r3, [pc, #532]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b82      	ldr	r3, [pc, #520]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e242      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b76      	ldr	r3, [pc, #472]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b70      	ldr	r3, [pc, #448]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6f      	ldr	r2, [pc, #444]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6c      	ldr	r2, [pc, #432]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b69      	ldr	r3, [pc, #420]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a68      	ldr	r2, [pc, #416]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b66      	ldr	r3, [pc, #408]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a65      	ldr	r2, [pc, #404]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe fe82 	bl	8001634 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fe7e 	bl	8001634 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e207      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fe6e 	bl	8001634 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fe6a 	bl	8001634 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	@ 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f3      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b51      	ldr	r3, [pc, #324]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800298a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b47      	ldr	r3, [pc, #284]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b44      	ldr	r3, [pc, #272]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b41      	ldr	r3, [pc, #260]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c7      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4937      	ldr	r1, [pc, #220]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	@ (8002ab8 <HAL_RCC_OscConfig+0x244>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fe23 	bl	8001634 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7fe fe1f 	bl	8001634 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a8      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b28      	ldr	r3, [pc, #160]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4925      	ldr	r1, [pc, #148]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <HAL_RCC_OscConfig+0x244>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fe02 	bl	8001634 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7fe fdfe 	bl	8001634 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e187      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fde2 	bl	8001634 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7fe fdde 	bl	8001634 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e167      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fdcb 	bl	8001634 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fdc7 	bl	8001634 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e150      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	4b88      	ldr	r3, [pc, #544]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ea      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8097 	beq.w	8002c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b81      	ldr	r3, [pc, #516]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b7d      	ldr	r3, [pc, #500]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afa:	4b7a      	ldr	r3, [pc, #488]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b77      	ldr	r3, [pc, #476]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b74      	ldr	r3, [pc, #464]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fd87 	bl	8001634 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7fe fd83 	bl	8001634 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2ea>
 8002b50:	4b64      	ldr	r3, [pc, #400]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	4a63      	ldr	r2, [pc, #396]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x30c>
 8002b66:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b72:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b80:	4b58      	ldr	r3, [pc, #352]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	4a57      	ldr	r2, [pc, #348]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8c:	4b55      	ldr	r3, [pc, #340]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a54      	ldr	r2, [pc, #336]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fd48 	bl	8001634 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fd44 	bl	8001634 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0cb      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b49      	ldr	r3, [pc, #292]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x334>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fd32 	bl	8001634 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fd2e 	bl	8001634 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0b5      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	4a38      	ldr	r2, [pc, #224]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a1 	beq.w	8002d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c12:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d05c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d141      	bne.n	8002caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd02 	bl	8001634 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fcfe 	bl	8001634 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e087      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b27      	ldr	r3, [pc, #156]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	491b      	ldr	r1, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe fcd7 	bl	8001634 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe fcd3 	bl	8001634 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e05c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x416>
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fcc0 	bl	8001634 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe fcbc 	bl	8001634 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e045      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x444>
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e038      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7fe fbee 	bl	8001634 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7fe fbea 	bl	8001634 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fb4e 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08003f30 	.word	0x08003f30
 8002f28:	20000010 	.word	0x20000010
 8002f2c:	20000014 	.word	0x20000014

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b094      	sub	sp, #80	@ 0x50
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b79      	ldr	r3, [pc, #484]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80e1 	bhi.w	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0db      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b73      	ldr	r3, [pc, #460]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f68:	e0db      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b73      	ldr	r3, [pc, #460]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f6e:	e0d8      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4621      	mov	r1, r4
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	6139      	str	r1, [r7, #16]
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4651      	mov	r1, sl
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fe8:	4659      	mov	r1, fp
 8002fea:	eb63 0901 	sbc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb18 0303 	adds.w	r3, r8, r3
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	462b      	mov	r3, r5
 8003010:	eb49 0303 	adc.w	r3, r9, r3
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003022:	4629      	mov	r1, r5
 8003024:	024b      	lsls	r3, r1, #9
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800302c:	4621      	mov	r1, r4
 800302e:	024a      	lsls	r2, r1, #9
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800303a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800303c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003040:	f7fd f8c2 	bl	80001c8 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800304c:	e058      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	2200      	movs	r2, #0
 8003056:	4618      	mov	r0, r3
 8003058:	4611      	mov	r1, r2
 800305a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
 8003064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	f04f 0000 	mov.w	r0, #0
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	0159      	lsls	r1, r3, #5
 8003076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307a:	0150      	lsls	r0, r2, #5
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4641      	mov	r1, r8
 8003082:	ebb2 0a01 	subs.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb63 0b01 	sbc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800309c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a0:	ebb2 040a 	subs.w	r4, r2, sl
 80030a4:	eb63 050b 	sbc.w	r5, r3, fp
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ea:	2200      	movs	r2, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	61fa      	str	r2, [r7, #28]
 80030f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f4:	f7fd f868 	bl	80001c8 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003124:	4618      	mov	r0, r3
 8003126:	3750      	adds	r7, #80	@ 0x50
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <LL_GPIO_SetPinMode>:
{
 800313c:	b480      	push	{r7}
 800313e:	b08b      	sub	sp, #44	@ 0x2c
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	613b      	str	r3, [r7, #16]
  return result;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003162:	2320      	movs	r3, #32
 8003164:	e003      	b.n	800316e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2103      	movs	r1, #3
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	401a      	ands	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	61fb      	str	r3, [r7, #28]
  return result;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e003      	b.n	800319c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	372c      	adds	r7, #44	@ 0x2c
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_GPIO_SetPinOutputType>:
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	605a      	str	r2, [r3, #4]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_GPIO_SetPinSpeed>:
{
 80031e6:	b480      	push	{r7}
 80031e8:	b08b      	sub	sp, #44	@ 0x2c
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	613b      	str	r3, [r7, #16]
  return result;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e003      	b.n	8003218 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2103      	movs	r1, #3
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	401a      	ands	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	61fb      	str	r3, [r7, #28]
  return result;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800323a:	2320      	movs	r3, #32
 800323c:	e003      	b.n	8003246 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	431a      	orrs	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	372c      	adds	r7, #44	@ 0x2c
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_GPIO_SetPinPull>:
{
 8003260:	b480      	push	{r7}
 8003262:	b08b      	sub	sp, #44	@ 0x2c
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	613b      	str	r3, [r7, #16]
  return result;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003286:	2320      	movs	r3, #32
 8003288:	e003      	b.n	8003292 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2103      	movs	r1, #3
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	401a      	ands	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	61fb      	str	r3, [r7, #28]
  return result;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e003      	b.n	80032c0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	60da      	str	r2, [r3, #12]
}
 80032ce:	bf00      	nop
 80032d0:	372c      	adds	r7, #44	@ 0x2c
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_GPIO_SetAFPin_0_7>:
{
 80032da:	b480      	push	{r7}
 80032dc:	b08b      	sub	sp, #44	@ 0x2c
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	613b      	str	r3, [r7, #16]
  return result;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	e003      	b.n	800330c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	210f      	movs	r1, #15
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	401a      	ands	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	61fb      	str	r3, [r7, #28]
  return result;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e003      	b.n	800333a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	431a      	orrs	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	372c      	adds	r7, #44	@ 0x2c
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_GPIO_SetAFPin_8_15>:
{
 8003354:	b480      	push	{r7}
 8003356:	b08b      	sub	sp, #44	@ 0x2c
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	613b      	str	r3, [r7, #16]
  return result;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	e003      	b.n	8003388 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	210f      	movs	r1, #15
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	401a      	ands	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	61fb      	str	r3, [r7, #28]
  return result;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80033ac:	2320      	movs	r3, #32
 80033ae:	e003      	b.n	80033b8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80033c6:	bf00      	nop
 80033c8:	372c      	adds	r7, #44	@ 0x2c
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b08a      	sub	sp, #40	@ 0x28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	617b      	str	r3, [r7, #20]
  return result;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <LL_GPIO_Init+0x2e>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e003      	b.n	8003408 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800340a:	e057      	b.n	80034bc <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	4013      	ands	r3, r2
 800341a:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d049      	beq.n	80034b6 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d003      	beq.n	8003432 <LL_GPIO_Init+0x60>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d10d      	bne.n	800344e <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	461a      	mov	r2, r3
 8003438:	6a39      	ldr	r1, [r7, #32]
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fed3 	bl	80031e6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	461a      	mov	r2, r3
 8003446:	6a39      	ldr	r1, [r7, #32]
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff feb4 	bl	80031b6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	461a      	mov	r2, r3
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ff02 	bl	8003260 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d121      	bne.n	80034a8 <LL_GPIO_Init+0xd6>
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	60bb      	str	r3, [r7, #8]
  return result;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <LL_GPIO_Init+0xac>
    return 32U;
 800347a:	2320      	movs	r3, #32
 800347c:	e003      	b.n	8003486 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003486:	2b07      	cmp	r3, #7
 8003488:	d807      	bhi.n	800349a <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	461a      	mov	r2, r3
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ff21 	bl	80032da <LL_GPIO_SetAFPin_0_7>
 8003498:	e006      	b.n	80034a8 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	461a      	mov	r2, r3
 80034a0:	6a39      	ldr	r1, [r7, #32]
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff56 	bl	8003354 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	461a      	mov	r2, r3
 80034ae:	6a39      	ldr	r1, [r7, #32]
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fe43 	bl	800313c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	3301      	adds	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1a0      	bne.n	800340c <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3728      	adds	r7, #40	@ 0x28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <LL_RCC_GetSysClkSource+0x18>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800

080034f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034f4:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <LL_RCC_GetAHBPrescaler+0x18>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800

0800350c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003510:	4b04      	ldr	r3, [pc, #16]	@ (8003524 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800

08003528 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <LL_RCC_GetAPB2Prescaler+0x18>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003548:	4b04      	ldr	r3, [pc, #16]	@ (800355c <LL_RCC_PLL_GetMainSource+0x18>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800

08003560 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003564:	4b04      	ldr	r3, [pc, #16]	@ (8003578 <LL_RCC_PLL_GetN+0x18>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40023800 	.word	0x40023800

0800357c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003580:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <LL_RCC_PLL_GetP+0x18>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800

08003598 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800359c:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <LL_RCC_PLL_GetDivider+0x18>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800

080035b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80035bc:	f000 f820 	bl	8003600 <RCC_GetSystemClockFreq>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f840 	bl	8003650 <RCC_GetHCLKClockFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f84e 	bl	800367c <RCC_GetPCLK1ClockFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 f85a 	bl	80036a4 <RCC_GetPCLK2ClockFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	60da      	str	r2, [r3, #12]
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800360a:	f7ff ff63 	bl	80034d4 <LL_RCC_GetSysClkSource>
 800360e:	4603      	mov	r3, r0
 8003610:	2b08      	cmp	r3, #8
 8003612:	d00c      	beq.n	800362e <RCC_GetSystemClockFreq+0x2e>
 8003614:	2b08      	cmp	r3, #8
 8003616:	d80f      	bhi.n	8003638 <RCC_GetSystemClockFreq+0x38>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <RCC_GetSystemClockFreq+0x22>
 800361c:	2b04      	cmp	r3, #4
 800361e:	d003      	beq.n	8003628 <RCC_GetSystemClockFreq+0x28>
 8003620:	e00a      	b.n	8003638 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003622:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <RCC_GetSystemClockFreq+0x48>)
 8003624:	607b      	str	r3, [r7, #4]
      break;
 8003626:	e00a      	b.n	800363e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003628:	4b08      	ldr	r3, [pc, #32]	@ (800364c <RCC_GetSystemClockFreq+0x4c>)
 800362a:	607b      	str	r3, [r7, #4]
      break;
 800362c:	e007      	b.n	800363e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800362e:	2008      	movs	r0, #8
 8003630:	f000 f84c 	bl	80036cc <RCC_PLL_GetFreqDomain_SYS>
 8003634:	6078      	str	r0, [r7, #4]
      break;
 8003636:	e002      	b.n	800363e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <RCC_GetSystemClockFreq+0x48>)
 800363a:	607b      	str	r3, [r7, #4]
      break;
 800363c:	bf00      	nop
  }

  return frequency;
 800363e:	687b      	ldr	r3, [r7, #4]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	00f42400 	.word	0x00f42400
 800364c:	007a1200 	.word	0x007a1200

08003650 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003658:	f7ff ff4a 	bl	80034f0 <LL_RCC_GetAHBPrescaler>
 800365c:	4603      	mov	r3, r0
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <RCC_GetHCLKClockFreq+0x28>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	461a      	mov	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	40d3      	lsrs	r3, r2
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08003f30 	.word	0x08003f30

0800367c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003684:	f7ff ff42 	bl	800350c <LL_RCC_GetAPB1Prescaler>
 8003688:	4603      	mov	r3, r0
 800368a:	0a9b      	lsrs	r3, r3, #10
 800368c:	4a04      	ldr	r2, [pc, #16]	@ (80036a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	461a      	mov	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	40d3      	lsrs	r3, r2
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	08003f40 	.word	0x08003f40

080036a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80036ac:	f7ff ff3c 	bl	8003528 <LL_RCC_GetAPB2Prescaler>
 80036b0:	4603      	mov	r3, r0
 80036b2:	0b5b      	lsrs	r3, r3, #13
 80036b4:	4a04      	ldr	r2, [pc, #16]	@ (80036c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	461a      	mov	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	40d3      	lsrs	r3, r2
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	08003f40 	.word	0x08003f40

080036cc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80036e0:	f7ff ff30 	bl	8003544 <LL_RCC_PLL_GetMainSource>
 80036e4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d004      	beq.n	80036f6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036f2:	d003      	beq.n	80036fc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80036f4:	e005      	b.n	8003702 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80036f6:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80036f8:	617b      	str	r3, [r7, #20]
      break;
 80036fa:	e005      	b.n	8003708 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80036fc:	4b11      	ldr	r3, [pc, #68]	@ (8003744 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80036fe:	617b      	str	r3, [r7, #20]
      break;
 8003700:	e002      	b.n	8003708 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003702:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003704:	617b      	str	r3, [r7, #20]
      break;
 8003706:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b08      	cmp	r3, #8
 800370c:	d113      	bne.n	8003736 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800370e:	f7ff ff43 	bl	8003598 <LL_RCC_PLL_GetDivider>
 8003712:	4602      	mov	r2, r0
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fbb3 f4f2 	udiv	r4, r3, r2
 800371a:	f7ff ff21 	bl	8003560 <LL_RCC_PLL_GetN>
 800371e:	4603      	mov	r3, r0
 8003720:	fb03 f404 	mul.w	r4, r3, r4
 8003724:	f7ff ff2a 	bl	800357c <LL_RCC_PLL_GetP>
 8003728:	4603      	mov	r3, r0
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	3301      	adds	r3, #1
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	fbb4 f3f3 	udiv	r3, r4, r3
 8003734:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003736:	693b      	ldr	r3, [r7, #16]
}
 8003738:	4618      	mov	r0, r3
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200

08003748 <LL_TIM_SetPrescaler>:
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_TIM_SetAutoReload>:
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_TIM_SetRepetitionCounter>:
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	615a      	str	r2, [r3, #20]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a3d      	ldr	r2, [pc, #244]	@ (80038c4 <LL_TIM_Init+0x108>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <LL_TIM_Init+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037da:	d00f      	beq.n	80037fc <LL_TIM_Init+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3a      	ldr	r2, [pc, #232]	@ (80038c8 <LL_TIM_Init+0x10c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00b      	beq.n	80037fc <LL_TIM_Init+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a39      	ldr	r2, [pc, #228]	@ (80038cc <LL_TIM_Init+0x110>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <LL_TIM_Init+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a38      	ldr	r2, [pc, #224]	@ (80038d0 <LL_TIM_Init+0x114>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <LL_TIM_Init+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a37      	ldr	r2, [pc, #220]	@ (80038d4 <LL_TIM_Init+0x118>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d106      	bne.n	800380a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a2d      	ldr	r2, [pc, #180]	@ (80038c4 <LL_TIM_Init+0x108>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02b      	beq.n	800386a <LL_TIM_Init+0xae>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003818:	d027      	beq.n	800386a <LL_TIM_Init+0xae>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a2a      	ldr	r2, [pc, #168]	@ (80038c8 <LL_TIM_Init+0x10c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d023      	beq.n	800386a <LL_TIM_Init+0xae>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a29      	ldr	r2, [pc, #164]	@ (80038cc <LL_TIM_Init+0x110>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01f      	beq.n	800386a <LL_TIM_Init+0xae>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a28      	ldr	r2, [pc, #160]	@ (80038d0 <LL_TIM_Init+0x114>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01b      	beq.n	800386a <LL_TIM_Init+0xae>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a27      	ldr	r2, [pc, #156]	@ (80038d4 <LL_TIM_Init+0x118>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d017      	beq.n	800386a <LL_TIM_Init+0xae>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a26      	ldr	r2, [pc, #152]	@ (80038d8 <LL_TIM_Init+0x11c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <LL_TIM_Init+0xae>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a25      	ldr	r2, [pc, #148]	@ (80038dc <LL_TIM_Init+0x120>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00f      	beq.n	800386a <LL_TIM_Init+0xae>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a24      	ldr	r2, [pc, #144]	@ (80038e0 <LL_TIM_Init+0x124>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00b      	beq.n	800386a <LL_TIM_Init+0xae>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a23      	ldr	r2, [pc, #140]	@ (80038e4 <LL_TIM_Init+0x128>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <LL_TIM_Init+0xae>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a22      	ldr	r2, [pc, #136]	@ (80038e8 <LL_TIM_Init+0x12c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <LL_TIM_Init+0xae>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a21      	ldr	r2, [pc, #132]	@ (80038ec <LL_TIM_Init+0x130>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d106      	bne.n	8003878 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff6d 	bl	8003764 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff59 	bl	8003748 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a0a      	ldr	r2, [pc, #40]	@ (80038c4 <LL_TIM_Init+0x108>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <LL_TIM_Init+0xea>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a0c      	ldr	r2, [pc, #48]	@ (80038d4 <LL_TIM_Init+0x118>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d105      	bne.n	80038b2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff67 	bl	8003780 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ff72 	bl	800379c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800
 80038e4:	40001800 	.word	0x40001800
 80038e8:	40001c00 	.word	0x40001c00
 80038ec:	40002000 	.word	0x40002000

080038f0 <LL_USART_IsEnabled>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_USART_SetStopBitsLength>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	611a      	str	r2, [r3, #16]
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_USART_SetHWFlowCtrl>:
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	615a      	str	r2, [r3, #20]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_USART_SetBaudRate>:
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b0c0      	sub	sp, #256	@ 0x100
 800396a:	af00      	add	r7, sp, #0
 800396c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003970:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8003974:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003978:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003984:	f040 810c 	bne.w	8003ba0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003988:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800398c:	2200      	movs	r2, #0
 800398e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003992:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003996:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800399a:	4622      	mov	r2, r4
 800399c:	462b      	mov	r3, r5
 800399e:	1891      	adds	r1, r2, r2
 80039a0:	6639      	str	r1, [r7, #96]	@ 0x60
 80039a2:	415b      	adcs	r3, r3
 80039a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80039a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80039aa:	4621      	mov	r1, r4
 80039ac:	eb12 0801 	adds.w	r8, r2, r1
 80039b0:	4629      	mov	r1, r5
 80039b2:	eb43 0901 	adc.w	r9, r3, r1
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ca:	4690      	mov	r8, r2
 80039cc:	4699      	mov	r9, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	eb18 0303 	adds.w	r3, r8, r3
 80039d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039d8:	462b      	mov	r3, r5
 80039da:	eb49 0303 	adc.w	r3, r9, r3
 80039de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80039e6:	2200      	movs	r2, #0
 80039e8:	469a      	mov	sl, r3
 80039ea:	4693      	mov	fp, r2
 80039ec:	eb1a 030a 	adds.w	r3, sl, sl
 80039f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039f2:	eb4b 030b 	adc.w	r3, fp, fp
 80039f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a00:	f7fc fbe2 	bl	80001c8 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <LL_USART_SetBaudRate+0x238>)
 8003a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	b29c      	uxth	r4, r3
 8003a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a20:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a24:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	6539      	str	r1, [r7, #80]	@ 0x50
 8003a30:	415b      	adcs	r3, r3
 8003a32:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a38:	4641      	mov	r1, r8
 8003a3a:	1851      	adds	r1, r2, r1
 8003a3c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a3e:	4649      	mov	r1, r9
 8003a40:	414b      	adcs	r3, r1
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003a50:	4659      	mov	r1, fp
 8003a52:	00cb      	lsls	r3, r1, #3
 8003a54:	4651      	mov	r1, sl
 8003a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	00ca      	lsls	r2, r1, #3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	4642      	mov	r2, r8
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	460a      	mov	r2, r1
 8003a70:	eb42 0303 	adc.w	r3, r2, r3
 8003a74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a82:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003a86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	18db      	adds	r3, r3, r3
 8003a8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a90:	4613      	mov	r3, r2
 8003a92:	eb42 0303 	adc.w	r3, r2, r3
 8003a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a9c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003aa0:	f7fc fb92 	bl	80001c8 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8003b9c <LL_USART_SetBaudRate+0x238>)
 8003aac:	fba3 2301 	umull	r2, r3, r3, r1
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	2264      	movs	r2, #100	@ 0x64
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	1acb      	subs	r3, r1, r3
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ac0:	4b36      	ldr	r3, [pc, #216]	@ (8003b9c <LL_USART_SetBaudRate+0x238>)
 8003ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4423      	add	r3, r4
 8003ad6:	b29c      	uxth	r4, r3
 8003ad8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ae2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ae6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8003aea:	4642      	mov	r2, r8
 8003aec:	464b      	mov	r3, r9
 8003aee:	1891      	adds	r1, r2, r2
 8003af0:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003af2:	415b      	adcs	r3, r3
 8003af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003afa:	4641      	mov	r1, r8
 8003afc:	1851      	adds	r1, r2, r1
 8003afe:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b00:	4649      	mov	r1, r9
 8003b02:	414b      	adcs	r3, r1
 8003b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b12:	4659      	mov	r1, fp
 8003b14:	00cb      	lsls	r3, r1, #3
 8003b16:	4651      	mov	r1, sl
 8003b18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	00ca      	lsls	r2, r1, #3
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	4603      	mov	r3, r0
 8003b26:	4642      	mov	r2, r8
 8003b28:	189b      	adds	r3, r3, r2
 8003b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b2e:	464b      	mov	r3, r9
 8003b30:	460a      	mov	r2, r1
 8003b32:	eb42 0303 	adc.w	r3, r2, r3
 8003b36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b44:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003b48:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	18db      	adds	r3, r3, r3
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b52:	4613      	mov	r3, r2
 8003b54:	eb42 0303 	adc.w	r3, r2, r3
 8003b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b5e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003b62:	f7fc fb31 	bl	80001c8 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <LL_USART_SetBaudRate+0x238>)
 8003b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2164      	movs	r1, #100	@ 0x64
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	3332      	adds	r3, #50	@ 0x32
 8003b7e:	4a07      	ldr	r2, [pc, #28]	@ (8003b9c <LL_USART_SetBaudRate+0x238>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4423      	add	r3, r4
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b98:	609a      	str	r2, [r3, #8]
}
 8003b9a:	e108      	b.n	8003dae <LL_USART_SetBaudRate+0x44a>
 8003b9c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003ba0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003baa:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bae:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8003bb2:	4642      	mov	r2, r8
 8003bb4:	464b      	mov	r3, r9
 8003bb6:	1891      	adds	r1, r2, r2
 8003bb8:	6239      	str	r1, [r7, #32]
 8003bba:	415b      	adcs	r3, r3
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	1854      	adds	r4, r2, r1
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	eb43 0501 	adc.w	r5, r3, r1
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	00eb      	lsls	r3, r5, #3
 8003bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bda:	00e2      	lsls	r2, r4, #3
 8003bdc:	4614      	mov	r4, r2
 8003bde:	461d      	mov	r5, r3
 8003be0:	4643      	mov	r3, r8
 8003be2:	18e3      	adds	r3, r4, r3
 8003be4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003be8:	464b      	mov	r3, r9
 8003bea:	eb45 0303 	adc.w	r3, r5, r3
 8003bee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003bf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bfc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	008b      	lsls	r3, r1, #2
 8003c10:	4621      	mov	r1, r4
 8003c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c16:	4621      	mov	r1, r4
 8003c18:	008a      	lsls	r2, r1, #2
 8003c1a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003c1e:	f7fc fad3 	bl	80001c8 <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4b65      	ldr	r3, [pc, #404]	@ (8003dbc <LL_USART_SetBaudRate+0x458>)
 8003c28:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	b29c      	uxth	r4, r3
 8003c34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c42:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8003c46:	4642      	mov	r2, r8
 8003c48:	464b      	mov	r3, r9
 8003c4a:	1891      	adds	r1, r2, r2
 8003c4c:	61b9      	str	r1, [r7, #24]
 8003c4e:	415b      	adcs	r3, r3
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c56:	4641      	mov	r1, r8
 8003c58:	1851      	adds	r1, r2, r1
 8003c5a:	6139      	str	r1, [r7, #16]
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	414b      	adcs	r3, r1
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c6e:	4659      	mov	r1, fp
 8003c70:	00cb      	lsls	r3, r1, #3
 8003c72:	4651      	mov	r1, sl
 8003c74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c78:	4651      	mov	r1, sl
 8003c7a:	00ca      	lsls	r2, r1, #3
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4603      	mov	r3, r0
 8003c82:	4642      	mov	r2, r8
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c8a:	464b      	mov	r3, r9
 8003c8c:	460a      	mov	r2, r1
 8003c8e:	eb42 0303 	adc.w	r3, r2, r3
 8003c92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ca0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	008b      	lsls	r3, r1, #2
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cba:	4641      	mov	r1, r8
 8003cbc:	008a      	lsls	r2, r1, #2
 8003cbe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003cc2:	f7fc fa81 	bl	80001c8 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dbc <LL_USART_SetBaudRate+0x458>)
 8003cce:	fba3 2301 	umull	r2, r3, r3, r1
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2264      	movs	r2, #100	@ 0x64
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	1acb      	subs	r3, r1, r3
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	3332      	adds	r3, #50	@ 0x32
 8003ce0:	4a36      	ldr	r2, [pc, #216]	@ (8003dbc <LL_USART_SetBaudRate+0x458>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	4423      	add	r3, r4
 8003cf2:	b29c      	uxth	r4, r3
 8003cf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cfc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cfe:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d02:	4642      	mov	r2, r8
 8003d04:	464b      	mov	r3, r9
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	4641      	mov	r1, r8
 8003d14:	1851      	adds	r1, r2, r1
 8003d16:	6039      	str	r1, [r7, #0]
 8003d18:	4649      	mov	r1, r9
 8003d1a:	414b      	adcs	r3, r1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d2a:	4659      	mov	r1, fp
 8003d2c:	00cb      	lsls	r3, r1, #3
 8003d2e:	4651      	mov	r1, sl
 8003d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d34:	4651      	mov	r1, sl
 8003d36:	00ca      	lsls	r2, r1, #3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4642      	mov	r2, r8
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d44:	464b      	mov	r3, r9
 8003d46:	460a      	mov	r2, r1
 8003d48:	eb42 0303 	adc.w	r3, r2, r3
 8003d4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003d52:	2200      	movs	r2, #0
 8003d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003d64:	4649      	mov	r1, r9
 8003d66:	008b      	lsls	r3, r1, #2
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6e:	4641      	mov	r1, r8
 8003d70:	008a      	lsls	r2, r1, #2
 8003d72:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003d76:	f7fc fa27 	bl	80001c8 <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dbc <LL_USART_SetBaudRate+0x458>)
 8003d80:	fba3 1302 	umull	r1, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	2164      	movs	r1, #100	@ 0x64
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	3332      	adds	r3, #50	@ 0x32
 8003d92:	4a0a      	ldr	r2, [pc, #40]	@ (8003dbc <LL_USART_SetBaudRate+0x458>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	4423      	add	r3, r4
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	461a      	mov	r2, r3
 8003da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dac:	609a      	str	r2, [r3, #8]
}
 8003dae:	bf00      	nop
 8003db0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003db4:	46bd      	mov	sp, r7
 8003db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dba:	bf00      	nop
 8003dbc:	51eb851f 	.word	0x51eb851f

08003dc0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fd8c 	bl	80038f0 <LL_USART_IsEnabled>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d15e      	bne.n	8003e9c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003de6:	f023 030c 	bic.w	r3, r3, #12
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	6851      	ldr	r1, [r2, #4]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	68d2      	ldr	r2, [r2, #12]
 8003df2:	4311      	orrs	r1, r2
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	6912      	ldr	r2, [r2, #16]
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	6992      	ldr	r2, [r2, #24]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff fd83 	bl	8003918 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fd90 	bl	800393e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fbc6 	bl	80035b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <LL_USART_Init+0xe8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d102      	bne.n	8003e36 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	e021      	b.n	8003e7a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1c      	ldr	r2, [pc, #112]	@ (8003eac <LL_USART_Init+0xec>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d102      	bne.n	8003e44 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	e01a      	b.n	8003e7a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb0 <LL_USART_Init+0xf0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d102      	bne.n	8003e52 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e013      	b.n	8003e7a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a17      	ldr	r2, [pc, #92]	@ (8003eb4 <LL_USART_Init+0xf4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d102      	bne.n	8003e60 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	e00c      	b.n	8003e7a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a15      	ldr	r2, [pc, #84]	@ (8003eb8 <LL_USART_Init+0xf8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d102      	bne.n	8003e6e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e005      	b.n	8003e7a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a12      	ldr	r2, [pc, #72]	@ (8003ebc <LL_USART_Init+0xfc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d009      	beq.n	8003e9c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003e94:	69b9      	ldr	r1, [r7, #24]
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fd64 	bl	8003964 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40011000 	.word	0x40011000
 8003eac:	40004400 	.word	0x40004400
 8003eb0:	40004800 	.word	0x40004800
 8003eb4:	40011400 	.word	0x40011400
 8003eb8:	40004c00 	.word	0x40004c00
 8003ebc:	40005000 	.word	0x40005000

08003ec0 <memset>:
 8003ec0:	4402      	add	r2, r0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8003f08 <__libc_init_array+0x38>)
 8003ed4:	4c0d      	ldr	r4, [pc, #52]	@ (8003f0c <__libc_init_array+0x3c>)
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	2600      	movs	r6, #0
 8003edc:	42a6      	cmp	r6, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8003f10 <__libc_init_array+0x40>)
 8003ee2:	4c0c      	ldr	r4, [pc, #48]	@ (8003f14 <__libc_init_array+0x44>)
 8003ee4:	f000 f818 	bl	8003f18 <_init>
 8003ee8:	1b64      	subs	r4, r4, r5
 8003eea:	10a4      	asrs	r4, r4, #2
 8003eec:	2600      	movs	r6, #0
 8003eee:	42a6      	cmp	r6, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef8:	4798      	blx	r3
 8003efa:	3601      	adds	r6, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f02:	4798      	blx	r3
 8003f04:	3601      	adds	r6, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	08003f50 	.word	0x08003f50
 8003f0c:	08003f50 	.word	0x08003f50
 8003f10:	08003f50 	.word	0x08003f50
 8003f14:	08003f54 	.word	0x08003f54

08003f18 <_init>:
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	bf00      	nop
 8003f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1e:	bc08      	pop	{r3}
 8003f20:	469e      	mov	lr, r3
 8003f22:	4770      	bx	lr

08003f24 <_fini>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr
