
ARM_F407_Leanning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003c74  08003c74  00004c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c8c  08003c8c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c8c  08003c8c  00004c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c94  08003c94  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c98  08003c98  00004c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c9c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3c5  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c5  00000000  00000000  00012401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  00014bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa7  00000000  00000000  000159d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023314  00000000  00000000  0001647f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010803  00000000  00000000  00039793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b5f  00000000  00000000  00049f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011caf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039dc  00000000  00000000  0011cb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00120514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c5c 	.word	0x08003c5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c5c 	.word	0x08003c5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000504:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8000506:	2300      	movs	r3, #0
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	e00a      	b.n	8000522 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	89fb      	ldrh	r3, [r7, #14]
 8000518:	1a9b      	subs	r3, r3, r2
 800051a:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	3301      	adds	r3, #1
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	3b02      	subs	r3, #2
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	429a      	cmp	r2, r3
 800052a:	dbef      	blt.n	800050c <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	321e      	adds	r2, #30
 8000534:	7812      	ldrb	r2, [r2, #0]
 8000536:	4293      	cmp	r3, r2
 8000538:	d109      	bne.n	800054e <iBus_Check_CHKSUM+0x5a>
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	b29b      	uxth	r3, r3
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	321f      	adds	r2, #31
 8000544:	7812      	ldrb	r2, [r2, #0]
 8000546:	4293      	cmp	r3, r2
 8000548:	d101      	bne.n	800054e <iBus_Check_CHKSUM+0x5a>
 800054a:	2301      	movs	r3, #1
 800054c:	e000      	b.n	8000550 <iBus_Check_CHKSUM+0x5c>
 800054e:	2300      	movs	r3, #0
 8000550:	b2db      	uxtb	r3, r3
}
 8000552:	4618      	mov	r0, r3
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3302      	adds	r3, #2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b21a      	sxth	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3303      	adds	r3, #3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b21b      	sxth	r3, r3
 8000578:	021b      	lsls	r3, r3, #8
 800057a:	b21b      	sxth	r3, r3
 800057c:	4313      	orrs	r3, r2
 800057e:	b21b      	sxth	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000586:	b29a      	uxth	r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3304      	adds	r3, #4
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b21a      	sxth	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3305      	adds	r3, #5
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b21b      	sxth	r3, r3
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	b21b      	sxth	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3306      	adds	r3, #6
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3307      	adds	r3, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b21b      	sxth	r3, r3
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b21b      	sxth	r3, r3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3308      	adds	r3, #8
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b21a      	sxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3309      	adds	r3, #9
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	330a      	adds	r3, #10
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b21a      	sxth	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	330b      	adds	r3, #11
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b21b      	sxth	r3, r3
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21b      	sxth	r3, r3
 800060c:	4313      	orrs	r3, r2
 800060e:	b21b      	sxth	r3, r3
 8000610:	b29b      	uxth	r3, r3
 8000612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000616:	b29a      	uxth	r2, r3
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	330c      	adds	r3, #12
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b21a      	sxth	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	330d      	adds	r3, #13
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b21b      	sxth	r3, r3
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	b21b      	sxth	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	b21b      	sxth	r3, r3
 8000634:	b29b      	uxth	r3, r3
 8000636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800063a:	b29a      	uxth	r2, r3
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[14] | data[15]<<8) & 0x0fff;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	330e      	adds	r3, #14
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b21a      	sxth	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	330f      	adds	r3, #15
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b21b      	sxth	r3, r3
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21b      	sxth	r3, r3
 8000654:	4313      	orrs	r3, r2
 8000656:	b21b      	sxth	r3, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800065e:	b29a      	uxth	r2, r3
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	81da      	strh	r2, [r3, #14]

	iBus->FailSafe = (data[13] >> 4);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330d      	adds	r3, #13
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	091b      	lsrs	r3, r3, #4
 800066c:	b2da      	uxtb	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	751a      	strb	r2, [r3, #20]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_CAN1_Init+0x64>)
 8000686:	4a18      	ldr	r2, [pc, #96]	@ (80006e8 <MX_CAN1_Init+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_CAN1_Init+0x64>)
 800068c:	2206      	movs	r2, #6
 800068e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_CAN1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_CAN1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_CAN1_Init+0x64>)
 800069e:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80006a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006a6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_CAN1_Init+0x64>)
 80006d2:	f000 fe15 	bl	8001300 <HAL_CAN_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006dc:	f000 fa08 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000040 	.word	0x20000040
 80006e8:	40006400 	.word	0x40006400

080006ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	@ (8000770 <HAL_CAN_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12c      	bne.n	8000768 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <HAL_CAN_MspInit+0x88>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000716:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <HAL_CAN_MspInit+0x88>)
 8000718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800071c:	6413      	str	r3, [r2, #64]	@ 0x40
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <HAL_CAN_MspInit+0x88>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <HAL_CAN_MspInit+0x88>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a10      	ldr	r2, [pc, #64]	@ (8000774 <HAL_CAN_MspInit+0x88>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <HAL_CAN_MspInit+0x88>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000746:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000758:	2309      	movs	r3, #9
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <HAL_CAN_MspInit+0x8c>)
 8000764:	f001 f8c2 	bl	80018ec <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	@ 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40006400 	.word	0x40006400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000788:	4907      	ldr	r1, [pc, #28]	@ (80007a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4013      	ands	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80007b0:	2080      	movs	r0, #128	@ 0x80
 80007b2:	f7ff ffe3 	bl	800077c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f7ff ffe0 	bl	800077c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff ffdd 	bl	800077c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80007c2:	2008      	movs	r0, #8
 80007c4:	f7ff ffda 	bl	800077c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff ffd7 	bl	800077c <LL_AHB1_GRP1_EnableClock>

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b089      	sub	sp, #36	@ 0x24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	330c      	adds	r3, #12
 80007de:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	e853 3f00 	ldrex	r3, [r3]
 80007e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	f043 0320 	orr.w	r3, r3, #32
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	330c      	adds	r3, #12
 80007f4:	69fa      	ldr	r2, [r7, #28]
 80007f6:	61ba      	str	r2, [r7, #24]
 80007f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007fa:	6979      	ldr	r1, [r7, #20]
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	e841 2300 	strex	r3, r2, [r1]
 8000802:	613b      	str	r3, [r7, #16]
   return(result);
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1e7      	bne.n	80007da <LL_USART_EnableIT_RXNE+0x8>
}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3724      	adds	r7, #36	@ 0x24
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fcd9 	bl	80011d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f8fb 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f7ff ffc1 	bl	80007ac <MX_GPIO_Init>
  MX_CAN1_Init();
 800082a:	f7ff ff29 	bl	8000680 <MX_CAN1_Init>
  MX_UART5_Init();
 800082e:	f000 fc2f 	bl	8001090 <MX_UART5_Init>
  MX_TIM4_Init();
 8000832:	f000 fa6f 	bl	8000d14 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000836:	4871      	ldr	r0, [pc, #452]	@ (80009fc <main+0x1e4>)
 8000838:	f000 fe5d 	bl	80014f6 <HAL_CAN_Start>

  LL_USART_EnableIT_RXNE(UART5); // bat ngat ibus
 800083c:	4870      	ldr	r0, [pc, #448]	@ (8000a00 <main+0x1e8>)
 800083e:	f7ff ffc8 	bl	80007d2 <LL_USART_EnableIT_RXNE>

    Can_Tx_Header.DLC = 8;
 8000842:	4b70      	ldr	r3, [pc, #448]	@ (8000a04 <main+0x1ec>)
 8000844:	2208      	movs	r2, #8
 8000846:	611a      	str	r2, [r3, #16]
    Can_Tx_Header.ExtId = 0x00000064;
 8000848:	4b6e      	ldr	r3, [pc, #440]	@ (8000a04 <main+0x1ec>)
 800084a:	2264      	movs	r2, #100	@ 0x64
 800084c:	605a      	str	r2, [r3, #4]
    Can_Tx_Header.IDE = CAN_ID_EXT;
 800084e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a04 <main+0x1ec>)
 8000850:	2204      	movs	r2, #4
 8000852:	609a      	str	r2, [r3, #8]
    Can_Tx_Header.RTR = CAN_RTR_DATA;
 8000854:	4b6b      	ldr	r3, [pc, #428]	@ (8000a04 <main+0x1ec>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
    Can_Tx_Header.TransmitGlobalTime = DISABLE;
 800085a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a04 <main+0x1ec>)
 800085c:	2200      	movs	r2, #0
 800085e:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(iBus.SwA == 2000)
 8000860:	4b69      	ldr	r3, [pc, #420]	@ (8000a08 <main+0x1f0>)
 8000862:	891b      	ldrh	r3, [r3, #8]
 8000864:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000868:	f040 8081 	bne.w	800096e <main+0x156>
	  {
		  if(iBus.RV > 1530 || iBus.RV < 1470)
 800086c:	4b66      	ldr	r3, [pc, #408]	@ (8000a08 <main+0x1f0>)
 800086e:	885b      	ldrh	r3, [r3, #2]
 8000870:	f240 52fa 	movw	r2, #1530	@ 0x5fa
 8000874:	4293      	cmp	r3, r2
 8000876:	d805      	bhi.n	8000884 <main+0x6c>
 8000878:	4b63      	ldr	r3, [pc, #396]	@ (8000a08 <main+0x1f0>)
 800087a:	885b      	ldrh	r3, [r3, #2]
 800087c:	f240 52bd 	movw	r2, #1469	@ 0x5bd
 8000880:	4293      	cmp	r3, r2
 8000882:	d843      	bhi.n	800090c <main+0xf4>
		  {
			  int16_t control = (int16_t)(iBus.RV - 1500)/2;
 8000884:	4b60      	ldr	r3, [pc, #384]	@ (8000a08 <main+0x1f0>)
 8000886:	885b      	ldrh	r3, [r3, #2]
 8000888:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800088c:	b29b      	uxth	r3, r3
 800088e:	b21b      	sxth	r3, r3
 8000890:	0fda      	lsrs	r2, r3, #31
 8000892:	4413      	add	r3, r2
 8000894:	105b      	asrs	r3, r3, #1
 8000896:	80fb      	strh	r3, [r7, #6]
			  Can_Tx_Data[0] = (control >> 8) & 0xFF;
 8000898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089c:	121b      	asrs	r3, r3, #8
 800089e:	b21b      	sxth	r3, r3
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b5a      	ldr	r3, [pc, #360]	@ (8000a0c <main+0x1f4>)
 80008a4:	701a      	strb	r2, [r3, #0]
			  Can_Tx_Data[1] = (control >> 8) & 0xFF;
 80008a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008aa:	121b      	asrs	r3, r3, #8
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b56      	ldr	r3, [pc, #344]	@ (8000a0c <main+0x1f4>)
 80008b2:	705a      	strb	r2, [r3, #1]
			  Can_Tx_Data[2] = control & 0xFF;
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b54      	ldr	r3, [pc, #336]	@ (8000a0c <main+0x1f4>)
 80008ba:	709a      	strb	r2, [r3, #2]

			  Can_Tx_Header.ExtId = 0x00000064;
 80008bc:	4b51      	ldr	r3, [pc, #324]	@ (8000a04 <main+0x1ec>)
 80008be:	2264      	movs	r2, #100	@ 0x64
 80008c0:	605a      	str	r2, [r3, #4]
			  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 80008c2:	4b53      	ldr	r3, [pc, #332]	@ (8000a10 <main+0x1f8>)
 80008c4:	4a51      	ldr	r2, [pc, #324]	@ (8000a0c <main+0x1f4>)
 80008c6:	494f      	ldr	r1, [pc, #316]	@ (8000a04 <main+0x1ec>)
 80008c8:	484c      	ldr	r0, [pc, #304]	@ (80009fc <main+0x1e4>)
 80008ca:	f000 fe58 	bl	800157e <HAL_CAN_AddTxMessage>
			  Can_Tx_Header.ExtId = 0x00000065;
 80008ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000a04 <main+0x1ec>)
 80008d0:	2265      	movs	r2, #101	@ 0x65
 80008d2:	605a      	str	r2, [r3, #4]
			  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 80008d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000a10 <main+0x1f8>)
 80008d6:	4a4d      	ldr	r2, [pc, #308]	@ (8000a0c <main+0x1f4>)
 80008d8:	494a      	ldr	r1, [pc, #296]	@ (8000a04 <main+0x1ec>)
 80008da:	4848      	ldr	r0, [pc, #288]	@ (80009fc <main+0x1e4>)
 80008dc:	f000 fe4f 	bl	800157e <HAL_CAN_AddTxMessage>
			  Can_Tx_Header.ExtId = 0x00000040;
 80008e0:	4b48      	ldr	r3, [pc, #288]	@ (8000a04 <main+0x1ec>)
 80008e2:	2240      	movs	r2, #64	@ 0x40
 80008e4:	605a      	str	r2, [r3, #4]
			  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 80008e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000a10 <main+0x1f8>)
 80008e8:	4a48      	ldr	r2, [pc, #288]	@ (8000a0c <main+0x1f4>)
 80008ea:	4946      	ldr	r1, [pc, #280]	@ (8000a04 <main+0x1ec>)
 80008ec:	4843      	ldr	r0, [pc, #268]	@ (80009fc <main+0x1e4>)
 80008ee:	f000 fe46 	bl	800157e <HAL_CAN_AddTxMessage>
			  HAL_Delay(1);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f000 fce0 	bl	80012b8 <HAL_Delay>
			  Can_Tx_Header.ExtId = 0x00000043;
 80008f8:	4b42      	ldr	r3, [pc, #264]	@ (8000a04 <main+0x1ec>)
 80008fa:	2243      	movs	r2, #67	@ 0x43
 80008fc:	605a      	str	r2, [r3, #4]
			  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 80008fe:	4b44      	ldr	r3, [pc, #272]	@ (8000a10 <main+0x1f8>)
 8000900:	4a42      	ldr	r2, [pc, #264]	@ (8000a0c <main+0x1f4>)
 8000902:	4940      	ldr	r1, [pc, #256]	@ (8000a04 <main+0x1ec>)
 8000904:	483d      	ldr	r0, [pc, #244]	@ (80009fc <main+0x1e4>)
 8000906:	f000 fe3a 	bl	800157e <HAL_CAN_AddTxMessage>
		  {
 800090a:	e060      	b.n	80009ce <main+0x1b6>

		  }
		  else
		  {
			  Can_Tx_Data[0] = 0;
 800090c:	4b3f      	ldr	r3, [pc, #252]	@ (8000a0c <main+0x1f4>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
			  Can_Tx_Data[1] = 0;
 8000912:	4b3e      	ldr	r3, [pc, #248]	@ (8000a0c <main+0x1f4>)
 8000914:	2200      	movs	r2, #0
 8000916:	705a      	strb	r2, [r3, #1]
			  Can_Tx_Data[2] = 0;
 8000918:	4b3c      	ldr	r3, [pc, #240]	@ (8000a0c <main+0x1f4>)
 800091a:	2200      	movs	r2, #0
 800091c:	709a      	strb	r2, [r3, #2]

			  Can_Tx_Header.ExtId = 0x00000064;
 800091e:	4b39      	ldr	r3, [pc, #228]	@ (8000a04 <main+0x1ec>)
 8000920:	2264      	movs	r2, #100	@ 0x64
 8000922:	605a      	str	r2, [r3, #4]
			  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 8000924:	4b3a      	ldr	r3, [pc, #232]	@ (8000a10 <main+0x1f8>)
 8000926:	4a39      	ldr	r2, [pc, #228]	@ (8000a0c <main+0x1f4>)
 8000928:	4936      	ldr	r1, [pc, #216]	@ (8000a04 <main+0x1ec>)
 800092a:	4834      	ldr	r0, [pc, #208]	@ (80009fc <main+0x1e4>)
 800092c:	f000 fe27 	bl	800157e <HAL_CAN_AddTxMessage>
			  Can_Tx_Header.ExtId = 0x00000065;
 8000930:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <main+0x1ec>)
 8000932:	2265      	movs	r2, #101	@ 0x65
 8000934:	605a      	str	r2, [r3, #4]
			  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 8000936:	4b36      	ldr	r3, [pc, #216]	@ (8000a10 <main+0x1f8>)
 8000938:	4a34      	ldr	r2, [pc, #208]	@ (8000a0c <main+0x1f4>)
 800093a:	4932      	ldr	r1, [pc, #200]	@ (8000a04 <main+0x1ec>)
 800093c:	482f      	ldr	r0, [pc, #188]	@ (80009fc <main+0x1e4>)
 800093e:	f000 fe1e 	bl	800157e <HAL_CAN_AddTxMessage>
			  Can_Tx_Header.ExtId = 0x00000040;
 8000942:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <main+0x1ec>)
 8000944:	2240      	movs	r2, #64	@ 0x40
 8000946:	605a      	str	r2, [r3, #4]
			  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 8000948:	4b31      	ldr	r3, [pc, #196]	@ (8000a10 <main+0x1f8>)
 800094a:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <main+0x1f4>)
 800094c:	492d      	ldr	r1, [pc, #180]	@ (8000a04 <main+0x1ec>)
 800094e:	482b      	ldr	r0, [pc, #172]	@ (80009fc <main+0x1e4>)
 8000950:	f000 fe15 	bl	800157e <HAL_CAN_AddTxMessage>
			  HAL_Delay(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f000 fcaf 	bl	80012b8 <HAL_Delay>
			  Can_Tx_Header.ExtId = 0x00000043;
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <main+0x1ec>)
 800095c:	2243      	movs	r2, #67	@ 0x43
 800095e:	605a      	str	r2, [r3, #4]
			  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 8000960:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <main+0x1f8>)
 8000962:	4a2a      	ldr	r2, [pc, #168]	@ (8000a0c <main+0x1f4>)
 8000964:	4927      	ldr	r1, [pc, #156]	@ (8000a04 <main+0x1ec>)
 8000966:	4825      	ldr	r0, [pc, #148]	@ (80009fc <main+0x1e4>)
 8000968:	f000 fe09 	bl	800157e <HAL_CAN_AddTxMessage>
 800096c:	e02f      	b.n	80009ce <main+0x1b6>
		  }
	  }
	  else
	  {
		  Can_Tx_Data[0] = 0;
 800096e:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <main+0x1f4>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
		  Can_Tx_Data[1] = 0;
 8000974:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <main+0x1f4>)
 8000976:	2200      	movs	r2, #0
 8000978:	705a      	strb	r2, [r3, #1]
		  Can_Tx_Data[2] = 0;
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <main+0x1f4>)
 800097c:	2200      	movs	r2, #0
 800097e:	709a      	strb	r2, [r3, #2]
		  Can_Tx_Header.ExtId = 0x00000064;
 8000980:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <main+0x1ec>)
 8000982:	2264      	movs	r2, #100	@ 0x64
 8000984:	605a      	str	r2, [r3, #4]
		  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <main+0x1f8>)
 8000988:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <main+0x1f4>)
 800098a:	491e      	ldr	r1, [pc, #120]	@ (8000a04 <main+0x1ec>)
 800098c:	481b      	ldr	r0, [pc, #108]	@ (80009fc <main+0x1e4>)
 800098e:	f000 fdf6 	bl	800157e <HAL_CAN_AddTxMessage>
		  Can_Tx_Header.ExtId = 0x00000065;
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <main+0x1ec>)
 8000994:	2265      	movs	r2, #101	@ 0x65
 8000996:	605a      	str	r2, [r3, #4]
		  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 8000998:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <main+0x1f8>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a0c <main+0x1f4>)
 800099c:	4919      	ldr	r1, [pc, #100]	@ (8000a04 <main+0x1ec>)
 800099e:	4817      	ldr	r0, [pc, #92]	@ (80009fc <main+0x1e4>)
 80009a0:	f000 fded 	bl	800157e <HAL_CAN_AddTxMessage>
		  Can_Tx_Header.ExtId = 0x00000040;
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <main+0x1ec>)
 80009a6:	2240      	movs	r2, #64	@ 0x40
 80009a8:	605a      	str	r2, [r3, #4]
		  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <main+0x1f8>)
 80009ac:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <main+0x1f4>)
 80009ae:	4915      	ldr	r1, [pc, #84]	@ (8000a04 <main+0x1ec>)
 80009b0:	4812      	ldr	r0, [pc, #72]	@ (80009fc <main+0x1e4>)
 80009b2:	f000 fde4 	bl	800157e <HAL_CAN_AddTxMessage>
		  HAL_Delay(1);
 80009b6:	2001      	movs	r0, #1
 80009b8:	f000 fc7e 	bl	80012b8 <HAL_Delay>
		  Can_Tx_Header.ExtId = 0x00000043;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <main+0x1ec>)
 80009be:	2243      	movs	r2, #67	@ 0x43
 80009c0:	605a      	str	r2, [r3, #4]
		  HAL_CAN_AddTxMessage(&hcan1, &Can_Tx_Header, Can_Tx_Data, &TxMailBox);
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <main+0x1f8>)
 80009c4:	4a11      	ldr	r2, [pc, #68]	@ (8000a0c <main+0x1f4>)
 80009c6:	490f      	ldr	r1, [pc, #60]	@ (8000a04 <main+0x1ec>)
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <main+0x1e4>)
 80009ca:	f000 fdd8 	bl	800157e <HAL_CAN_AddTxMessage>
	  }

		// Check Connect IBus
		if(ibus_rx_cplt_flag == 1)
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <main+0x1fc>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d10d      	bne.n	80009f2 <main+0x1da>
		{
		  ibus_rx_cplt_flag = 0;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <main+0x1fc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 80009dc:	2120      	movs	r1, #32
 80009de:	480e      	ldr	r0, [pc, #56]	@ (8000a18 <main+0x200>)
 80009e0:	f7ff fd88 	bl	80004f4 <iBus_Check_CHKSUM>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d103      	bne.n	80009f2 <main+0x1da>
		  {
			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80009ea:	4907      	ldr	r1, [pc, #28]	@ (8000a08 <main+0x1f0>)
 80009ec:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <main+0x200>)
 80009ee:	f7ff fdb6 	bl	800055e <iBus_Parsing>
		  }
		}
		HAL_Delay(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 fc60 	bl	80012b8 <HAL_Delay>
	  if(iBus.SwA == 2000)
 80009f8:	e732      	b.n	8000860 <main+0x48>
 80009fa:	bf00      	nop
 80009fc:	20000040 	.word	0x20000040
 8000a00:	40005000 	.word	0x40005000
 8000a04:	20000068 	.word	0x20000068
 8000a08:	20000028 	.word	0x20000028
 8000a0c:	20000084 	.word	0x20000084
 8000a10:	20000080 	.word	0x20000080
 8000a14:	200000b0 	.word	0x200000b0
 8000a18:	20000090 	.word	0x20000090

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	@ 0x50
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	2230      	movs	r2, #48	@ 0x30
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 f8ea 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <SystemClock_Config+0xcc>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	4a27      	ldr	r2, [pc, #156]	@ (8000ae8 <SystemClock_Config+0xcc>)
 8000a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a50:	4b25      	ldr	r3, [pc, #148]	@ (8000ae8 <SystemClock_Config+0xcc>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <SystemClock_Config+0xd0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a21      	ldr	r2, [pc, #132]	@ (8000aec <SystemClock_Config+0xd0>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <SystemClock_Config+0xd0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a82:	2302      	movs	r3, #2
 8000a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a90:	23a8      	movs	r3, #168	@ 0xa8
 8000a92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	f107 0320 	add.w	r3, r7, #32
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 f8bf 	bl	8001c24 <HAL_RCC_OscConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aac:	f000 f820 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000abc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2105      	movs	r1, #5
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fb20 	bl	8002114 <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ada:	f000 f809 	bl	8000af0 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3750      	adds	r7, #80	@ 0x50
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40007000 	.word	0x40007000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <Error_Handler+0x8>

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <LL_USART_IsActiveFlag_RXNE>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	2b20      	cmp	r3, #32
 8000b5e:	bf0c      	ite	eq
 8000b60:	2301      	moveq	r3, #1
 8000b62:	2300      	movne	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_USART_ClearFlag_RXNE>:
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f06f 0220 	mvn.w	r2, #32
 8000b80:	601a      	str	r2, [r3, #0]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	b2db      	uxtb	r3, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 fb3b 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART5))
 8000c0c:	4832      	ldr	r0, [pc, #200]	@ (8000cd8 <UART5_IRQHandler+0xd0>)
 8000c0e:	f7ff ff9d 	bl	8000b4c <LL_USART_IsActiveFlag_RXNE>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d05c      	beq.n	8000cd2 <UART5_IRQHandler+0xca>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 8000c18:	482f      	ldr	r0, [pc, #188]	@ (8000cd8 <UART5_IRQHandler+0xd0>)
 8000c1a:	f7ff ffaa 	bl	8000b72 <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 8000c1e:	482e      	ldr	r0, [pc, #184]	@ (8000cd8 <UART5_IRQHandler+0xd0>)
 8000c20:	f7ff ffb5 	bl	8000b8e <LL_USART_ReceiveData8>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <UART5_IRQHandler+0xd4>)
 8000c2a:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <UART5_IRQHandler+0xd8>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 8000c32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b1f      	cmp	r3, #31
 8000c38:	d02e      	beq.n	8000c98 <UART5_IRQHandler+0x90>
 8000c3a:	2b1f      	cmp	r3, #31
 8000c3c:	dc3a      	bgt.n	8000cb4 <UART5_IRQHandler+0xac>
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <UART5_IRQHandler+0x40>
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d012      	beq.n	8000c6c <UART5_IRQHandler+0x64>
 8000c46:	e035      	b.n	8000cb4 <UART5_IRQHandler+0xac>
		{
		case 0:
			if(uart5_rx_data == 0x20)
 8000c48:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <UART5_IRQHandler+0xd4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b20      	cmp	r3, #32
 8000c4e:	d13f      	bne.n	8000cd0 <UART5_IRQHandler+0xc8>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <UART5_IRQHandler+0xd4>)
 8000c58:	7819      	ldrb	r1, [r3, #0]
 8000c5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <UART5_IRQHandler+0xe0>)
 8000c5c:	5499      	strb	r1, [r3, r2]
				cnt++;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c68:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c6a:	e031      	b.n	8000cd0 <UART5_IRQHandler+0xc8>
		case 1:
			if(uart5_rx_data == 0x40)
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <UART5_IRQHandler+0xd4>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b40      	cmp	r3, #64	@ 0x40
 8000c72:	d10d      	bne.n	8000c90 <UART5_IRQHandler+0x88>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <UART5_IRQHandler+0xd4>)
 8000c7c:	7819      	ldrb	r1, [r3, #0]
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <UART5_IRQHandler+0xe0>)
 8000c80:	5499      	strb	r1, [r3, r2]
				cnt++;
 8000c82:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c8c:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8000c8e:	e020      	b.n	8000cd2 <UART5_IRQHandler+0xca>
				cnt = 0;
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
			break;
 8000c96:	e01c      	b.n	8000cd2 <UART5_IRQHandler+0xca>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <UART5_IRQHandler+0xd4>)
 8000ca0:	7819      	ldrb	r1, [r3, #0]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <UART5_IRQHandler+0xe0>)
 8000ca4:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <UART5_IRQHandler+0xe4>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
			break;
 8000cb2:	e00e      	b.n	8000cd2 <UART5_IRQHandler+0xca>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <UART5_IRQHandler+0xd4>)
 8000cbc:	7819      	ldrb	r1, [r3, #0]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <UART5_IRQHandler+0xe0>)
 8000cc0:	5499      	strb	r1, [r3, r2]
			cnt++;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <UART5_IRQHandler+0xdc>)
 8000ccc:	701a      	strb	r2, [r3, #0]
			break;
 8000cce:	e000      	b.n	8000cd2 <UART5_IRQHandler+0xca>
			break;
 8000cd0:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40005000 	.word	0x40005000
 8000cdc:	2000008c 	.word	0x2000008c
 8000ce0:	2000008d 	.word	0x2000008d
 8000ce4:	200000b1 	.word	0x200000b1
 8000ce8:	20000090 	.word	0x20000090
 8000cec:	200000b0 	.word	0x200000b0

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	@ 0x38
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d44:	4b32      	ldr	r3, [pc, #200]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d46:	4a33      	ldr	r2, [pc, #204]	@ (8000e14 <MX_TIM4_Init+0x100>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d4a:	4b31      	ldr	r3, [pc, #196]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b2f      	ldr	r3, [pc, #188]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d56:	4b2e      	ldr	r3, [pc, #184]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b2a      	ldr	r3, [pc, #168]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d6a:	4829      	ldr	r0, [pc, #164]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d6c:	f001 fbbe 	bl	80024ec <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d76:	f7ff febb 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4822      	ldr	r0, [pc, #136]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d88:	f001 fd1a 	bl	80027c0 <HAL_TIM_ConfigClockSource>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d92:	f7ff fead 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d96:	481e      	ldr	r0, [pc, #120]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000d98:	f001 fbf7 	bl	800258a <HAL_TIM_PWM_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000da2:	f7ff fea5 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dae:	f107 0320 	add.w	r3, r7, #32
 8000db2:	4619      	mov	r1, r3
 8000db4:	4816      	ldr	r0, [pc, #88]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000db6:	f002 f8bb 	bl	8002f30 <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000dc0:	f7ff fe96 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc4:	2360      	movs	r3, #96	@ 0x60
 8000dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000ddc:	f001 fc2e 	bl	800263c <HAL_TIM_PWM_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000de6:	f7ff fe83 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2204      	movs	r2, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000df2:	f001 fc23 	bl	800263c <HAL_TIM_PWM_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000dfc:	f7ff fe78 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e00:	4803      	ldr	r0, [pc, #12]	@ (8000e10 <MX_TIM4_Init+0xfc>)
 8000e02:	f000 f82b 	bl	8000e5c <HAL_TIM_MspPostInit>

}
 8000e06:	bf00      	nop
 8000e08:	3738      	adds	r7, #56	@ 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000b4 	.word	0x200000b4
 8000e14:	40000800 	.word	0x40000800

08000e18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	@ (8000e54 <HAL_TIM_Base_MspInit+0x3c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10d      	bne.n	8000e46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a09      	ldr	r2, [pc, #36]	@ (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <HAL_TIM_Base_MspInit+0x40>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40000800 	.word	0x40000800
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <HAL_TIM_MspPostInit+0x68>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d11d      	bne.n	8000eba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e9a:	23c0      	movs	r3, #192	@ 0xc0
 8000e9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 030c 	add.w	r3, r7, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <HAL_TIM_MspPostInit+0x70>)
 8000eb6:	f000 fd19 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40000800 	.word	0x40000800
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	@ (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	@ (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	@ 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_USART_Enable>:
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60da      	str	r2, [r3, #12]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_USART_ConfigAsyncMode>:
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	615a      	str	r2, [r3, #20]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <LL_AHB1_GRP1_EnableClock>:
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800103a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4313      	orrs	r3, r2
 8001042:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001046:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40023800 	.word	0x40023800

08001060 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <LL_APB1_GRP1_EnableClock+0x2c>)
 800106a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800106c:	4907      	ldr	r1, [pc, #28]	@ (800108c <LL_APB1_GRP1_EnableClock+0x2c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4313      	orrs	r3, r2
 8001072:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4013      	ands	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	40023800 	.word	0x40023800

08001090 <MX_UART5_Init>:

/* USER CODE END 0 */

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	@ 0x38
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80010ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80010be:	f7ff ffcf 	bl	8001060 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80010c2:	2004      	movs	r0, #4
 80010c4:	f7ff ffb4 	bl	8001030 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80010c8:	2008      	movs	r0, #8
 80010ca:	f7ff ffb1 	bl	8001030 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80010ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80010e4:	2308      	movs	r3, #8
 80010e6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <MX_UART5_Init+0xe4>)
 80010ee:	f002 f8e6 	bl	80032be <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80010f2:	2304      	movs	r3, #4
 80010f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010f6:	2302      	movs	r3, #2
 80010f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001106:	2308      	movs	r3, #8
 8001108:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	481a      	ldr	r0, [pc, #104]	@ (8001178 <MX_UART5_Init+0xe8>)
 8001110:	f002 f8d5 	bl	80032be <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001114:	f7ff fedc 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001118:	4603      	mov	r3, r0
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff2c 	bl	8000f7c <NVIC_EncodePriority>
 8001124:	4603      	mov	r3, r0
 8001126:	4619      	mov	r1, r3
 8001128:	2035      	movs	r0, #53	@ 0x35
 800112a:	f7ff fefd 	bl	8000f28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800112e:	2035      	movs	r0, #53	@ 0x35
 8001130:	f7ff fedc 	bl	8000eec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001134:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001138:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001146:	230c      	movs	r3, #12
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4808      	ldr	r0, [pc, #32]	@ (800117c <MX_UART5_Init+0xec>)
 800115a:	f002 fcd3 	bl	8003b04 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800115e:	4807      	ldr	r0, [pc, #28]	@ (800117c <MX_UART5_Init+0xec>)
 8001160:	f7ff ff4f 	bl	8001002 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_UART5_Init+0xec>)
 8001166:	f7ff ff3c 	bl	8000fe2 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3738      	adds	r7, #56	@ 0x38
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40005000 	.word	0x40005000

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001184:	f7ff fdb4 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480c      	ldr	r0, [pc, #48]	@ (80011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118a:	490d      	ldr	r1, [pc, #52]	@ (80011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a0:	4c0a      	ldr	r4, [pc, #40]	@ (80011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ae:	f002 fd31 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff fb31 	bl	8000818 <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011c4:	08003c9c 	.word	0x08003c9c
  ldr r2, =_sbss
 80011c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011cc:	20000100 	.word	0x20000100

080011d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001214 <HAL_Init+0x40>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_Init+0x40>)
 80011ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_Init+0x40>)
 80011f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 fb41 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fc78 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023c00 	.word	0x40023c00

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fb4b 	bl	80018d2 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 fb21 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000000 	.word	0x20000000
 8001270:	20000008 	.word	0x20000008
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_IncTick+0x20>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_IncTick+0x24>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a04      	ldr	r2, [pc, #16]	@ (800129c <HAL_IncTick+0x24>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	20000008 	.word	0x20000008
 800129c:	200000fc 	.word	0x200000fc

080012a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <HAL_GetTick+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	200000fc 	.word	0x200000fc

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff ffee 	bl	80012a0 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0ed      	b.n	80014ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff f9e4 	bl	80006ec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0201 	orr.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001334:	f7ff ffb4 	bl	80012a0 <HAL_GetTick>
 8001338:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133a:	e012      	b.n	8001362 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800133c:	f7ff ffb0 	bl	80012a0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b0a      	cmp	r3, #10
 8001348:	d90b      	bls.n	8001362 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2205      	movs	r2, #5
 800135a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0c5      	b.n	80014ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0e5      	beq.n	800133c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0202 	bic.w	r2, r2, #2
 800137e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001380:	f7ff ff8e 	bl	80012a0 <HAL_GetTick>
 8001384:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001386:	e012      	b.n	80013ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001388:	f7ff ff8a 	bl	80012a0 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b0a      	cmp	r3, #10
 8001394:	d90b      	bls.n	80013ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2205      	movs	r2, #5
 80013a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e09f      	b.n	80014ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1e5      	bne.n	8001388 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7e1b      	ldrb	r3, [r3, #24]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d108      	bne.n	80013d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	e007      	b.n	80013e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7e5b      	ldrb	r3, [r3, #25]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d108      	bne.n	8001400 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e007      	b.n	8001410 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800140e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7e9b      	ldrb	r3, [r3, #26]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d108      	bne.n	800142a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0220 	orr.w	r2, r2, #32
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e007      	b.n	800143a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0220 	bic.w	r2, r2, #32
 8001438:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7edb      	ldrb	r3, [r3, #27]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0210 	bic.w	r2, r2, #16
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e007      	b.n	8001464 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0210 	orr.w	r2, r2, #16
 8001462:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7f1b      	ldrb	r3, [r3, #28]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d108      	bne.n	800147e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0208 	orr.w	r2, r2, #8
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e007      	b.n	800148e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0208 	bic.w	r2, r2, #8
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7f5b      	ldrb	r3, [r3, #29]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d108      	bne.n	80014a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0204 	orr.w	r2, r2, #4
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e007      	b.n	80014b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0204 	bic.w	r2, r2, #4
 80014b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	ea42 0103 	orr.w	r1, r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d12e      	bne.n	8001568 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2202      	movs	r2, #2
 800150e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001522:	f7ff febd 	bl	80012a0 <HAL_GetTick>
 8001526:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001528:	e012      	b.n	8001550 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800152a:	f7ff feb9 	bl	80012a0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b0a      	cmp	r3, #10
 8001536:	d90b      	bls.n	8001550 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2205      	movs	r2, #5
 8001548:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e012      	b.n	8001576 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e5      	bne.n	800152a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	e006      	b.n	8001576 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
  }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800157e:	b480      	push	{r7}
 8001580:	b089      	sub	sp, #36	@ 0x24
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001592:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800159c:	7ffb      	ldrb	r3, [r7, #31]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d003      	beq.n	80015aa <HAL_CAN_AddTxMessage+0x2c>
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	f040 80ad 	bne.w	8001704 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10a      	bne.n	80015ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d105      	bne.n	80015ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8095 	beq.w	80016f4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	0e1b      	lsrs	r3, r3, #24
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015d4:	2201      	movs	r2, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	409a      	lsls	r2, r3
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	6809      	ldr	r1, [r1, #0]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3318      	adds	r3, #24
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	440b      	add	r3, r1
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e00f      	b.n	8001622 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800160c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001616:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3318      	adds	r3, #24
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	440b      	add	r3, r1
 8001620:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	3318      	adds	r3, #24
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	3304      	adds	r3, #4
 8001634:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	7d1b      	ldrb	r3, [r3, #20]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d111      	bne.n	8001662 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3318      	adds	r3, #24
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	3304      	adds	r3, #4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	6811      	ldr	r1, [r2, #0]
 8001652:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	440b      	add	r3, r1
 800165e:	3304      	adds	r3, #4
 8001660:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3307      	adds	r3, #7
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	061a      	lsls	r2, r3, #24
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3306      	adds	r3, #6
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3305      	adds	r3, #5
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	4313      	orrs	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	3204      	adds	r2, #4
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	4610      	mov	r0, r2
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	6811      	ldr	r1, [r2, #0]
 800168a:	ea43 0200 	orr.w	r2, r3, r0
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	440b      	add	r3, r1
 8001694:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001698:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3303      	adds	r3, #3
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	061a      	lsls	r2, r3, #24
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3302      	adds	r3, #2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	041b      	lsls	r3, r3, #16
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3301      	adds	r3, #1
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	4313      	orrs	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	4610      	mov	r0, r2
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	6811      	ldr	r1, [r2, #0]
 80016c0:	ea43 0200 	orr.w	r2, r3, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	440b      	add	r3, r1
 80016ca:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80016ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3318      	adds	r3, #24
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	4413      	add	r3, r2
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	6811      	ldr	r1, [r2, #0]
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3318      	adds	r3, #24
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	440b      	add	r3, r1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e00e      	b.n	8001712 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e006      	b.n	8001712 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001708:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	@ 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <__NVIC_SetPriorityGrouping>:
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_SetPriority>:
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	@ (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	@ (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	@ 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff47 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff5c 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffb0 	bl	8001840 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e16b      	b.n	8001be0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 815a 	bne.w	8001bda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d005      	beq.n	800193e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193a:	2b02      	cmp	r3, #2
 800193c:	d130      	bne.n	80019a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 0201 	and.w	r2, r3, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d017      	beq.n	80019dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80b4 	beq.w	8001bda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b60      	ldr	r3, [pc, #384]	@ (8001bf8 <HAL_GPIO_Init+0x30c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8001bf8 <HAL_GPIO_Init+0x30c>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf8 <HAL_GPIO_Init+0x30c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bfc <HAL_GPIO_Init+0x310>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a52      	ldr	r2, [pc, #328]	@ (8001c00 <HAL_GPIO_Init+0x314>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d02b      	beq.n	8001b12 <HAL_GPIO_Init+0x226>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a51      	ldr	r2, [pc, #324]	@ (8001c04 <HAL_GPIO_Init+0x318>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x222>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a50      	ldr	r2, [pc, #320]	@ (8001c08 <HAL_GPIO_Init+0x31c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x21e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c0c <HAL_GPIO_Init+0x320>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x21a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c10 <HAL_GPIO_Init+0x324>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x216>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c14 <HAL_GPIO_Init+0x328>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x212>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c18 <HAL_GPIO_Init+0x32c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	@ (8001c1c <HAL_GPIO_Init+0x330>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x20a>
 8001af2:	2307      	movs	r3, #7
 8001af4:	e00e      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001af6:	2308      	movs	r3, #8
 8001af8:	e00c      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e00a      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001afe:	2305      	movs	r3, #5
 8001b00:	e008      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b06:	2303      	movs	r3, #3
 8001b08:	e004      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x228>
 8001b12:	2300      	movs	r3, #0
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	f002 0203 	and.w	r2, r2, #3
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	4093      	lsls	r3, r2
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b24:	4935      	ldr	r1, [pc, #212]	@ (8001bfc <HAL_GPIO_Init+0x310>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b32:	4b3b      	ldr	r3, [pc, #236]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b56:	4a32      	ldr	r2, [pc, #200]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b5c:	4b30      	ldr	r3, [pc, #192]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b80:	4a27      	ldr	r2, [pc, #156]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b86:	4b26      	ldr	r3, [pc, #152]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001baa:	4a1d      	ldr	r2, [pc, #116]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd4:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <HAL_GPIO_Init+0x334>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	f67f ae90 	bls.w	8001908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3724      	adds	r7, #36	@ 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40021400 	.word	0x40021400
 8001c18:	40021800 	.word	0x40021800
 8001c1c:	40021c00 	.word	0x40021c00
 8001c20:	40013c00 	.word	0x40013c00

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e267      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d075      	beq.n	8001d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c42:	4b88      	ldr	r3, [pc, #544]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d00c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b85      	ldr	r3, [pc, #532]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d112      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4b82      	ldr	r3, [pc, #520]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c66:	d10b      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	4b7e      	ldr	r3, [pc, #504]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05b      	beq.n	8001d2c <HAL_RCC_OscConfig+0x108>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d157      	bne.n	8001d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e242      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x74>
 8001c8a:	4b76      	ldr	r3, [pc, #472]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a75      	ldr	r2, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x98>
 8001ca2:	4b70      	ldr	r3, [pc, #448]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6f      	ldr	r2, [pc, #444]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b6d      	ldr	r3, [pc, #436]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6c      	ldr	r2, [pc, #432]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	4b69      	ldr	r3, [pc, #420]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a68      	ldr	r2, [pc, #416]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b66      	ldr	r3, [pc, #408]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a65      	ldr	r2, [pc, #404]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fae0 	bl	80012a0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fadc 	bl	80012a0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e207      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xc0>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff facc 	bl	80012a0 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fac8 	bl	80012a0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1f3      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	4b51      	ldr	r3, [pc, #324]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0xe8>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d063      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d11c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e1c7      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4b3b      	ldr	r3, [pc, #236]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4937      	ldr	r1, [pc, #220]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	e03a      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d94:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <HAL_RCC_OscConfig+0x244>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa81 	bl	80012a0 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff fa7d 	bl	80012a0 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1a8      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4925      	ldr	r1, [pc, #148]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	e015      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <HAL_RCC_OscConfig+0x244>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fa60 	bl	80012a0 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de4:	f7ff fa5c 	bl	80012a0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e187      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d036      	beq.n	8001e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_RCC_OscConfig+0x248>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fa40 	bl	80012a0 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fa3c 	bl	80012a0 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e167      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_RCC_OscConfig+0x240>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x200>
 8001e42:	e01b      	b.n	8001e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_RCC_OscConfig+0x248>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fa29 	bl	80012a0 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	e00e      	b.n	8001e70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e52:	f7ff fa25 	bl	80012a0 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d907      	bls.n	8001e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e150      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
 8001e64:	40023800 	.word	0x40023800
 8001e68:	42470000 	.word	0x42470000
 8001e6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	4b88      	ldr	r3, [pc, #544]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ea      	bne.n	8001e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8097 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b81      	ldr	r3, [pc, #516]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10f      	bne.n	8001eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	4a7c      	ldr	r2, [pc, #496]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eba:	4b77      	ldr	r3, [pc, #476]	@ (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec6:	4b74      	ldr	r3, [pc, #464]	@ (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a73      	ldr	r2, [pc, #460]	@ (8002098 <HAL_RCC_OscConfig+0x474>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f9e5 	bl	80012a0 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eda:	f7ff f9e1 	bl	80012a0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e10c      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	4b6a      	ldr	r3, [pc, #424]	@ (8002098 <HAL_RCC_OscConfig+0x474>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2ea>
 8001f00:	4b64      	ldr	r3, [pc, #400]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f04:	4a63      	ldr	r2, [pc, #396]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0c:	e01c      	b.n	8001f48 <HAL_RCC_OscConfig+0x324>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x30c>
 8001f16:	4b5f      	ldr	r3, [pc, #380]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	4a5e      	ldr	r2, [pc, #376]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f22:	4b5c      	ldr	r3, [pc, #368]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f26:	4a5b      	ldr	r2, [pc, #364]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0x324>
 8001f30:	4b58      	ldr	r3, [pc, #352]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f34:	4a57      	ldr	r2, [pc, #348]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f3c:	4b55      	ldr	r3, [pc, #340]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f40:	4a54      	ldr	r2, [pc, #336]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f42:	f023 0304 	bic.w	r3, r3, #4
 8001f46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d015      	beq.n	8001f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff f9a6 	bl	80012a0 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff f9a2 	bl	80012a0 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0cb      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	4b49      	ldr	r3, [pc, #292]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ee      	beq.n	8001f58 <HAL_RCC_OscConfig+0x334>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f990 	bl	80012a0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff f98c 	bl	80012a0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e0b5      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ee      	bne.n	8001f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fac:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	4a38      	ldr	r2, [pc, #224]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80a1 	beq.w	8002104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc2:	4b34      	ldr	r3, [pc, #208]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d05c      	beq.n	8002088 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d141      	bne.n	800205a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b31      	ldr	r3, [pc, #196]	@ (800209c <HAL_RCC_OscConfig+0x478>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f960 	bl	80012a0 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f95c 	bl	80012a0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e087      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	019b      	lsls	r3, r3, #6
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	085b      	lsrs	r3, r3, #1
 800201a:	3b01      	subs	r3, #1
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	491b      	ldr	r1, [pc, #108]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b1b      	ldr	r3, [pc, #108]	@ (800209c <HAL_RCC_OscConfig+0x478>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff f935 	bl	80012a0 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203a:	f7ff f931 	bl	80012a0 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e05c      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x416>
 8002058:	e054      	b.n	8002104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <HAL_RCC_OscConfig+0x478>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7ff f91e 	bl	80012a0 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff f91a 	bl	80012a0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e045      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207a:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_RCC_OscConfig+0x470>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x444>
 8002086:	e03d      	b.n	8002104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e038      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000
 800209c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_RCC_OscConfig+0x4ec>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d028      	beq.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d121      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d11a      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020d0:	4013      	ands	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d8:	4293      	cmp	r3, r2
 80020da:	d111      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	3b01      	subs	r3, #1
 80020ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0cc      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b68      	ldr	r3, [pc, #416]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d90c      	bls.n	8002150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b65      	ldr	r3, [pc, #404]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b63      	ldr	r3, [pc, #396]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b8      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002168:	4b59      	ldr	r3, [pc, #356]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a58      	ldr	r2, [pc, #352]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002172:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002180:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a52      	ldr	r2, [pc, #328]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800218a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b50      	ldr	r3, [pc, #320]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	494d      	ldr	r1, [pc, #308]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d044      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d119      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e07f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b3f      	ldr	r3, [pc, #252]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e067      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b37      	ldr	r3, [pc, #220]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4934      	ldr	r1, [pc, #208]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff f84c 	bl	80012a0 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff f848 	bl	80012a0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e04f      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b25      	ldr	r3, [pc, #148]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d20c      	bcs.n	800225c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e032      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4916      	ldr	r1, [pc, #88]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d009      	beq.n	800229a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	490e      	ldr	r1, [pc, #56]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800229a:	f000 f821 	bl	80022e0 <HAL_RCC_GetSysClockFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	490a      	ldr	r1, [pc, #40]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	5ccb      	ldrb	r3, [r1, r3]
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe ffac 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00
 80022d0:	40023800 	.word	0x40023800
 80022d4:	08003c74 	.word	0x08003c74
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e4:	b094      	sub	sp, #80	@ 0x50
 80022e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f8:	4b79      	ldr	r3, [pc, #484]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d00d      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x40>
 8002304:	2b08      	cmp	r3, #8
 8002306:	f200 80e1 	bhi.w	80024cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x34>
 800230e:	2b04      	cmp	r3, #4
 8002310:	d003      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x3a>
 8002312:	e0db      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b73      	ldr	r3, [pc, #460]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002316:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002318:	e0db      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231a:	4b73      	ldr	r3, [pc, #460]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800231c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800231e:	e0d8      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002320:	4b6f      	ldr	r3, [pc, #444]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002328:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232a:	4b6d      	ldr	r3, [pc, #436]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002336:	4b6a      	ldr	r3, [pc, #424]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	2200      	movs	r2, #0
 800233e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002340:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002348:	633b      	str	r3, [r7, #48]	@ 0x30
 800234a:	2300      	movs	r3, #0
 800234c:	637b      	str	r3, [r7, #52]	@ 0x34
 800234e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002352:	4622      	mov	r2, r4
 8002354:	462b      	mov	r3, r5
 8002356:	f04f 0000 	mov.w	r0, #0
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	0159      	lsls	r1, r3, #5
 8002360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002364:	0150      	lsls	r0, r2, #5
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4621      	mov	r1, r4
 800236c:	1a51      	subs	r1, r2, r1
 800236e:	6139      	str	r1, [r7, #16]
 8002370:	4629      	mov	r1, r5
 8002372:	eb63 0301 	sbc.w	r3, r3, r1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002384:	4659      	mov	r1, fp
 8002386:	018b      	lsls	r3, r1, #6
 8002388:	4651      	mov	r1, sl
 800238a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800238e:	4651      	mov	r1, sl
 8002390:	018a      	lsls	r2, r1, #6
 8002392:	4651      	mov	r1, sl
 8002394:	ebb2 0801 	subs.w	r8, r2, r1
 8002398:	4659      	mov	r1, fp
 800239a:	eb63 0901 	sbc.w	r9, r3, r1
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b2:	4690      	mov	r8, r2
 80023b4:	4699      	mov	r9, r3
 80023b6:	4623      	mov	r3, r4
 80023b8:	eb18 0303 	adds.w	r3, r8, r3
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	462b      	mov	r3, r5
 80023c0:	eb49 0303 	adc.w	r3, r9, r3
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023d2:	4629      	mov	r1, r5
 80023d4:	024b      	lsls	r3, r1, #9
 80023d6:	4621      	mov	r1, r4
 80023d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023dc:	4621      	mov	r1, r4
 80023de:	024a      	lsls	r2, r1, #9
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e6:	2200      	movs	r2, #0
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023f0:	f7fd feea 	bl	80001c8 <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4613      	mov	r3, r2
 80023fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023fc:	e058      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fe:	4b38      	ldr	r3, [pc, #224]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	099b      	lsrs	r3, r3, #6
 8002404:	2200      	movs	r2, #0
 8002406:	4618      	mov	r0, r3
 8002408:	4611      	mov	r1, r2
 800240a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
 8002414:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002418:	4642      	mov	r2, r8
 800241a:	464b      	mov	r3, r9
 800241c:	f04f 0000 	mov.w	r0, #0
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	0159      	lsls	r1, r3, #5
 8002426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800242a:	0150      	lsls	r0, r2, #5
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4641      	mov	r1, r8
 8002432:	ebb2 0a01 	subs.w	sl, r2, r1
 8002436:	4649      	mov	r1, r9
 8002438:	eb63 0b01 	sbc.w	fp, r3, r1
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002448:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800244c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002450:	ebb2 040a 	subs.w	r4, r2, sl
 8002454:	eb63 050b 	sbc.w	r5, r3, fp
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	00eb      	lsls	r3, r5, #3
 8002462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002466:	00e2      	lsls	r2, r4, #3
 8002468:	4614      	mov	r4, r2
 800246a:	461d      	mov	r5, r3
 800246c:	4643      	mov	r3, r8
 800246e:	18e3      	adds	r3, r4, r3
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	464b      	mov	r3, r9
 8002474:	eb45 0303 	adc.w	r3, r5, r3
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002486:	4629      	mov	r1, r5
 8002488:	028b      	lsls	r3, r1, #10
 800248a:	4621      	mov	r1, r4
 800248c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002490:	4621      	mov	r1, r4
 8002492:	028a      	lsls	r2, r1, #10
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800249a:	2200      	movs	r2, #0
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	61fa      	str	r2, [r7, #28]
 80024a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a4:	f7fd fe90 	bl	80001c8 <__aeabi_uldivmod>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4613      	mov	r3, r2
 80024ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	3301      	adds	r3, #1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024ca:	e002      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3750      	adds	r7, #80	@ 0x50
 80024d8:	46bd      	mov	sp, r7
 80024da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	007a1200 	.word	0x007a1200

080024ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e041      	b.n	8002582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fc80 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f000 fa10 	bl	8002950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e041      	b.n	8002620 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f839 	bl	8002628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f000 f9c1 	bl	8002950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002656:	2302      	movs	r3, #2
 8002658:	e0ae      	b.n	80027b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b0c      	cmp	r3, #12
 8002666:	f200 809f 	bhi.w	80027a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800266a:	a201      	add	r2, pc, #4	@ (adr r2, 8002670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	080026a5 	.word	0x080026a5
 8002674:	080027a9 	.word	0x080027a9
 8002678:	080027a9 	.word	0x080027a9
 800267c:	080027a9 	.word	0x080027a9
 8002680:	080026e5 	.word	0x080026e5
 8002684:	080027a9 	.word	0x080027a9
 8002688:	080027a9 	.word	0x080027a9
 800268c:	080027a9 	.word	0x080027a9
 8002690:	08002727 	.word	0x08002727
 8002694:	080027a9 	.word	0x080027a9
 8002698:	080027a9 	.word	0x080027a9
 800269c:	080027a9 	.word	0x080027a9
 80026a0:	08002767 	.word	0x08002767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f9f6 	bl	8002a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0204 	bic.w	r2, r2, #4
 80026ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6999      	ldr	r1, [r3, #24]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	619a      	str	r2, [r3, #24]
      break;
 80026e2:	e064      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fa46 	bl	8002b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800270e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6999      	ldr	r1, [r3, #24]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	021a      	lsls	r2, r3, #8
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	619a      	str	r2, [r3, #24]
      break;
 8002724:	e043      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fa9b 	bl	8002c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0208 	orr.w	r2, r2, #8
 8002740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0204 	bic.w	r2, r2, #4
 8002750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69d9      	ldr	r1, [r3, #28]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	61da      	str	r2, [r3, #28]
      break;
 8002764:	e023      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 faef 	bl	8002d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69d9      	ldr	r1, [r3, #28]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	021a      	lsls	r2, r3, #8
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	61da      	str	r2, [r3, #28]
      break;
 80027a6:	e002      	b.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	75fb      	strb	r3, [r7, #23]
      break;
 80027ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_TIM_ConfigClockSource+0x1c>
 80027d8:	2302      	movs	r3, #2
 80027da:	e0b4      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x186>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002814:	d03e      	beq.n	8002894 <HAL_TIM_ConfigClockSource+0xd4>
 8002816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800281a:	f200 8087 	bhi.w	800292c <HAL_TIM_ConfigClockSource+0x16c>
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002822:	f000 8086 	beq.w	8002932 <HAL_TIM_ConfigClockSource+0x172>
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282a:	d87f      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b70      	cmp	r3, #112	@ 0x70
 800282e:	d01a      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xa6>
 8002830:	2b70      	cmp	r3, #112	@ 0x70
 8002832:	d87b      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b60      	cmp	r3, #96	@ 0x60
 8002836:	d050      	beq.n	80028da <HAL_TIM_ConfigClockSource+0x11a>
 8002838:	2b60      	cmp	r3, #96	@ 0x60
 800283a:	d877      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b50      	cmp	r3, #80	@ 0x50
 800283e:	d03c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0xfa>
 8002840:	2b50      	cmp	r3, #80	@ 0x50
 8002842:	d873      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b40      	cmp	r3, #64	@ 0x40
 8002846:	d058      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x13a>
 8002848:	2b40      	cmp	r3, #64	@ 0x40
 800284a:	d86f      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b30      	cmp	r3, #48	@ 0x30
 800284e:	d064      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x15a>
 8002850:	2b30      	cmp	r3, #48	@ 0x30
 8002852:	d86b      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d060      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x15a>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d867      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d05c      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b10      	cmp	r3, #16
 8002862:	d05a      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	e062      	b.n	800292c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	f000 fb3b 	bl	8002ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	609a      	str	r2, [r3, #8]
      break;
 8002892:	e04f      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a4:	f000 fb24 	bl	8002ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b6:	609a      	str	r2, [r3, #8]
      break;
 80028b8:	e03c      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	461a      	mov	r2, r3
 80028c8:	f000 fa98 	bl	8002dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2150      	movs	r1, #80	@ 0x50
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 faf1 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 80028d8:	e02c      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 fab7 	bl	8002e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2160      	movs	r1, #96	@ 0x60
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fae1 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 80028f8:	e01c      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	461a      	mov	r2, r3
 8002908:	f000 fa78 	bl	8002dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2140      	movs	r1, #64	@ 0x40
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fad1 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 8002918:	e00c      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f000 fac8 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 800292a:	e003      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e000      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a43      	ldr	r2, [pc, #268]	@ (8002a70 <TIM_Base_SetConfig+0x120>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d013      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296e:	d00f      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a40      	ldr	r2, [pc, #256]	@ (8002a74 <TIM_Base_SetConfig+0x124>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00b      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a78 <TIM_Base_SetConfig+0x128>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a3e      	ldr	r2, [pc, #248]	@ (8002a7c <TIM_Base_SetConfig+0x12c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d003      	beq.n	8002990 <TIM_Base_SetConfig+0x40>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a80 <TIM_Base_SetConfig+0x130>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d108      	bne.n	80029a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a32      	ldr	r2, [pc, #200]	@ (8002a70 <TIM_Base_SetConfig+0x120>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d02b      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b0:	d027      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002a74 <TIM_Base_SetConfig+0x124>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d023      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002a78 <TIM_Base_SetConfig+0x128>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a7c <TIM_Base_SetConfig+0x12c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01b      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002a80 <TIM_Base_SetConfig+0x130>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d017      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a84 <TIM_Base_SetConfig+0x134>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002a88 <TIM_Base_SetConfig+0x138>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00f      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a29      	ldr	r2, [pc, #164]	@ (8002a8c <TIM_Base_SetConfig+0x13c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00b      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a28      	ldr	r2, [pc, #160]	@ (8002a90 <TIM_Base_SetConfig+0x140>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a27      	ldr	r2, [pc, #156]	@ (8002a94 <TIM_Base_SetConfig+0x144>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_Base_SetConfig+0xb2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a26      	ldr	r2, [pc, #152]	@ (8002a98 <TIM_Base_SetConfig+0x148>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d108      	bne.n	8002a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <TIM_Base_SetConfig+0x120>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d003      	beq.n	8002a42 <TIM_Base_SetConfig+0xf2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <TIM_Base_SetConfig+0x130>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d103      	bne.n	8002a4a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40000400 	.word	0x40000400
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	40000c00 	.word	0x40000c00
 8002a80:	40010400 	.word	0x40010400
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40014400 	.word	0x40014400
 8002a8c:	40014800 	.word	0x40014800
 8002a90:	40001800 	.word	0x40001800
 8002a94:	40001c00 	.word	0x40001c00
 8002a98:	40002000 	.word	0x40002000

08002a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f023 0201 	bic.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 0302 	bic.w	r3, r3, #2
 8002ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a20      	ldr	r2, [pc, #128]	@ (8002b74 <TIM_OC1_SetConfig+0xd8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d003      	beq.n	8002b00 <TIM_OC1_SetConfig+0x64>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <TIM_OC1_SetConfig+0xdc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10c      	bne.n	8002b1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0308 	bic.w	r3, r3, #8
 8002b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a15      	ldr	r2, [pc, #84]	@ (8002b74 <TIM_OC1_SetConfig+0xd8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_OC1_SetConfig+0x8e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <TIM_OC1_SetConfig+0xdc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d111      	bne.n	8002b4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	621a      	str	r2, [r3, #32]
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40010000 	.word	0x40010000
 8002b78:	40010400 	.word	0x40010400

08002b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f023 0210 	bic.w	r2, r3, #16
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0320 	bic.w	r3, r3, #32
 8002bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a22      	ldr	r2, [pc, #136]	@ (8002c60 <TIM_OC2_SetConfig+0xe4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d003      	beq.n	8002be4 <TIM_OC2_SetConfig+0x68>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <TIM_OC2_SetConfig+0xe8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10d      	bne.n	8002c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a17      	ldr	r2, [pc, #92]	@ (8002c60 <TIM_OC2_SetConfig+0xe4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_OC2_SetConfig+0x94>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a16      	ldr	r2, [pc, #88]	@ (8002c64 <TIM_OC2_SetConfig+0xe8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d113      	bne.n	8002c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40010000 	.word	0x40010000
 8002c64:	40010400 	.word	0x40010400

08002c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a21      	ldr	r2, [pc, #132]	@ (8002d48 <TIM_OC3_SetConfig+0xe0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_OC3_SetConfig+0x66>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a20      	ldr	r2, [pc, #128]	@ (8002d4c <TIM_OC3_SetConfig+0xe4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10d      	bne.n	8002cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <TIM_OC3_SetConfig+0xe0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_OC3_SetConfig+0x92>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	@ (8002d4c <TIM_OC3_SetConfig+0xe4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d113      	bne.n	8002d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	621a      	str	r2, [r3, #32]
}
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40010400 	.word	0x40010400

08002d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	031b      	lsls	r3, r3, #12
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a12      	ldr	r2, [pc, #72]	@ (8002df4 <TIM_OC4_SetConfig+0xa4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d003      	beq.n	8002db8 <TIM_OC4_SetConfig+0x68>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a11      	ldr	r2, [pc, #68]	@ (8002df8 <TIM_OC4_SetConfig+0xa8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d109      	bne.n	8002dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010400 	.word	0x40010400

08002dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f023 030a 	bic.w	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b087      	sub	sp, #28
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 0210 	bic.w	r2, r3, #16
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	031b      	lsls	r3, r3, #12
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	621a      	str	r2, [r3, #32]
}
 8002eae:	bf00      	nop
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f043 0307 	orr.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e05a      	b.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a21      	ldr	r2, [pc, #132]	@ (800300c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f94:	d01d      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1a      	ldr	r2, [pc, #104]	@ (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	@ (800301c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a17      	ldr	r2, [pc, #92]	@ (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	@ (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10c      	bne.n	8002fec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	40010400 	.word	0x40010400
 8003020:	40014000 	.word	0x40014000
 8003024:	40001800 	.word	0x40001800

08003028 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003028:	b480      	push	{r7}
 800302a:	b08b      	sub	sp, #44	@ 0x2c
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	613b      	str	r3, [r7, #16]
  return result;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e003      	b.n	800305a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2103      	movs	r1, #3
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	401a      	ands	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	61fb      	str	r3, [r7, #28]
  return result;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]
}
 8003096:	bf00      	nop
 8003098:	372c      	adds	r7, #44	@ 0x2c
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b08b      	sub	sp, #44	@ 0x2c
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	613b      	str	r3, [r7, #16]
  return result;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	e003      	b.n	8003104 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2103      	movs	r1, #3
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	61fb      	str	r3, [r7, #28]
  return result;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003126:	2320      	movs	r3, #32
 8003128:	e003      	b.n	8003132 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	431a      	orrs	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8003140:	bf00      	nop
 8003142:	372c      	adds	r7, #44	@ 0x2c
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800314c:	b480      	push	{r7}
 800314e:	b08b      	sub	sp, #44	@ 0x2c
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	613b      	str	r3, [r7, #16]
  return result;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003172:	2320      	movs	r3, #32
 8003174:	e003      	b.n	800317e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2103      	movs	r1, #3
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	61fb      	str	r3, [r7, #28]
  return result;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e003      	b.n	80031ac <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	60da      	str	r2, [r3, #12]
}
 80031ba:	bf00      	nop
 80031bc:	372c      	adds	r7, #44	@ 0x2c
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b08b      	sub	sp, #44	@ 0x2c
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1a      	ldr	r2, [r3, #32]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	613b      	str	r3, [r7, #16]
  return result;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e003      	b.n	80031f8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	210f      	movs	r1, #15
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	401a      	ands	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	61fb      	str	r3, [r7, #28]
  return result;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e003      	b.n	8003226 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	431a      	orrs	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003234:	bf00      	nop
 8003236:	372c      	adds	r7, #44	@ 0x2c
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003240:	b480      	push	{r7}
 8003242:	b08b      	sub	sp, #44	@ 0x2c
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	613b      	str	r3, [r7, #16]
  return result;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	e003      	b.n	8003274 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	210f      	movs	r1, #15
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	401a      	ands	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	61fb      	str	r3, [r7, #28]
  return result;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	431a      	orrs	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80032b2:	bf00      	nop
 80032b4:	372c      	adds	r7, #44	@ 0x2c
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b08a      	sub	sp, #40	@ 0x28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	617b      	str	r3, [r7, #20]
  return result;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <LL_GPIO_Init+0x2e>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e003      	b.n	80032f4 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80032f6:	e057      	b.n	80033a8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	4013      	ands	r3, r2
 8003306:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d049      	beq.n	80033a2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d003      	beq.n	800331e <LL_GPIO_Init+0x60>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d10d      	bne.n	800333a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	461a      	mov	r2, r3
 8003324:	6a39      	ldr	r1, [r7, #32]
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff fed3 	bl	80030d2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	461a      	mov	r2, r3
 8003332:	6a39      	ldr	r1, [r7, #32]
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff feb4 	bl	80030a2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	461a      	mov	r2, r3
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff02 	bl	800314c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d121      	bne.n	8003394 <LL_GPIO_Init+0xd6>
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	60bb      	str	r3, [r7, #8]
  return result;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <LL_GPIO_Init+0xac>
    return 32U;
 8003366:	2320      	movs	r3, #32
 8003368:	e003      	b.n	8003372 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	fab3 f383 	clz	r3, r3
 8003370:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003372:	2b07      	cmp	r3, #7
 8003374:	d807      	bhi.n	8003386 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	461a      	mov	r2, r3
 800337c:	6a39      	ldr	r1, [r7, #32]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff21 	bl	80031c6 <LL_GPIO_SetAFPin_0_7>
 8003384:	e006      	b.n	8003394 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	461a      	mov	r2, r3
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff56 	bl	8003240 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	461a      	mov	r2, r3
 800339a:	6a39      	ldr	r1, [r7, #32]
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff fe43 	bl	8003028 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	3301      	adds	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1a0      	bne.n	80032f8 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033c4:	4b04      	ldr	r3, [pc, #16]	@ (80033d8 <LL_RCC_GetSysClkSource+0x18>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800

080033dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033e0:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <LL_RCC_GetAHBPrescaler+0x18>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800

080033f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <LL_RCC_GetAPB1Prescaler+0x18>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800

08003414 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003418:	4b04      	ldr	r3, [pc, #16]	@ (800342c <LL_RCC_GetAPB2Prescaler+0x18>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800

08003430 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <LL_RCC_PLL_GetMainSource+0x18>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800

0800344c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <LL_RCC_PLL_GetN+0x18>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800345a:	4618      	mov	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40023800 	.word	0x40023800

08003468 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <LL_RCC_PLL_GetP+0x18>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800

08003484 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003488:	4b04      	ldr	r3, [pc, #16]	@ (800349c <LL_RCC_PLL_GetDivider+0x18>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800

080034a0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80034a8:	f000 f820 	bl	80034ec <RCC_GetSystemClockFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f840 	bl	800353c <RCC_GetHCLKClockFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f84e 	bl	8003568 <RCC_GetPCLK1ClockFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f85a 	bl	8003590 <RCC_GetPCLK2ClockFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60da      	str	r2, [r3, #12]
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80034f6:	f7ff ff63 	bl	80033c0 <LL_RCC_GetSysClkSource>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d00c      	beq.n	800351a <RCC_GetSystemClockFreq+0x2e>
 8003500:	2b08      	cmp	r3, #8
 8003502:	d80f      	bhi.n	8003524 <RCC_GetSystemClockFreq+0x38>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <RCC_GetSystemClockFreq+0x22>
 8003508:	2b04      	cmp	r3, #4
 800350a:	d003      	beq.n	8003514 <RCC_GetSystemClockFreq+0x28>
 800350c:	e00a      	b.n	8003524 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <RCC_GetSystemClockFreq+0x48>)
 8003510:	607b      	str	r3, [r7, #4]
      break;
 8003512:	e00a      	b.n	800352a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003514:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <RCC_GetSystemClockFreq+0x4c>)
 8003516:	607b      	str	r3, [r7, #4]
      break;
 8003518:	e007      	b.n	800352a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800351a:	2008      	movs	r0, #8
 800351c:	f000 f84c 	bl	80035b8 <RCC_PLL_GetFreqDomain_SYS>
 8003520:	6078      	str	r0, [r7, #4]
      break;
 8003522:	e002      	b.n	800352a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003524:	4b03      	ldr	r3, [pc, #12]	@ (8003534 <RCC_GetSystemClockFreq+0x48>)
 8003526:	607b      	str	r3, [r7, #4]
      break;
 8003528:	bf00      	nop
  }

  return frequency;
 800352a:	687b      	ldr	r3, [r7, #4]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	00f42400 	.word	0x00f42400
 8003538:	007a1200 	.word	0x007a1200

0800353c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003544:	f7ff ff4a 	bl	80033dc <LL_RCC_GetAHBPrescaler>
 8003548:	4603      	mov	r3, r0
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	4a04      	ldr	r2, [pc, #16]	@ (8003564 <RCC_GetHCLKClockFreq+0x28>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	461a      	mov	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	40d3      	lsrs	r3, r2
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	08003c74 	.word	0x08003c74

08003568 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003570:	f7ff ff42 	bl	80033f8 <LL_RCC_GetAPB1Prescaler>
 8003574:	4603      	mov	r3, r0
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	4a04      	ldr	r2, [pc, #16]	@ (800358c <RCC_GetPCLK1ClockFreq+0x24>)
 800357a:	5cd3      	ldrb	r3, [r2, r3]
 800357c:	461a      	mov	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	40d3      	lsrs	r3, r2
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	08003c84 	.word	0x08003c84

08003590 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003598:	f7ff ff3c 	bl	8003414 <LL_RCC_GetAPB2Prescaler>
 800359c:	4603      	mov	r3, r0
 800359e:	0b5b      	lsrs	r3, r3, #13
 80035a0:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <RCC_GetPCLK2ClockFreq+0x24>)
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	461a      	mov	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	40d3      	lsrs	r3, r2
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	08003c84 	.word	0x08003c84

080035b8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80035b8:	b590      	push	{r4, r7, lr}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80035cc:	f7ff ff30 	bl	8003430 <LL_RCC_PLL_GetMainSource>
 80035d0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035de:	d003      	beq.n	80035e8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80035e0:	e005      	b.n	80035ee <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80035e2:	4b12      	ldr	r3, [pc, #72]	@ (800362c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80035e4:	617b      	str	r3, [r7, #20]
      break;
 80035e6:	e005      	b.n	80035f4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80035ea:	617b      	str	r3, [r7, #20]
      break;
 80035ec:	e002      	b.n	80035f4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80035ee:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80035f0:	617b      	str	r3, [r7, #20]
      break;
 80035f2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d113      	bne.n	8003622 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80035fa:	f7ff ff43 	bl	8003484 <LL_RCC_PLL_GetDivider>
 80035fe:	4602      	mov	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fbb3 f4f2 	udiv	r4, r3, r2
 8003606:	f7ff ff21 	bl	800344c <LL_RCC_PLL_GetN>
 800360a:	4603      	mov	r3, r0
 800360c:	fb03 f404 	mul.w	r4, r3, r4
 8003610:	f7ff ff2a 	bl	8003468 <LL_RCC_PLL_GetP>
 8003614:	4603      	mov	r3, r0
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	3301      	adds	r3, #1
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003620:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003622:	693b      	ldr	r3, [r7, #16]
}
 8003624:	4618      	mov	r0, r3
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd90      	pop	{r4, r7, pc}
 800362c:	00f42400 	.word	0x00f42400
 8003630:	007a1200 	.word	0x007a1200

08003634 <LL_USART_IsEnabled>:
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_USART_SetStopBitsLength>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	611a      	str	r2, [r3, #16]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <LL_USART_SetHWFlowCtrl>:
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	615a      	str	r2, [r3, #20]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_USART_SetBaudRate>:
{
 80036a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ac:	b0c0      	sub	sp, #256	@ 0x100
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036b4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80036b8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80036bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c8:	f040 810c 	bne.w	80038e4 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80036cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036de:	4622      	mov	r2, r4
 80036e0:	462b      	mov	r3, r5
 80036e2:	1891      	adds	r1, r2, r2
 80036e4:	6639      	str	r1, [r7, #96]	@ 0x60
 80036e6:	415b      	adcs	r3, r3
 80036e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80036ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80036ee:	4621      	mov	r1, r4
 80036f0:	eb12 0801 	adds.w	r8, r2, r1
 80036f4:	4629      	mov	r1, r5
 80036f6:	eb43 0901 	adc.w	r9, r3, r1
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800370a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800370e:	4690      	mov	r8, r2
 8003710:	4699      	mov	r9, r3
 8003712:	4623      	mov	r3, r4
 8003714:	eb18 0303 	adds.w	r3, r8, r3
 8003718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800371c:	462b      	mov	r3, r5
 800371e:	eb49 0303 	adc.w	r3, r9, r3
 8003722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003726:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800372a:	2200      	movs	r2, #0
 800372c:	469a      	mov	sl, r3
 800372e:	4693      	mov	fp, r2
 8003730:	eb1a 030a 	adds.w	r3, sl, sl
 8003734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003736:	eb4b 030b 	adc.w	r3, fp, fp
 800373a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800373c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003744:	f7fc fd40 	bl	80001c8 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4b64      	ldr	r3, [pc, #400]	@ (80038e0 <LL_USART_SetBaudRate+0x238>)
 800374e:	fba3 2302 	umull	r2, r3, r3, r2
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	b29b      	uxth	r3, r3
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	b29c      	uxth	r4, r3
 800375a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003764:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003768:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	1891      	adds	r1, r2, r2
 8003772:	6539      	str	r1, [r7, #80]	@ 0x50
 8003774:	415b      	adcs	r3, r3
 8003776:	657b      	str	r3, [r7, #84]	@ 0x54
 8003778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800377c:	4641      	mov	r1, r8
 800377e:	1851      	adds	r1, r2, r1
 8003780:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003782:	4649      	mov	r1, r9
 8003784:	414b      	adcs	r3, r1
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003794:	4659      	mov	r1, fp
 8003796:	00cb      	lsls	r3, r1, #3
 8003798:	4651      	mov	r1, sl
 800379a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379e:	4651      	mov	r1, sl
 80037a0:	00ca      	lsls	r2, r1, #3
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	4642      	mov	r2, r8
 80037aa:	189b      	adds	r3, r3, r2
 80037ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b0:	464b      	mov	r3, r9
 80037b2:	460a      	mov	r2, r1
 80037b4:	eb42 0303 	adc.w	r3, r2, r3
 80037b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80037bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037c6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80037ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037ce:	460b      	mov	r3, r1
 80037d0:	18db      	adds	r3, r3, r3
 80037d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80037d4:	4613      	mov	r3, r2
 80037d6:	eb42 0303 	adc.w	r3, r2, r3
 80037da:	647b      	str	r3, [r7, #68]	@ 0x44
 80037dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037e0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80037e4:	f7fc fcf0 	bl	80001c8 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4611      	mov	r1, r2
 80037ee:	4b3c      	ldr	r3, [pc, #240]	@ (80038e0 <LL_USART_SetBaudRate+0x238>)
 80037f0:	fba3 2301 	umull	r2, r3, r3, r1
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	2264      	movs	r2, #100	@ 0x64
 80037f8:	fb02 f303 	mul.w	r3, r2, r3
 80037fc:	1acb      	subs	r3, r1, r3
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003804:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <LL_USART_SetBaudRate+0x238>)
 8003806:	fba3 2302 	umull	r2, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	b29b      	uxth	r3, r3
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003816:	b29b      	uxth	r3, r3
 8003818:	4423      	add	r3, r4
 800381a:	b29c      	uxth	r4, r3
 800381c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003826:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800382a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800382e:	4642      	mov	r2, r8
 8003830:	464b      	mov	r3, r9
 8003832:	1891      	adds	r1, r2, r2
 8003834:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003836:	415b      	adcs	r3, r3
 8003838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800383a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800383e:	4641      	mov	r1, r8
 8003840:	1851      	adds	r1, r2, r1
 8003842:	6339      	str	r1, [r7, #48]	@ 0x30
 8003844:	4649      	mov	r1, r9
 8003846:	414b      	adcs	r3, r1
 8003848:	637b      	str	r3, [r7, #52]	@ 0x34
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003856:	4659      	mov	r1, fp
 8003858:	00cb      	lsls	r3, r1, #3
 800385a:	4651      	mov	r1, sl
 800385c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003860:	4651      	mov	r1, sl
 8003862:	00ca      	lsls	r2, r1, #3
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	4603      	mov	r3, r0
 800386a:	4642      	mov	r2, r8
 800386c:	189b      	adds	r3, r3, r2
 800386e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003872:	464b      	mov	r3, r9
 8003874:	460a      	mov	r2, r1
 8003876:	eb42 0303 	adc.w	r3, r2, r3
 800387a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800387e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003888:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800388c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003890:	460b      	mov	r3, r1
 8003892:	18db      	adds	r3, r3, r3
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003896:	4613      	mov	r3, r2
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800389e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038a2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80038a6:	f7fc fc8f 	bl	80001c8 <__aeabi_uldivmod>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <LL_USART_SetBaudRate+0x238>)
 80038b0:	fba3 1302 	umull	r1, r3, r3, r2
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	2164      	movs	r1, #100	@ 0x64
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	3332      	adds	r3, #50	@ 0x32
 80038c2:	4a07      	ldr	r2, [pc, #28]	@ (80038e0 <LL_USART_SetBaudRate+0x238>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	4423      	add	r3, r4
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	e108      	b.n	8003af2 <LL_USART_SetBaudRate+0x44a>
 80038e0:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80038e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038ee:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038f2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80038f6:	4642      	mov	r2, r8
 80038f8:	464b      	mov	r3, r9
 80038fa:	1891      	adds	r1, r2, r2
 80038fc:	6239      	str	r1, [r7, #32]
 80038fe:	415b      	adcs	r3, r3
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
 8003902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003906:	4641      	mov	r1, r8
 8003908:	1854      	adds	r4, r2, r1
 800390a:	4649      	mov	r1, r9
 800390c:	eb43 0501 	adc.w	r5, r3, r1
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	00eb      	lsls	r3, r5, #3
 800391a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800391e:	00e2      	lsls	r2, r4, #3
 8003920:	4614      	mov	r4, r2
 8003922:	461d      	mov	r5, r3
 8003924:	4643      	mov	r3, r8
 8003926:	18e3      	adds	r3, r4, r3
 8003928:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800392c:	464b      	mov	r3, r9
 800392e:	eb45 0303 	adc.w	r3, r5, r3
 8003932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003936:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003940:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8003950:	4629      	mov	r1, r5
 8003952:	008b      	lsls	r3, r1, #2
 8003954:	4621      	mov	r1, r4
 8003956:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800395a:	4621      	mov	r1, r4
 800395c:	008a      	lsls	r2, r1, #2
 800395e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003962:	f7fc fc31 	bl	80001c8 <__aeabi_uldivmod>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4b65      	ldr	r3, [pc, #404]	@ (8003b00 <LL_USART_SetBaudRate+0x458>)
 800396c:	fba3 2302 	umull	r2, r3, r3, r2
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b29b      	uxth	r3, r3
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	b29c      	uxth	r4, r3
 8003978:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800397c:	2200      	movs	r2, #0
 800397e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003982:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003986:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800398a:	4642      	mov	r2, r8
 800398c:	464b      	mov	r3, r9
 800398e:	1891      	adds	r1, r2, r2
 8003990:	61b9      	str	r1, [r7, #24]
 8003992:	415b      	adcs	r3, r3
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800399a:	4641      	mov	r1, r8
 800399c:	1851      	adds	r1, r2, r1
 800399e:	6139      	str	r1, [r7, #16]
 80039a0:	4649      	mov	r1, r9
 80039a2:	414b      	adcs	r3, r1
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b2:	4659      	mov	r1, fp
 80039b4:	00cb      	lsls	r3, r1, #3
 80039b6:	4651      	mov	r1, sl
 80039b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039bc:	4651      	mov	r1, sl
 80039be:	00ca      	lsls	r2, r1, #3
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	4603      	mov	r3, r0
 80039c6:	4642      	mov	r2, r8
 80039c8:	189b      	adds	r3, r3, r2
 80039ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039ce:	464b      	mov	r3, r9
 80039d0:	460a      	mov	r2, r1
 80039d2:	eb42 0303 	adc.w	r3, r2, r3
 80039d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80039f4:	4649      	mov	r1, r9
 80039f6:	008b      	lsls	r3, r1, #2
 80039f8:	4641      	mov	r1, r8
 80039fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039fe:	4641      	mov	r1, r8
 8003a00:	008a      	lsls	r2, r1, #2
 8003a02:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003a06:	f7fc fbdf 	bl	80001c8 <__aeabi_uldivmod>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4b3b      	ldr	r3, [pc, #236]	@ (8003b00 <LL_USART_SetBaudRate+0x458>)
 8003a12:	fba3 2301 	umull	r2, r3, r3, r1
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	2264      	movs	r2, #100	@ 0x64
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	1acb      	subs	r3, r1, r3
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	3332      	adds	r3, #50	@ 0x32
 8003a24:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <LL_USART_SetBaudRate+0x458>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	4423      	add	r3, r4
 8003a36:	b29c      	uxth	r4, r3
 8003a38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a40:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a42:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a46:	4642      	mov	r2, r8
 8003a48:	464b      	mov	r3, r9
 8003a4a:	1891      	adds	r1, r2, r2
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	415b      	adcs	r3, r3
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a56:	4641      	mov	r1, r8
 8003a58:	1851      	adds	r1, r2, r1
 8003a5a:	6039      	str	r1, [r7, #0]
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	414b      	adcs	r3, r1
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a6e:	4659      	mov	r1, fp
 8003a70:	00cb      	lsls	r3, r1, #3
 8003a72:	4651      	mov	r1, sl
 8003a74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a78:	4651      	mov	r1, sl
 8003a7a:	00ca      	lsls	r2, r1, #3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4603      	mov	r3, r0
 8003a82:	4642      	mov	r2, r8
 8003a84:	189b      	adds	r3, r3, r2
 8003a86:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a88:	464b      	mov	r3, r9
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	eb42 0303 	adc.w	r3, r2, r3
 8003a90:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003a96:	2200      	movs	r2, #0
 8003a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	008b      	lsls	r3, r1, #2
 8003aac:	4641      	mov	r1, r8
 8003aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	008a      	lsls	r2, r1, #2
 8003ab6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003aba:	f7fc fb85 	bl	80001c8 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <LL_USART_SetBaudRate+0x458>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	@ 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	3332      	adds	r3, #50	@ 0x32
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b00 <LL_USART_SetBaudRate+0x458>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	4423      	add	r3, r4
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af0:	609a      	str	r2, [r3, #8]
}
 8003af2:	bf00      	nop
 8003af4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afe:	bf00      	nop
 8003b00:	51eb851f 	.word	0x51eb851f

08003b04 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fd8c 	bl	8003634 <LL_USART_IsEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d15e      	bne.n	8003be0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003b2a:	f023 030c 	bic.w	r3, r3, #12
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	6851      	ldr	r1, [r2, #4]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	68d2      	ldr	r2, [r2, #12]
 8003b36:	4311      	orrs	r1, r2
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	6912      	ldr	r2, [r2, #16]
 8003b3c:	4311      	orrs	r1, r2
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	6992      	ldr	r2, [r2, #24]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fd83 	bl	800365c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fd90 	bl	8003682 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fc9a 	bl	80034a0 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bec <LL_USART_Init+0xe8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d102      	bne.n	8003b7a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e021      	b.n	8003bbe <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf0 <LL_USART_Init+0xec>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d102      	bne.n	8003b88 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	e01a      	b.n	8003bbe <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf4 <LL_USART_Init+0xf0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d102      	bne.n	8003b96 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e013      	b.n	8003bbe <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a17      	ldr	r2, [pc, #92]	@ (8003bf8 <LL_USART_Init+0xf4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d102      	bne.n	8003ba4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	e00c      	b.n	8003bbe <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <LL_USART_Init+0xf8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d102      	bne.n	8003bb2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e005      	b.n	8003bbe <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a12      	ldr	r2, [pc, #72]	@ (8003c00 <LL_USART_Init+0xfc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fd64 	bl	80036a8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40011000 	.word	0x40011000
 8003bf0:	40004400 	.word	0x40004400
 8003bf4:	40004800 	.word	0x40004800
 8003bf8:	40011400 	.word	0x40011400
 8003bfc:	40004c00 	.word	0x40004c00
 8003c00:	40005000 	.word	0x40005000

08003c04 <memset>:
 8003c04:	4402      	add	r2, r0
 8003c06:	4603      	mov	r3, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	4d0d      	ldr	r5, [pc, #52]	@ (8003c4c <__libc_init_array+0x38>)
 8003c18:	4c0d      	ldr	r4, [pc, #52]	@ (8003c50 <__libc_init_array+0x3c>)
 8003c1a:	1b64      	subs	r4, r4, r5
 8003c1c:	10a4      	asrs	r4, r4, #2
 8003c1e:	2600      	movs	r6, #0
 8003c20:	42a6      	cmp	r6, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	4d0b      	ldr	r5, [pc, #44]	@ (8003c54 <__libc_init_array+0x40>)
 8003c26:	4c0c      	ldr	r4, [pc, #48]	@ (8003c58 <__libc_init_array+0x44>)
 8003c28:	f000 f818 	bl	8003c5c <_init>
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	2600      	movs	r6, #0
 8003c32:	42a6      	cmp	r6, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3c:	4798      	blx	r3
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c46:	4798      	blx	r3
 8003c48:	3601      	adds	r6, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	08003c94 	.word	0x08003c94
 8003c50:	08003c94 	.word	0x08003c94
 8003c54:	08003c94 	.word	0x08003c94
 8003c58:	08003c98 	.word	0x08003c98

08003c5c <_init>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr

08003c68 <_fini>:
 8003c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6a:	bf00      	nop
 8003c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6e:	bc08      	pop	{r3}
 8003c70:	469e      	mov	lr, r3
 8003c72:	4770      	bx	lr
